
gps4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b328  0800b328  0001b328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b82c  0800b82c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b834  0800b834  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  200001d4  0800ba10  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000116c  0800ba10  0002116c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001858a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003357  00000000  00000000  000387d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0003bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119f  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f29  00000000  00000000  0003e387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acf5  00000000  00000000  000672b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5507  00000000  00000000  00081fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078fc  00000000  00000000  001774ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b310 	.word	0x0800b310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b310 	.word	0x0800b310

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f001 f93d 	bl	8002272 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f820 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 fa06 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f000 f9e6 	bl	80013d0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001004:	f000 f87c 	bl	8001100 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001008:	f000 f8b2 	bl	8001170 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800100c:	f000 f8ee 	bl	80011ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001010:	f000 f912 	bl	8001238 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001014:	f000 f97e 	bl	8001314 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001018:	f000 f9ac 	bl	8001374 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 800101c:	f000 f94a 	bl	80012b4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart4, (uint8_t*)Rxdata, 700);
 8001020:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <main+0x44>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <main+0x48>)
 8001028:	f003 ffba 	bl	8004fa0 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_location();
 800102c:	f000 fbae 	bl	800178c <get_location>
 8001030:	e7fc      	b.n	800102c <main+0x3c>
 8001032:	bf00      	nop
 8001034:	20000988 	.word	0x20000988
 8001038:	20000324 	.word	0x20000324

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f8ff 	bl	800724e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001062:	f002 fa33 	bl	80034cc <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 fcc4 	bl	80019f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001070:	f002 fa0e 	bl	8003490 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <SystemClock_Config+0xc0>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <SystemClock_Config+0xc0>)
 800107c:	f023 0318 	bic.w	r3, r3, #24
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001084:	2314      	movs	r3, #20
 8001086:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800109c:	2301      	movs	r3, #1
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010a4:	2328      	movs	r3, #40	; 0x28
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fb29 	bl	8003710 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010c4:	f000 fc98 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2303      	movs	r3, #3
 80010ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2104      	movs	r1, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fef1 	bl	8003ec8 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010ec:	f000 fc84 	bl	80019f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010f0:	f003 fbf8 	bl	80048e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	; 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000

08001100 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <MX_DFSDM1_Init+0x6c>)
 8001108:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800110c:	2201      	movs	r2, #1
 800110e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001118:	2202      	movs	r2, #2
 800111a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001138:	2204      	movs	r2, #4
 800113a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001144:	2201      	movs	r2, #1
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001156:	f001 fa37 	bl	80025c8 <HAL_DFSDM_ChannelInit>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001160:	f000 fc4a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	40016020 	.word	0x40016020

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C2_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C2_Init+0x74>)
 800117c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001180:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_I2C2_Init+0x74>)
 800118a:	2201      	movs	r2, #1
 800118c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C2_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011ae:	f001 fef4 	bl	8002f9a <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 fc1e 	bl	80019f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011c0:	f001 ff86 	bl	80030d0 <HAL_I2CEx_ConfigAnalogFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f000 fc15 	bl	80019f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011d2:	f001 ffc8 	bl	8003166 <HAL_I2CEx_ConfigDigitalFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 fc0c 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000228 	.word	0x20000228
 80011e8:	40005800 	.word	0x40005800

080011ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <MX_QUADSPI_Init+0x48>)
 80011f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011fe:	2204      	movs	r2, #4
 8001200:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001204:	2210      	movs	r2, #16
 8001206:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_QUADSPI_Init+0x44>)
 800120a:	2217      	movs	r2, #23
 800120c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_QUADSPI_Init+0x44>)
 800121c:	f002 f9bc 	bl	8003598 <HAL_QSPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001226:	f000 fbe7 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000027c 	.word	0x2000027c
 8001234:	a0001000 	.word	0xa0001000

08001238 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_SPI3_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_SPI3_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_SPI3_Init+0x74>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_SPI3_Init+0x74>)
 8001252:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001256:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_SPI3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_SPI3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI3_Init+0x74>)
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI3_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI3_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI3_Init+0x74>)
 8001286:	2207      	movs	r2, #7
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI3_Init+0x74>)
 8001292:	2208      	movs	r2, #8
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_SPI3_Init+0x74>)
 8001298:	f003 fd06 	bl	8004ca8 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 fba9 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002c0 	.word	0x200002c0
 80012b0:	40003c00 	.word	0x40003c00

080012b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_UART4_Init+0x58>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <MX_UART4_Init+0x5c>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_UART4_Init+0x58>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_UART4_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_UART4_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_UART4_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_UART4_Init+0x58>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_UART4_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_UART4_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_UART4_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_UART4_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_UART4_Init+0x58>)
 80012f8:	f003 fd79 	bl	8004dee <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 fb79 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000324 	.word	0x20000324
 8001310:	40004c00 	.word	0x40004c00

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USART1_UART_Init+0x58>)
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <MX_USART1_UART_Init+0x5c>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x58>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART1_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x58>)
 8001358:	f003 fd49 	bl	8004dee <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 fb49 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200003ac 	.word	0x200003ac
 8001370:	40013800 	.word	0x40013800

08001374 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800137e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	2206      	movs	r2, #6
 8001384:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001388:	2202      	movs	r2, #2
 800138a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	2202      	movs	r2, #2
 8001390:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b8:	f001 ff21 	bl	80031fe <HAL_PCD_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 fb19 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000047c 	.word	0x2000047c

080013d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x38>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x38>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x38>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	203c      	movs	r0, #60	; 0x3c
 80013f4:	f001 f8b1 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80013f8:	203c      	movs	r0, #60	; 0x3c
 80013fa:	f001 f8ca 	bl	8002592 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	4bbc      	ldr	r3, [pc, #752]	; (8001714 <MX_GPIO_Init+0x308>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4abb      	ldr	r2, [pc, #748]	; (8001714 <MX_GPIO_Init+0x308>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4bb9      	ldr	r3, [pc, #740]	; (8001714 <MX_GPIO_Init+0x308>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4bb6      	ldr	r3, [pc, #728]	; (8001714 <MX_GPIO_Init+0x308>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4ab5      	ldr	r2, [pc, #724]	; (8001714 <MX_GPIO_Init+0x308>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4bb3      	ldr	r3, [pc, #716]	; (8001714 <MX_GPIO_Init+0x308>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4bb0      	ldr	r3, [pc, #704]	; (8001714 <MX_GPIO_Init+0x308>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4aaf      	ldr	r2, [pc, #700]	; (8001714 <MX_GPIO_Init+0x308>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4bad      	ldr	r3, [pc, #692]	; (8001714 <MX_GPIO_Init+0x308>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4baa      	ldr	r3, [pc, #680]	; (8001714 <MX_GPIO_Init+0x308>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4aa9      	ldr	r2, [pc, #676]	; (8001714 <MX_GPIO_Init+0x308>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4ba7      	ldr	r3, [pc, #668]	; (8001714 <MX_GPIO_Init+0x308>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4ba4      	ldr	r3, [pc, #656]	; (8001714 <MX_GPIO_Init+0x308>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4aa3      	ldr	r2, [pc, #652]	; (8001714 <MX_GPIO_Init+0x308>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4ba1      	ldr	r3, [pc, #644]	; (8001714 <MX_GPIO_Init+0x308>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80014a0:	489d      	ldr	r0, [pc, #628]	; (8001718 <MX_GPIO_Init+0x30c>)
 80014a2:	f001 fd3f 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f248 1104 	movw	r1, #33028	; 0x8104
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f001 fd38 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80014b4:	2200      	movs	r2, #0
 80014b6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80014ba:	4898      	ldr	r0, [pc, #608]	; (800171c <MX_GPIO_Init+0x310>)
 80014bc:	f001 fd32 	bl	8002f24 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f241 0181 	movw	r1, #4225	; 0x1081
 80014c6:	4896      	ldr	r0, [pc, #600]	; (8001720 <MX_GPIO_Init+0x314>)
 80014c8:	f001 fd2c 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4893      	ldr	r0, [pc, #588]	; (8001720 <MX_GPIO_Init+0x314>)
 80014d4:	f001 fd26 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80014de:	4891      	ldr	r0, [pc, #580]	; (8001724 <MX_GPIO_Init+0x318>)
 80014e0:	f001 fd20 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	488c      	ldr	r0, [pc, #560]	; (800171c <MX_GPIO_Init+0x310>)
 80014ea:	f001 fd1b 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2101      	movs	r1, #1
 80014f2:	4889      	ldr	r0, [pc, #548]	; (8001718 <MX_GPIO_Init+0x30c>)
 80014f4:	f001 fd16 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014f8:	f240 1315 	movw	r3, #277	; 0x115
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4881      	ldr	r0, [pc, #516]	; (8001718 <MX_GPIO_Init+0x30c>)
 8001512:	f001 fb5d 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001516:	236a      	movs	r3, #106	; 0x6a
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	487b      	ldr	r0, [pc, #492]	; (8001718 <MX_GPIO_Init+0x30c>)
 800152c:	f001 fb50 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001536:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4877      	ldr	r0, [pc, #476]	; (8001724 <MX_GPIO_Init+0x318>)
 8001548:	f001 fb42 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800154c:	233f      	movs	r3, #63	; 0x3f
 800154e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001550:	230b      	movs	r3, #11
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4871      	ldr	r0, [pc, #452]	; (8001724 <MX_GPIO_Init+0x318>)
 8001560:	f001 fb36 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001564:	f248 1304 	movw	r3, #33028	; 0x8104
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f001 fb26 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001584:	2308      	movs	r3, #8
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f001 fb15 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80015a6:	2310      	movs	r3, #16
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015aa:	230b      	movs	r3, #11
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f001 fb08 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015c0:	23e0      	movs	r3, #224	; 0xe0
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d0:	2305      	movs	r3, #5
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f001 faf7 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4849      	ldr	r0, [pc, #292]	; (800171c <MX_GPIO_Init+0x310>)
 80015f8:	f001 faea 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015fc:	2302      	movs	r3, #2
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001600:	230b      	movs	r3, #11
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4843      	ldr	r0, [pc, #268]	; (800171c <MX_GPIO_Init+0x310>)
 8001610:	f001 fade 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001614:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001618:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	483b      	ldr	r0, [pc, #236]	; (800171c <MX_GPIO_Init+0x310>)
 800162e:	f001 facf 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4834      	ldr	r0, [pc, #208]	; (8001720 <MX_GPIO_Init+0x314>)
 8001650:	f001 fabe 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001654:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001658:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	482d      	ldr	r0, [pc, #180]	; (8001720 <MX_GPIO_Init+0x314>)
 800166c:	f001 fab0 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001670:	f243 0381 	movw	r3, #12417	; 0x3081
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4825      	ldr	r0, [pc, #148]	; (8001720 <MX_GPIO_Init+0x314>)
 800168a:	f001 faa1 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800168e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_GPIO_Init+0x318>)
 80016a8:	f001 fa92 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80016ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_GPIO_Init+0x318>)
 80016c4:	f001 fa84 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80016c8:	2302      	movs	r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d8:	2305      	movs	r3, #5
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <MX_GPIO_Init+0x314>)
 80016e4:	f001 fa74 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016e8:	2378      	movs	r3, #120	; 0x78
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f8:	2307      	movs	r3, #7
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_GPIO_Init+0x314>)
 8001704:	f001 fa64 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	e009      	b.n	8001728 <MX_GPIO_Init+0x31c>
 8001714:	40021000 	.word	0x40021000
 8001718:	48001000 	.word	0x48001000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000c00 	.word	0x48000c00
 8001724:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001730:	2304      	movs	r3, #4
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <MX_GPIO_Init+0x35c>)
 800173c:	f001 fa48 	bl	8002bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2017      	movs	r0, #23
 8001746:	f000 ff08 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800174a:	2017      	movs	r0, #23
 800174c:	f000 ff21 	bl	8002592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2028      	movs	r0, #40	; 0x28
 8001756:	f000 ff00 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800175a:	2028      	movs	r0, #40	; 0x28
 800175c:	f000 ff19 	bl	8002592 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	Flag=1;
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_UART_RxCpltCallback+0x1c>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000fcd 	.word	0x20000fcd

0800178c <get_location>:

void get_location(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af02      	add	r7, sp, #8
	//HAL_UART_Transmit(&huart1, (uint8_t*)Txdata, strlen(Txdata), HAL_MAX_DELAY);
	if(Flag==1)
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <get_location+0xe0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d165      	bne.n	8001866 <get_location+0xda>
	{
		Msgindex=0;
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <get_location+0xe4>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)(Rxdata));
 80017a0:	4934      	ldr	r1, [pc, #208]	; (8001874 <get_location+0xe8>)
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <get_location+0xec>)
 80017a4:	f005 fde8 	bl	8007378 <strcpy>
		ptr=strstr(Txdata,"GNRMC");
 80017a8:	4934      	ldr	r1, [pc, #208]	; (800187c <get_location+0xf0>)
 80017aa:	4833      	ldr	r0, [pc, #204]	; (8001878 <get_location+0xec>)
 80017ac:	f005 fd57 	bl	800725e <strstr>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a33      	ldr	r2, [pc, #204]	; (8001880 <get_location+0xf4>)
 80017b4:	6013      	str	r3, [r2, #0]
		if(*ptr=='G')
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <get_location+0xf4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b47      	cmp	r3, #71	; 0x47
 80017be:	d152      	bne.n	8001866 <get_location+0xda>
		{
			while(1)
			{
				GPS_Payyload[Msgindex]=*ptr;
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <get_location+0xf4>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <get_location+0xe4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	7811      	ldrb	r1, [r2, #0]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <get_location+0xf8>)
 80017cc:	54d1      	strb	r1, [r2, r3]
				Msgindex++;
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <get_location+0xe4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a26      	ldr	r2, [pc, #152]	; (8001870 <get_location+0xe4>)
 80017d6:	6013      	str	r3, [r2, #0]
				*ptr=*(ptr+Msgindex);
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <get_location+0xf4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <get_location+0xe4>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	441a      	add	r2, r3
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <get_location+0xf4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
				if(*ptr=='\n')
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <get_location+0xf4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0a      	cmp	r3, #10
 80017f2:	d1e5      	bne.n	80017c0 <get_location+0x34>
				{
					GPS_Payyload[Msgindex]='\0';
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <get_location+0xe4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <get_location+0xf8>)
 80017fa:	2100      	movs	r1, #0
 80017fc:	54d1      	strb	r1, [r2, r3]
					break;
 80017fe:	bf00      	nop
				}
			}
			sscanf(GPS_Payyload,"GNRMC,%f,%c,%f,N,%f,",&time,&check,&Latitude,&Longitude);
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <get_location+0xfc>)
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <get_location+0x100>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <get_location+0x104>)
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <get_location+0x108>)
 800180c:	4922      	ldr	r1, [pc, #136]	; (8001898 <get_location+0x10c>)
 800180e:	481d      	ldr	r0, [pc, #116]	; (8001884 <get_location+0xf8>)
 8001810:	f005 fcac 	bl	800716c <siscanf>
			if(check == 'A')
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <get_location+0x104>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b41      	cmp	r3, #65	; 0x41
 800181a:	d111      	bne.n	8001840 <get_location+0xb4>
			{
			Format_data(time,Latitude,Longitude);
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <get_location+0x108>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <get_location+0x100>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <get_location+0xfc>)
 800182a:	edd3 6a00 	vldr	s13, [r3]
 800182e:	eeb0 1a66 	vmov.f32	s2, s13
 8001832:	eef0 0a47 	vmov.f32	s1, s14
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	f000 f835 	bl	80018a8 <Format_data>
 800183e:	e00c      	b.n	800185a <get_location+0xce>
			}
			else
			{
				HAL_UART_Transmit(&huart1, (uint8_t*)"invalid signals", 15, 100);
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	220f      	movs	r2, #15
 8001844:	4915      	ldr	r1, [pc, #84]	; (800189c <get_location+0x110>)
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <get_location+0x114>)
 8001848:	f003 fb1f 	bl	8004e8a <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	2202      	movs	r2, #2
 8001852:	4914      	ldr	r1, [pc, #80]	; (80018a4 <get_location+0x118>)
 8001854:	4812      	ldr	r0, [pc, #72]	; (80018a0 <get_location+0x114>)
 8001856:	f003 fb18 	bl	8004e8a <HAL_UART_Transmit>
			}
			HAL_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fd7e 	bl	800235c <HAL_Delay>
			Flag=0;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <get_location+0xe0>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000fcd 	.word	0x20000fcd
 8001870:	20000fd0 	.word	0x20000fd0
 8001874:	20000988 	.word	0x20000988
 8001878:	20000c78 	.word	0x20000c78
 800187c:	0800b328 	.word	0x0800b328
 8001880:	20000fd4 	.word	0x20000fd4
 8001884:	20000f68 	.word	0x20000f68
 8001888:	20000fe0 	.word	0x20000fe0
 800188c:	20000fdc 	.word	0x20000fdc
 8001890:	20000fcc 	.word	0x20000fcc
 8001894:	20000fd8 	.word	0x20000fd8
 8001898:	0800b330 	.word	0x0800b330
 800189c:	0800b348 	.word	0x0800b348
 80018a0:	200003ac 	.word	0x200003ac
 80018a4:	0800b358 	.word	0x0800b358

080018a8 <Format_data>:

void Format_data(float Time,float Lat,float Long)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	b0a7      	sub	sp, #156	; 0x9c
 80018ac:	af06      	add	r7, sp, #24
 80018ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80018b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80018b6:	ed87 1a03 	vstr	s2, [r7, #12]
	char Data[100];
	Hours=(int)Time/10000;
 80018ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80018be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c2:	ee17 1a90 	vmov	r1, s15
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <Format_data+0x124>)
 80018c8:	fb83 2301 	smull	r2, r3, r3, r1
 80018cc:	131a      	asrs	r2, r3, #12
 80018ce:	17cb      	asrs	r3, r1, #31
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a3f      	ldr	r2, [pc, #252]	; (80019d0 <Format_data+0x128>)
 80018d4:	6013      	str	r3, [r2, #0]
	Min=(int)(Time-(Hours*10000))/100;
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <Format_data+0x128>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f242 7210 	movw	r2, #10000	; 0x2710
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f6:	ee17 1a90 	vmov	r1, s15
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <Format_data+0x12c>)
 80018fc:	fb83 2301 	smull	r2, r3, r3, r1
 8001900:	115a      	asrs	r2, r3, #5
 8001902:	17cb      	asrs	r3, r1, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <Format_data+0x130>)
 8001908:	6013      	str	r3, [r2, #0]
	Sec=(int)(Time-((Hours*10000)+(Min*100)));
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <Format_data+0x128>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001912:	fb03 f202 	mul.w	r2, r3, r2
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <Format_data+0x130>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2164      	movs	r1, #100	; 0x64
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ed97 7a05 	vldr	s14, [r7, #20]
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001936:	ee17 2a90 	vmov	r2, s15
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <Format_data+0x134>)
 800193c:	601a      	str	r2, [r3, #0]
	sprintf(Data,"\r\nTime=%d:%d:%d Latitude=%f N,Longitude=%f E",Hours,Min,Sec,Latitude/100,Longitude/100);
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <Format_data+0x128>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <Format_data+0x130>)
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	6079      	str	r1, [r7, #4]
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <Format_data+0x134>)
 800194c:	681e      	ldr	r6, [r3, #0]
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <Format_data+0x138>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80019e4 <Format_data+0x13c>
 8001958:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800195c:	ee16 0a90 	vmov	r0, s13
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <Format_data+0x140>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019e4 <Format_data+0x13c>
 8001972:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001976:	ee16 0a90 	vmov	r0, s13
 800197a:	f7fe fde5 	bl	8000548 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	f107 001c 	add.w	r0, r7, #28
 8001986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800198a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800198e:	9600      	str	r6, [sp, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4915      	ldr	r1, [pc, #84]	; (80019ec <Format_data+0x144>)
 8001996:	f005 fbc9 	bl	800712c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fc66 	bl	8000270 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f107 011c 	add.w	r1, r7, #28
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	480f      	ldr	r0, [pc, #60]	; (80019f0 <Format_data+0x148>)
 80019b2:	f003 fa6a 	bl	8004e8a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n\n", 3, HAL_MAX_DELAY);
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	2203      	movs	r2, #3
 80019bc:	490d      	ldr	r1, [pc, #52]	; (80019f4 <Format_data+0x14c>)
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <Format_data+0x148>)
 80019c0:	f003 fa63 	bl	8004e8a <HAL_UART_Transmit>
}
 80019c4:	bf00      	nop
 80019c6:	3784      	adds	r7, #132	; 0x84
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019cc:	68db8bad 	.word	0x68db8bad
 80019d0:	20000fe4 	.word	0x20000fe4
 80019d4:	51eb851f 	.word	0x51eb851f
 80019d8:	20000fe8 	.word	0x20000fe8
 80019dc:	20000fec 	.word	0x20000fec
 80019e0:	20000fdc 	.word	0x20000fdc
 80019e4:	42c80000 	.word	0x42c80000
 80019e8:	20000fe0 	.word	0x20000fe0
 80019ec:	0800b35c 	.word	0x0800b35c
 80019f0:	200003ac 	.word	0x200003ac
 80019f4:	0800b38c 	.word	0x0800b38c

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x44>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6613      	str	r3, [r2, #96]	; 0x60
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x44>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ac      	sub	sp, #176	; 0xb0
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2288      	movs	r2, #136	; 0x88
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 fbee 	bl	800724e <memset>
  if(DFSDM1_Init == 0)
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d142      	bne.n	8001b00 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fc40 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f7ff ffaf 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001aca:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aee:	4619      	mov	r1, r3
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001af2:	f001 f86d 	bl	8002bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a02      	ldr	r2, [pc, #8]	; (8001b08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001afe:	6013      	str	r3, [r2, #0]
  }

}
 8001b00:	bf00      	nop
 8001b02:	37b0      	adds	r7, #176	; 0xb0
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000ff0 	.word	0x20000ff0
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48001000 	.word	0x48001000

08001b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0ac      	sub	sp, #176	; 0xb0
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2288      	movs	r2, #136	; 0x88
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 fb8a 	bl	800724e <memset>
  if(hi2c->Instance==I2C2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_I2C_MspInit+0xb0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d13b      	bne.n	8001bbc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fbdd 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b5c:	f7ff ff4c 	bl	80019f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001b78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b92:	2304      	movs	r3, #4
 8001b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0xb8>)
 8001ba0:	f001 f816 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bae:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_I2C_MspInit+0xb4>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	; 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_QSPI_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d128      	bne.n	8001c44 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6513      	str	r3, [r2, #80]	; 0x50
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_QSPI_MspInit+0x80>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c22:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c26:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c34:	230a      	movs	r3, #10
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_QSPI_MspInit+0x84>)
 8001c40:	f000 ffc6 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	a0001000 	.word	0xa0001000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48001000 	.word	0x48001000

08001c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x7c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d128      	bne.n	8001ccc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_SPI_MspInit+0x80>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001caa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <HAL_SPI_MspInit+0x84>)
 8001cc8:	f000 ff82 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40003c00 	.word	0x40003c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000800 	.word	0x48000800

08001ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ae      	sub	sp, #184	; 0xb8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2288      	movs	r2, #136	; 0x88
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 faa4 	bl	800724e <memset>
  if(huart->Instance==UART4)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_UART_MspInit+0x184>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d165      	bne.n	8001ddc <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d10:	2308      	movs	r3, #8
 8001d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 faf7 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff fe66 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d2c:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d50:	4b45      	ldr	r3, [pc, #276]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d74:	2308      	movs	r3, #8
 8001d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d84:	f000 ff24 	bl	8002bd0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001d8a:	4a39      	ldr	r2, [pc, #228]	; (8001e70 <HAL_UART_MspInit+0x190>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001db4:	2220      	movs	r2, #32
 8001db6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001dbe:	482b      	ldr	r0, [pc, #172]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001dc0:	f000 fd0e 	bl	80027e0 <HAL_DMA_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001dca:	f7ff fe15 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001dd2:	675a      	str	r2, [r3, #116]	; 0x74
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_UART_MspInit+0x18c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dda:	e03f      	b.n	8001e5c <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_UART_MspInit+0x194>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d13a      	bne.n	8001e5c <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fa8c 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001dfe:	f7ff fdfb 	bl	80019f8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_UART_MspInit+0x188>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <HAL_UART_MspInit+0x198>)
 8001e58:	f000 feba 	bl	8002bd0 <HAL_GPIO_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	37b8      	adds	r7, #184	; 0xb8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40004c00 	.word	0x40004c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	20000434 	.word	0x20000434
 8001e70:	40020458 	.word	0x40020458
 8001e74:	40013800 	.word	0x40013800
 8001e78:	48000400 	.word	0x48000400

08001e7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0ac      	sub	sp, #176	; 0xb0
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2288      	movs	r2, #136	; 0x88
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 f9d6 	bl	800724e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eaa:	d17c      	bne.n	8001fa6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001eb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ed2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fa17 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001ee8:	f7ff fd86 	bl	80019f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f22:	f000 fe55 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f40:	230a      	movs	r3, #10
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f000 fe3e 	bl	8002bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d114      	bne.n	8001fa2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f90:	f001 faf2 	bl	8003578 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_PCD_MspInit+0x134>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fa0:	e001      	b.n	8001fa6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001fa2:	f001 fae9 	bl	8003578 <HAL_PWREx_EnableVddUSB>
}
 8001fa6:	bf00      	nop
 8001fa8:	37b0      	adds	r7, #176	; 0xb0
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f98c 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800200c:	2020      	movs	r0, #32
 800200e:	f000 ffa1 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002012:	2040      	movs	r0, #64	; 0x40
 8002014:	f000 ff9e 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002018:	2080      	movs	r0, #128	; 0x80
 800201a:	f000 ff9b 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800201e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002022:	f000 ff97 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800202e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002032:	f000 ff8f 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002036:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800203a:	f000 ff8b 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800203e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002042:	f000 ff87 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002046:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800204a:	f000 ff83 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800204e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002052:	f000 ff7f 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <DMA2_Channel5_IRQHandler+0x10>)
 8002062:	f000 fcd5 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000434 	.word	0x20000434

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800208a:	f005 f949 	bl	8007320 <__errno>
 800208e:	4603      	mov	r3, r0
 8002090:	2216      	movs	r2, #22
 8002092:	601a      	str	r2, [r3, #0]
  return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe7 	bl	8002080 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
  }

  return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
  }
  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	605a      	str	r2, [r3, #4]
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_isatty>:

int _isatty(int file)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d207      	bcs.n	80021d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c0:	f005 f8ae 	bl	8007320 <__errno>
 80021c4:	4603      	mov	r3, r0
 80021c6:	220c      	movs	r2, #12
 80021c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	e009      	b.n	80021e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <_sbrk+0x64>)
 80021e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20018000 	.word	0x20018000
 80021f0:	00000400 	.word	0x00000400
 80021f4:	20000ff4 	.word	0x20000ff4
 80021f8:	20001170 	.word	0x20001170

080021fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002224:	f7ff ffea 	bl	80021fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490d      	ldr	r1, [pc, #52]	; (8002260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0a      	ldr	r4, [pc, #40]	; (800226c <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224e:	f005 f86d 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002252:	f7fe fecd 	bl	8000ff0 <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002258:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002264:	0800b83c 	.word	0x0800b83c
  ldr r2, =_sbss
 8002268:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800226c:	2000116c 	.word	0x2000116c

08002270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_2_IRQHandler>

08002272 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f961 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002282:	2000      	movs	r0, #0
 8002284:	f000 f80e 	bl	80022a4 <HAL_InitTick>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	e001      	b.n	8002298 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002294:	f7ff fbb6 	bl	8001a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002298:	79fb      	ldrb	r3, [r7, #7]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_InitTick+0x6c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d023      	beq.n	8002300 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_InitTick+0x70>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_InitTick+0x6c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f96d 	bl	80025ae <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d809      	bhi.n	80022f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f000 f937 	bl	800255a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_InitTick+0x74>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e007      	b.n	8002304 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e004      	b.n	8002304 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e001      	b.n	8002304 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000008 	.word	0x20000008
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	20000ff8 	.word	0x20000ff8

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000ff8 	.word	0x20000ff8

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff8e 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff29 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff3e 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff8e 	bl	8002498 <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5d 	bl	8002444 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff31 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0ac      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f8b2 	bl	8002748 <DFSDM_GetChannelFromInstance>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_DFSDM_ChannelInit+0x174>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e09f      	b.n	8002734 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fa29 	bl	8001a4c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <HAL_DFSDM_ChannelInit+0x178>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_DFSDM_ChannelInit+0x178>)
 8002602:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002604:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_DFSDM_ChannelInit+0x178>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d125      	bne.n	8002658 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a4c      	ldr	r2, [pc, #304]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 8002612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002616:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002618:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4948      	ldr	r1, [pc, #288]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 800262c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002630:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	3b01      	subs	r3, #1
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	493f      	ldr	r1, [pc, #252]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800264c:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <HAL_DFSDM_ChannelInit+0x17c>)
 8002652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002656:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002666:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002676:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800267c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020f 	bic.w	r2, r2, #15
 8002694:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80026bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f002 0207 	and.w	r2, r2, #7
 80026e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002714:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f810 	bl	8002748 <DFSDM_GetChannelFromInstance>
 8002728:	4602      	mov	r2, r0
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_DFSDM_ChannelInit+0x174>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20001000 	.word	0x20001000
 8002740:	20000ffc 	.word	0x20000ffc
 8002744:	40016000 	.word	0x40016000

08002748 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e02b      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <DFSDM_GetChannelFromInstance+0x80>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d102      	bne.n	800276c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e024      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <DFSDM_GetChannelFromInstance+0x84>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002774:	2302      	movs	r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e01d      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <DFSDM_GetChannelFromInstance+0x88>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d102      	bne.n	8002788 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e016      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d102      	bne.n	8002796 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002790:	2305      	movs	r3, #5
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e00f      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <DFSDM_GetChannelFromInstance+0x90>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d102      	bne.n	80027a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800279e:	2306      	movs	r3, #6
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e008      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <DFSDM_GetChannelFromInstance+0x94>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80027ac:	2307      	movs	r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e001      	b.n	80027b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80027b2:	2303      	movs	r3, #3
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40016000 	.word	0x40016000
 80027c8:	40016020 	.word	0x40016020
 80027cc:	40016040 	.word	0x40016040
 80027d0:	40016080 	.word	0x40016080
 80027d4:	400160a0 	.word	0x400160a0
 80027d8:	400160c0 	.word	0x400160c0
 80027dc:	400160e0 	.word	0x400160e0

080027e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e098      	b.n	8002924 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_DMA_Init+0x150>)
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d80f      	bhi.n	800281e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_DMA_Init+0x154>)
 8002806:	4413      	add	r3, r2
 8002808:	4a4b      	ldr	r2, [pc, #300]	; (8002938 <HAL_DMA_Init+0x158>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	009a      	lsls	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a48      	ldr	r2, [pc, #288]	; (800293c <HAL_DMA_Init+0x15c>)
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
 800281c:	e00e      	b.n	800283c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_DMA_Init+0x160>)
 8002826:	4413      	add	r3, r2
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_DMA_Init+0x158>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a42      	ldr	r2, [pc, #264]	; (8002944 <HAL_DMA_Init+0x164>)
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002896:	d039      	beq.n	800290c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_DMA_Init+0x15c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11a      	bne.n	80028d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_DMA_Init+0x168>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f003 031c 	and.w	r3, r3, #28
 80028ae:	210f      	movs	r1, #15
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4924      	ldr	r1, [pc, #144]	; (8002948 <HAL_DMA_Init+0x168>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_DMA_Init+0x168>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f003 031c 	and.w	r3, r3, #28
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	491d      	ldr	r1, [pc, #116]	; (8002948 <HAL_DMA_Init+0x168>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
 80028d6:	e019      	b.n	800290c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_DMA_Init+0x16c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f003 031c 	and.w	r3, r3, #28
 80028e4:	210f      	movs	r1, #15
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4917      	ldr	r1, [pc, #92]	; (800294c <HAL_DMA_Init+0x16c>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_DMA_Init+0x16c>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	4911      	ldr	r1, [pc, #68]	; (800294c <HAL_DMA_Init+0x16c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40020407 	.word	0x40020407
 8002934:	bffdfff8 	.word	0xbffdfff8
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	40020000 	.word	0x40020000
 8002940:	bffdfbf8 	.word	0xbffdfbf8
 8002944:	40020400 	.word	0x40020400
 8002948:	400200a8 	.word	0x400200a8
 800294c:	400204a8 	.word	0x400204a8

08002950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Start_IT+0x20>
 800296c:	2302      	movs	r3, #2
 800296e:	e04b      	b.n	8002a08 <HAL_DMA_Start_IT+0xb8>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13a      	bne.n	80029fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8e0 	bl	8002b6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020e 	orr.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00f      	b.n	80029e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020a 	orr.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d026      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x7a>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f003 021c 	and.w	r2, r3, #28
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2104      	movs	r1, #4
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d071      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a88:	e06c      	b.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	2202      	movs	r2, #2
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d02e      	beq.n	8002afc <HAL_DMA_IRQHandler+0xec>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d029      	beq.n	8002afc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020a 	bic.w	r2, r2, #10
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f003 021c 	and.w	r2, r3, #28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2102      	movs	r1, #2
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d038      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002afa:	e033      	b.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f003 031c 	and.w	r3, r3, #28
 8002b04:	2208      	movs	r2, #8
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02a      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d025      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 020e 	bic.w	r2, r2, #14
 8002b28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f003 021c 	and.w	r2, r3, #28
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
}
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f003 021c 	and.w	r2, r3, #28
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d108      	bne.n	8002bb2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb0:	e007      	b.n	8002bc2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e17f      	b.n	8002ee0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8171 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_GPIO_Init+0x40>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d130      	bne.n	8002c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0201 	and.w	r2, r3, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d118      	bne.n	8002cb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ac 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <HAL_GPIO_Init+0x330>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <HAL_GPIO_Init+0x330>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_GPIO_Init+0x330>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_Init+0x242>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	; (8002f08 <HAL_GPIO_Init+0x338>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4e      	ldr	r2, [pc, #312]	; (8002f0c <HAL_GPIO_Init+0x33c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <HAL_GPIO_Init+0x340>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <HAL_GPIO_Init+0x344>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <HAL_GPIO_Init+0x348>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <HAL_GPIO_Init+0x34c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x22a>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e00c      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00a      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_GPIO_Init+0x334>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e56:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e80:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed4:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_GPIO_Init+0x350>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f47f ae78 	bne.w	8002be0 <HAL_GPIO_Init+0x10>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	48000400 	.word	0x48000400
 8002f0c:	48000800 	.word	0x48000800
 8002f10:	48000c00 	.word	0x48000c00
 8002f14:	48001000 	.word	0x48001000
 8002f18:	48001400 	.word	0x48001400
 8002f1c:	48001800 	.word	0x48001800
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f806 	bl	8002f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e08d      	b.n	80030c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fe fda7 	bl	8001b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2224      	movs	r2, #36	; 0x24
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003020:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d108      	bne.n	800303c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e007      	b.n	800304c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69d9      	ldr	r1, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d138      	bne.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e032      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b20      	cmp	r3, #32
 800317a:	d139      	bne.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003186:	2302      	movs	r3, #2
 8003188:	e033      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2224      	movs	r2, #36	; 0x24
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003200:	b08f      	sub	sp, #60	; 0x3c
 8003202:	af0a      	add	r7, sp, #40	; 0x28
 8003204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e116      	b.n	800343e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fe26 	bl	8001e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fdc6 	bl	8005de0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	687e      	ldr	r6, [r7, #4]
 800325c:	466d      	mov	r5, sp
 800325e:	f106 0410 	add.w	r4, r6, #16
 8003262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800326e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003272:	1d33      	adds	r3, r6, #4
 8003274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f002 fd86 	bl	8005d88 <USB_CoreInit>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0d7      	b.n	800343e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f002 fdb4 	bl	8005e02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e04a      	b.n	8003336 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	333d      	adds	r3, #61	; 0x3d
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	333c      	adds	r3, #60	; 0x3c
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	b298      	uxth	r0, r3
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3356      	adds	r3, #86	; 0x56
 80032dc:	4602      	mov	r2, r0
 80032de:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3340      	adds	r3, #64	; 0x40
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3344      	adds	r3, #68	; 0x44
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3348      	adds	r3, #72	; 0x48
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	; 0x4c
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	3301      	adds	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d3af      	bcc.n	80032a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e044      	b.n	80033d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	3301      	adds	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3b5      	bcc.n	8003346 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	687e      	ldr	r6, [r7, #4]
 80033e2:	466d      	mov	r5, sp
 80033e4:	f106 0410 	add.w	r4, r6, #16
 80033e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80033f8:	1d33      	adds	r3, r6, #4
 80033fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fc:	6838      	ldr	r0, [r7, #0]
 80033fe:	f002 fd4d 	bl	8005e9c <USB_DevInit>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e014      	b.n	800343e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b01      	cmp	r3, #1
 800342a:	d102      	bne.n	8003432 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f80a 	bl	8003446 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f002 feef 	bl	800621a <USB_DevDisconnect>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003446 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	f043 0303 	orr.w	r3, r3, #3
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000

080034b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40007000 	.word	0x40007000

080034cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d130      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d038      	beq.n	800355c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2232      	movs	r2, #50	; 0x32
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003510:	e002      	b.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3b01      	subs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d102      	bne.n	800352c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f2      	bne.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d110      	bne.n	800355c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00f      	b.n	800355e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d007      	beq.n	800355c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003554:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800355a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40007000 	.word	0x40007000
 8003570:	20000000 	.word	0x20000000
 8003574:	431bde83 	.word	0x431bde83

08003578 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_PWREx_EnableVddUSB+0x1c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003586:	6053      	str	r3, [r2, #4]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40007000 	.word	0x40007000

08003598 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7fe fed0 	bl	8002344 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e063      	b.n	8003678 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe fb03 	bl	8001bd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80035ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f858 	bl	8003684 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2120      	movs	r1, #32
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f850 	bl	80036a0 <QSPI_WaitFlagStateUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d131      	bne.n	800366e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6852      	ldr	r2, [r2, #4]
 800361c:	0611      	lsls	r1, r2, #24
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_QSPI_Init+0xe8>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	0411      	lsls	r1, r2, #16
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6952      	ldr	r2, [r2, #20]
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6992      	ldr	r2, [r2, #24]
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003676:	7afb      	ldrb	r3, [r7, #11]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	ffe0f8fe 	.word	0xffe0f8fe

08003684 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036b0:	e01a      	b.n	80036e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d016      	beq.n	80036e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fe fe43 	bl	8002344 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2204      	movs	r2, #4
 80036d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e00e      	b.n	8003706 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d1d6      	bne.n	80036b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e3ca      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003722:	4b97      	ldr	r3, [pc, #604]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372c:	4b94      	ldr	r3, [pc, #592]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80e4 	beq.w	800390c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_RCC_OscConfig+0x4a>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	f040 808b 	bne.w	8003868 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 8087 	bne.w	8003868 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e3a2      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	4b82      	ldr	r3, [pc, #520]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_RCC_OscConfig+0x7c>
 8003782:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378a:	e005      	b.n	8003798 <HAL_RCC_OscConfig+0x88>
 800378c:	4b7c      	ldr	r3, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003798:	4293      	cmp	r3, r2
 800379a:	d223      	bcs.n	80037e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd55 	bl	8004250 <RCC_SetFlashLatencyFromMSIRange>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e383      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b0:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	496d      	ldr	r1, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4968      	ldr	r1, [pc, #416]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
 80037e2:	e025      	b.n	8003830 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e4:	4b66      	ldr	r3, [pc, #408]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037ea:	f043 0308 	orr.w	r3, r3, #8
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4960      	ldr	r1, [pc, #384]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	495b      	ldr	r1, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fd15 	bl	8004250 <RCC_SetFlashLatencyFromMSIRange>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e343      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003830:	f000 fc4a 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4950      	ldr	r1, [pc, #320]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	4a4e      	ldr	r2, [pc, #312]	; (8003988 <HAL_RCC_OscConfig+0x278>)
 800384e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003850:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fd25 	bl	80022a4 <HAL_InitTick>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d052      	beq.n	800390a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	e327      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d032      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800387c:	f7fe fd62 	bl	8002344 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003884:	f7fe fd5e 	bl	8002344 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e310      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003896:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a36      	ldr	r2, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4931      	ldr	r1, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	492c      	ldr	r1, [pc, #176]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	e01a      	b.n	800390c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e2:	f7fe fd2f 	bl	8002344 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ea:	f7fe fd2b 	bl	8002344 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e2dd      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x1da>
 8003908:	e000      	b.n	800390c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d074      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x21a>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d10e      	bne.n	8003942 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d064      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d160      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e2ba      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x24a>
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e026      	b.n	80039a8 <HAL_RCC_OscConfig+0x298>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003962:	d115      	bne.n	8003990 <HAL_RCC_OscConfig+0x280>
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a02      	ldr	r2, [pc, #8]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e014      	b.n	80039a8 <HAL_RCC_OscConfig+0x298>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	0800b39c 	.word	0x0800b39c
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004
 8003990:	4ba0      	ldr	r3, [pc, #640]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a9f      	ldr	r2, [pc, #636]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b9d      	ldr	r3, [pc, #628]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a9c      	ldr	r2, [pc, #624]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fcc8 	bl	8002344 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fcc4 	bl	8002344 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e276      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ca:	4b92      	ldr	r3, [pc, #584]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2a8>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fcb4 	bl	8002344 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe fcb0 	bl	8002344 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e262      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d0>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d060      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_OscConfig+0x310>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d116      	bne.n	8003a4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a20:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x328>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e23f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a38:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	4973      	ldr	r1, [pc, #460]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4c:	e040      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d023      	beq.n	8003a9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a56:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6e      	ldr	r2, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fc6f 	bl	8002344 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fc6b 	bl	8002344 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e21d      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	495f      	ldr	r1, [pc, #380]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e018      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fc4b 	bl	8002344 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fc47 	bl	8002344 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1f9      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aea:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fc26 	bl	8002344 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fe fc22 	bl	8002344 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1d4      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <HAL_RCC_OscConfig+0x3ec>
 8003b1c:	e01b      	b.n	8003b56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fc09 	bl	8002344 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fc05 	bl	8002344 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1b7      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ef      	bne.n	8003b36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a6 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d118      	bne.n	8003bce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fbcc 	bl	8002344 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fe fbc8 	bl	8002344 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e17a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4d8>
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be6:	e029      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d115      	bne.n	8003c1c <HAL_RCC_OscConfig+0x50c>
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c10:	e014      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	4b9c      	ldr	r3, [pc, #624]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a9b      	ldr	r2, [pc, #620]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	4b98      	ldr	r3, [pc, #608]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a97      	ldr	r2, [pc, #604]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fe fb7e 	bl	8002344 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fb7a 	bl	8002344 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e12a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	4b8b      	ldr	r3, [pc, #556]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ed      	beq.n	8003c4c <HAL_RCC_OscConfig+0x53c>
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fe fb67 	bl	8002344 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe fb63 	bl	8002344 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e113      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ed      	bne.n	8003c7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a79      	ldr	r2, [pc, #484]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80fe 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	f040 80d0 	bne.w	8003e64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cc4:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d130      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d127      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d11f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d04:	2a07      	cmp	r2, #7
 8003d06:	bf14      	ite	ne
 8003d08:	2201      	movne	r2, #1
 8003d0a:	2200      	moveq	r2, #0
 8003d0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d06e      	beq.n	8003e18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d069      	beq.n	8003e14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0ad      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d68:	f7fe faec 	bl	8002344 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe fae8 	bl	8002344 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e09a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8e:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <HAL_RCC_OscConfig+0x784>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d9e:	3a01      	subs	r2, #1
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da8:	0212      	lsls	r2, r2, #8
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	3a01      	subs	r2, #1
 8003db4:	0552      	lsls	r2, r2, #21
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0652      	lsls	r2, r2, #25
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc8:	0912      	lsrs	r2, r2, #4
 8003dca:	0452      	lsls	r2, r2, #17
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4930      	ldr	r1, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dec:	f7fe faaa 	bl	8002344 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe faa6 	bl	8002344 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e058      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e12:	e050      	b.n	8003eb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e04f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d148      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e3c:	f7fe fa82 	bl	8002344 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fa7e 	bl	8002344 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e030      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x734>
 8003e62:	e028      	b.n	8003eb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d023      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_RCC_OscConfig+0x780>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fa65 	bl	8002344 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fa61 	bl	8002344 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d905      	bls.n	8003e98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e013      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
 8003e90:	40021000 	.word	0x40021000
 8003e94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RCC_OscConfig+0x7b0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ec      	bne.n	8003e7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCC_OscConfig+0x7b0>)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <HAL_RCC_OscConfig+0x7b0>)
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_OscConfig+0x7b4>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
 8003eb0:	e001      	b.n	8003eb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	feeefffc 	.word	0xfeeefffc

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0e7      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d910      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b72      	ldr	r3, [pc, #456]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 0207 	bic.w	r2, r3, #7
 8003ef2:	4970      	ldr	r1, [pc, #448]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b6e      	ldr	r3, [pc, #440]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0cf      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d908      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4960      	ldr	r1, [pc, #384]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d04c      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4e:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d121      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0a6      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	4b54      	ldr	r3, [pc, #336]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d115      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e09a      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7e:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08e      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e086      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b46      	ldr	r3, [pc, #280]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4943      	ldr	r1, [pc, #268]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fe f9c8 	bl	8002344 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fe f9c4 	bl	8002344 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e06e      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d208      	bcs.n	800400e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	492b      	ldr	r1, [pc, #172]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400e:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d210      	bcs.n	800403e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 0207 	bic.w	r2, r3, #7
 8004024:	4923      	ldr	r1, [pc, #140]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCC_ClockConfig+0x1ec>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d001      	beq.n	800403e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e036      	b.n	80040ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4918      	ldr	r1, [pc, #96]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4910      	ldr	r1, [pc, #64]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800407c:	f000 f824 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	490b      	ldr	r1, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1f4>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1f8>)
 800409a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1fc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe f8ff 	bl	80022a4 <HAL_InitTick>
 80040a6:	4603      	mov	r3, r0
 80040a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80040aa:	7afb      	ldrb	r3, [r7, #11]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800b39c 	.word	0x0800b39c
 80040c0:	20000000 	.word	0x20000000
 80040c4:	20000004 	.word	0x20000004

080040c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e0:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x34>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d121      	bne.n	800413a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d11e      	bne.n	800413a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	e005      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d102      	bne.n	8004146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e004      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d101      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_RCC_GetSysClockFreq+0x114>)
 800414e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d134      	bne.n	80041c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0xa6>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d003      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xac>
 800416c:	e005      	b.n	800417a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004170:	617b      	str	r3, [r7, #20]
      break;
 8004172:	e005      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004176:	617b      	str	r3, [r7, #20]
      break;
 8004178:	e002      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	617b      	str	r3, [r7, #20]
      break;
 800417e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	3301      	adds	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	fb03 f202 	mul.w	r2, r3, r2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	0e5b      	lsrs	r3, r3, #25
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	3301      	adds	r3, #1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c0:	69bb      	ldr	r3, [r7, #24]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800b3b4 	.word	0x0800b3b4
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200

080041e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041fc:	f7ff fff0 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	0800b3ac 	.word	0x0800b3ac

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004228:	f7ff ffda 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCC_GetPCLK2Freq+0x28>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800b3ac 	.word	0x0800b3ac

08004250 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7ff f922 	bl	80034b0 <HAL_PWREx_GetVoltageRange>
 800426c:	6178      	str	r0, [r7, #20]
 800426e:	e014      	b.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6593      	str	r3, [r2, #88]	; 0x58
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004288:	f7ff f912 	bl	80034b0 <HAL_PWREx_GetVoltageRange>
 800428c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d10b      	bne.n	80042ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d919      	bls.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2ba0      	cmp	r3, #160	; 0xa0
 80042ac:	d902      	bls.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ae:	2302      	movs	r3, #2
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e013      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b4:	2301      	movs	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	e010      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d902      	bls.n	80042c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c0:	2303      	movs	r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	e00a      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d102      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042cc:	2302      	movs	r3, #2
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e004      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b70      	cmp	r3, #112	; 0x70
 80042d6:	d101      	bne.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 0207 	bic.w	r2, r3, #7
 80042e4:	4909      	ldr	r1, [pc, #36]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	40022000 	.word	0x40022000

08004310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004318:	2300      	movs	r3, #0
 800431a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800431c:	2300      	movs	r3, #0
 800431e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d041      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004330:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004334:	d02a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004336:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800433a:	d824      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800433c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004346:	d81e      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d010      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004352:	e018      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004354:	4b86      	ldr	r3, [pc, #536]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a85      	ldr	r2, [pc, #532]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004360:	e015      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 facb 	bl	8004904 <RCCEx_PLLSAI1_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004372:	e00c      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3320      	adds	r3, #32
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fbb6 	bl	8004aec <RCCEx_PLLSAI2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	74fb      	strb	r3, [r7, #19]
      break;
 800438a:	e000      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800438c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004394:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a2:	4973      	ldr	r1, [pc, #460]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043aa:	e001      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d041      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043c4:	d02a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043ca:	d824      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d6:	d81e      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	d010      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043e2:	e018      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e4:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a61      	ldr	r2, [pc, #388]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043f0:	e015      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fa83 	bl	8004904 <RCCEx_PLLSAI1_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004402:	e00c      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3320      	adds	r3, #32
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fb6e 	bl	8004aec <RCCEx_PLLSAI2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	74fb      	strb	r3, [r7, #19]
      break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004424:	4b52      	ldr	r3, [pc, #328]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004432:	494f      	ldr	r1, [pc, #316]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800443a:	e001      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80a0 	beq.w	800458e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	4a40      	ldr	r2, [pc, #256]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004484:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004490:	f7fd ff58 	bl	8002344 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004496:	e009      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004498:	f7fd ff54 	bl	8002344 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d902      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	74fb      	strb	r3, [r7, #19]
        break;
 80044aa:	e005      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ac:	4b31      	ldr	r3, [pc, #196]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d15c      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044be:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d019      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004508:	4a19      	ldr	r2, [pc, #100]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fd ff13 	bl	8002344 <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004520:	e00b      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd ff0f 	bl	8002344 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d902      	bls.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	74fb      	strb	r3, [r7, #19]
            break;
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ec      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455e:	4904      	ldr	r1, [pc, #16]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004566:	e009      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457c:	7c7b      	ldrb	r3, [r7, #17]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4b9e      	ldr	r3, [pc, #632]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	4a9d      	ldr	r2, [pc, #628]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800459a:	4b98      	ldr	r3, [pc, #608]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f023 0203 	bic.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	4994      	ldr	r1, [pc, #592]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045bc:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f023 020c 	bic.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	498c      	ldr	r1, [pc, #560]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045de:	4b87      	ldr	r3, [pc, #540]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	4983      	ldr	r1, [pc, #524]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004600:	4b7e      	ldr	r3, [pc, #504]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	497b      	ldr	r1, [pc, #492]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004622:	4b76      	ldr	r3, [pc, #472]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	4972      	ldr	r1, [pc, #456]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004644:	4b6d      	ldr	r3, [pc, #436]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	496a      	ldr	r1, [pc, #424]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004666:	4b65      	ldr	r3, [pc, #404]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	4961      	ldr	r1, [pc, #388]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004688:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004696:	4959      	ldr	r1, [pc, #356]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046aa:	4b54      	ldr	r3, [pc, #336]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	4950      	ldr	r1, [pc, #320]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046cc:	4b4b      	ldr	r3, [pc, #300]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	4948      	ldr	r1, [pc, #288]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ee:	4b43      	ldr	r3, [pc, #268]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	493f      	ldr	r1, [pc, #252]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d028      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471e:	4937      	ldr	r1, [pc, #220]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472e:	d106      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b32      	ldr	r3, [pc, #200]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a31      	ldr	r2, [pc, #196]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
 800473c:	e011      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004742:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004746:	d10c      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f8d8 	bl	8004904 <RCCEx_PLLSAI1_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d028      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	491f      	ldr	r1, [pc, #124]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478c:	d106      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004798:	60d3      	str	r3, [r2, #12]
 800479a:	e011      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f8a9 	bl	8004904 <RCCEx_PLLSAI1_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02b      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ea:	d109      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a02      	ldr	r2, [pc, #8]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	e014      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	2101      	movs	r1, #1
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f877 	bl	8004904 <RCCEx_PLLSAI1_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02f      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483e:	4928      	ldr	r1, [pc, #160]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484e:	d10d      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f854 	bl	8004904 <RCCEx_PLLSAI1_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d014      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	74bb      	strb	r3, [r7, #18]
 800486a:	e011      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004874:	d10c      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3320      	adds	r3, #32
 800487a:	2102      	movs	r1, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f935 	bl	8004aec <RCCEx_PLLSAI2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ce:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000

080048e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000

08004904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004912:	4b75      	ldr	r3, [pc, #468]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d018      	beq.n	8004950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491e:	4b72      	ldr	r3, [pc, #456]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0203 	and.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d10d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
       ||
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004936:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
       ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d047      	beq.n	80049da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e044      	b.n	80049da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d018      	beq.n	800498a <RCCEx_PLLSAI1_Config+0x86>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d825      	bhi.n	80049a8 <RCCEx_PLLSAI1_Config+0xa4>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d002      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x62>
 8004960:	2b02      	cmp	r3, #2
 8004962:	d009      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x74>
 8004964:	e020      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004966:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11d      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004976:	e01a      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004978:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004988:	e013      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498a:	4b57      	ldr	r3, [pc, #348]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004996:	4b54      	ldr	r3, [pc, #336]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a6:	e006      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e004      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	430b      	orrs	r3, r1
 80049d4:	4944      	ldr	r1, [pc, #272]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d17d      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ec:	f7fd fcaa 	bl	8002344 <HAL_GetTick>
 80049f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f2:	e009      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f4:	f7fd fca6 	bl	8002344 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d902      	bls.n	8004a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	73fb      	strb	r3, [r7, #15]
        break;
 8004a06:	e005      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a08:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ef      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d160      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d111      	bne.n	8004a44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a20:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	0211      	lsls	r1, r2, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68d2      	ldr	r2, [r2, #12]
 8004a36:	0912      	lsrs	r2, r2, #4
 8004a38:	0452      	lsls	r2, r2, #17
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	492a      	ldr	r1, [pc, #168]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
 8004a42:	e027      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d112      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	0211      	lsls	r1, r2, #8
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6912      	ldr	r2, [r2, #16]
 8004a60:	0852      	lsrs	r2, r2, #1
 8004a62:	3a01      	subs	r2, #1
 8004a64:	0552      	lsls	r2, r2, #21
 8004a66:	430a      	orrs	r2, r1
 8004a68:	491f      	ldr	r1, [pc, #124]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
 8004a6e:	e011      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6952      	ldr	r2, [r2, #20]
 8004a86:	0852      	lsrs	r2, r2, #1
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0652      	lsls	r2, r2, #25
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fd fc50 	bl	8002344 <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa6:	e009      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa8:	f7fd fc4c 	bl	8002344 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aba:	e005      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ef      	beq.n	8004aa8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000

08004aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004afa:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d018      	beq.n	8004b38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0203 	and.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d10d      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
       ||
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b1e:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d047      	beq.n	8004bc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	e044      	b.n	8004bc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d018      	beq.n	8004b72 <RCCEx_PLLSAI2_Config+0x86>
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d825      	bhi.n	8004b90 <RCCEx_PLLSAI2_Config+0xa4>
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d002      	beq.n	8004b4e <RCCEx_PLLSAI2_Config+0x62>
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d009      	beq.n	8004b60 <RCCEx_PLLSAI2_Config+0x74>
 8004b4c:	e020      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b4e:	4b55      	ldr	r3, [pc, #340]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5e:	e01a      	b.n	8004b96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e013      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b72:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b7e:	4b49      	ldr	r3, [pc, #292]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b8e:	e006      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e004      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10d      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	4939      	ldr	r1, [pc, #228]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d167      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd4:	f7fd fbb6 	bl	8002344 <HAL_GetTick>
 8004bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bda:	e009      	b.n	8004bf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bdc:	f7fd fbb2 	bl	8002344 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d902      	bls.n	8004bf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	73fb      	strb	r3, [r7, #15]
        break;
 8004bee:	e005      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ef      	bne.n	8004bdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d14a      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c08:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6892      	ldr	r2, [r2, #8]
 8004c18:	0211      	lsls	r1, r2, #8
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68d2      	ldr	r2, [r2, #12]
 8004c1e:	0912      	lsrs	r2, r2, #4
 8004c20:	0452      	lsls	r2, r2, #17
 8004c22:	430a      	orrs	r2, r1
 8004c24:	491f      	ldr	r1, [pc, #124]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	614b      	str	r3, [r1, #20]
 8004c2a:	e011      	b.n	8004c50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6892      	ldr	r2, [r2, #8]
 8004c3c:	0211      	lsls	r1, r2, #8
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6912      	ldr	r2, [r2, #16]
 8004c42:	0852      	lsrs	r2, r2, #1
 8004c44:	3a01      	subs	r2, #1
 8004c46:	0652      	lsls	r2, r2, #25
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fb72 	bl	8002344 <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c62:	e009      	b.n	8004c78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c64:	f7fd fb6e 	bl	8002344 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	73fb      	strb	r3, [r7, #15]
          break;
 8004c76:	e005      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ef      	beq.n	8004c64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e095      	b.n	8004de6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc ffac 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d20:	d902      	bls.n	8004d28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e002      	b.n	8004d2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 0204 	and.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e040      	b.n	8004e82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc ff65 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	; 0x24
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fbd7 	bl	80055e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f91c 	bl	8005078 <UART_SetConfig>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01b      	b.n	8004e82 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fc56 	bl	800572c <UART_CheckIdleState>
 8004e80:	4603      	mov	r3, r0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b08a      	sub	sp, #40	; 0x28
 8004e8e:	af02      	add	r7, sp, #8
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d178      	bne.n	8004f94 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_Transmit+0x24>
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e071      	b.n	8004f96 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2221      	movs	r2, #33	; 0x21
 8004ebe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ec0:	f7fd fa40 	bl	8002344 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	d108      	bne.n	8004ef2 <HAL_UART_Transmit+0x68>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e003      	b.n	8004efa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004efa:	e030      	b.n	8004f5e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fcb8 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e03c      	b.n	8004f96 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	3302      	adds	r3, #2
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	e008      	b.n	8004f4c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	b292      	uxth	r2, r2
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1c8      	bne.n	8004efc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fc81 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e005      	b.n	8004f96 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d137      	bne.n	8005028 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_UART_Receive_DMA+0x24>
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e030      	b.n	800502a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_UART_Receive_DMA+0x94>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01f      	beq.n	8005018 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	61bb      	str	r3, [r7, #24]
   return(result);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	461a      	mov	r2, r3
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fc94 	bl	800594c <UART_Start_Receive_DMA>
 8005024:	4603      	mov	r3, r0
 8005026:	e000      	b.n	800502a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40008000 	.word	0x40008000

08005038 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800507c:	b08a      	sub	sp, #40	; 0x28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	4313      	orrs	r3, r2
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4ba4      	ldr	r3, [pc, #656]	; (8005338 <UART_SetConfig+0x2c0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a99      	ldr	r2, [pc, #612]	; (800533c <UART_SetConfig+0x2c4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	4313      	orrs	r3, r2
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a90      	ldr	r2, [pc, #576]	; (8005340 <UART_SetConfig+0x2c8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d126      	bne.n	8005150 <UART_SetConfig+0xd8>
 8005102:	4b90      	ldr	r3, [pc, #576]	; (8005344 <UART_SetConfig+0x2cc>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b03      	cmp	r3, #3
 800510e:	d81b      	bhi.n	8005148 <UART_SetConfig+0xd0>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0xa0>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005129 	.word	0x08005129
 800511c:	08005139 	.word	0x08005139
 8005120:	08005131 	.word	0x08005131
 8005124:	08005141 	.word	0x08005141
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512e:	e116      	b.n	800535e <UART_SetConfig+0x2e6>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e112      	b.n	800535e <UART_SetConfig+0x2e6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e10e      	b.n	800535e <UART_SetConfig+0x2e6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e10a      	b.n	800535e <UART_SetConfig+0x2e6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e106      	b.n	800535e <UART_SetConfig+0x2e6>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7c      	ldr	r2, [pc, #496]	; (8005348 <UART_SetConfig+0x2d0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d138      	bne.n	80051cc <UART_SetConfig+0x154>
 800515a:	4b7a      	ldr	r3, [pc, #488]	; (8005344 <UART_SetConfig+0x2cc>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d82d      	bhi.n	80051c4 <UART_SetConfig+0x14c>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0xf8>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051aa:	e0d8      	b.n	800535e <UART_SetConfig+0x2e6>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e0d4      	b.n	800535e <UART_SetConfig+0x2e6>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e0d0      	b.n	800535e <UART_SetConfig+0x2e6>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e0cc      	b.n	800535e <UART_SetConfig+0x2e6>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e0c8      	b.n	800535e <UART_SetConfig+0x2e6>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5e      	ldr	r2, [pc, #376]	; (800534c <UART_SetConfig+0x2d4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d125      	bne.n	8005222 <UART_SetConfig+0x1aa>
 80051d6:	4b5b      	ldr	r3, [pc, #364]	; (8005344 <UART_SetConfig+0x2cc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051e0:	2b30      	cmp	r3, #48	; 0x30
 80051e2:	d016      	beq.n	8005212 <UART_SetConfig+0x19a>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d818      	bhi.n	800521a <UART_SetConfig+0x1a2>
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d00a      	beq.n	8005202 <UART_SetConfig+0x18a>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d814      	bhi.n	800521a <UART_SetConfig+0x1a2>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <UART_SetConfig+0x182>
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d008      	beq.n	800520a <UART_SetConfig+0x192>
 80051f8:	e00f      	b.n	800521a <UART_SetConfig+0x1a2>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005200:	e0ad      	b.n	800535e <UART_SetConfig+0x2e6>
 8005202:	2302      	movs	r3, #2
 8005204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005208:	e0a9      	b.n	800535e <UART_SetConfig+0x2e6>
 800520a:	2304      	movs	r3, #4
 800520c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005210:	e0a5      	b.n	800535e <UART_SetConfig+0x2e6>
 8005212:	2308      	movs	r3, #8
 8005214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005218:	e0a1      	b.n	800535e <UART_SetConfig+0x2e6>
 800521a:	2310      	movs	r3, #16
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005220:	e09d      	b.n	800535e <UART_SetConfig+0x2e6>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <UART_SetConfig+0x2d8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d125      	bne.n	8005278 <UART_SetConfig+0x200>
 800522c:	4b45      	ldr	r3, [pc, #276]	; (8005344 <UART_SetConfig+0x2cc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005236:	2bc0      	cmp	r3, #192	; 0xc0
 8005238:	d016      	beq.n	8005268 <UART_SetConfig+0x1f0>
 800523a:	2bc0      	cmp	r3, #192	; 0xc0
 800523c:	d818      	bhi.n	8005270 <UART_SetConfig+0x1f8>
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d00a      	beq.n	8005258 <UART_SetConfig+0x1e0>
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d814      	bhi.n	8005270 <UART_SetConfig+0x1f8>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <UART_SetConfig+0x1d8>
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x1e8>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x1f8>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005256:	e082      	b.n	800535e <UART_SetConfig+0x2e6>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525e:	e07e      	b.n	800535e <UART_SetConfig+0x2e6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005266:	e07a      	b.n	800535e <UART_SetConfig+0x2e6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e076      	b.n	800535e <UART_SetConfig+0x2e6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e072      	b.n	800535e <UART_SetConfig+0x2e6>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a35      	ldr	r2, [pc, #212]	; (8005354 <UART_SetConfig+0x2dc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d12a      	bne.n	80052d8 <UART_SetConfig+0x260>
 8005282:	4b30      	ldr	r3, [pc, #192]	; (8005344 <UART_SetConfig+0x2cc>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005290:	d01a      	beq.n	80052c8 <UART_SetConfig+0x250>
 8005292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005296:	d81b      	bhi.n	80052d0 <UART_SetConfig+0x258>
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	d00c      	beq.n	80052b8 <UART_SetConfig+0x240>
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d815      	bhi.n	80052d0 <UART_SetConfig+0x258>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <UART_SetConfig+0x238>
 80052a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ac:	d008      	beq.n	80052c0 <UART_SetConfig+0x248>
 80052ae:	e00f      	b.n	80052d0 <UART_SetConfig+0x258>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b6:	e052      	b.n	800535e <UART_SetConfig+0x2e6>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052be:	e04e      	b.n	800535e <UART_SetConfig+0x2e6>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e04a      	b.n	800535e <UART_SetConfig+0x2e6>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e046      	b.n	800535e <UART_SetConfig+0x2e6>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e042      	b.n	800535e <UART_SetConfig+0x2e6>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a17      	ldr	r2, [pc, #92]	; (800533c <UART_SetConfig+0x2c4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d13a      	bne.n	8005358 <UART_SetConfig+0x2e0>
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <UART_SetConfig+0x2cc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f0:	d01a      	beq.n	8005328 <UART_SetConfig+0x2b0>
 80052f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f6:	d81b      	bhi.n	8005330 <UART_SetConfig+0x2b8>
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d00c      	beq.n	8005318 <UART_SetConfig+0x2a0>
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d815      	bhi.n	8005330 <UART_SetConfig+0x2b8>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <UART_SetConfig+0x298>
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d008      	beq.n	8005320 <UART_SetConfig+0x2a8>
 800530e:	e00f      	b.n	8005330 <UART_SetConfig+0x2b8>
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e022      	b.n	800535e <UART_SetConfig+0x2e6>
 8005318:	2302      	movs	r3, #2
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e01e      	b.n	800535e <UART_SetConfig+0x2e6>
 8005320:	2304      	movs	r3, #4
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e01a      	b.n	800535e <UART_SetConfig+0x2e6>
 8005328:	2308      	movs	r3, #8
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e016      	b.n	800535e <UART_SetConfig+0x2e6>
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x2e6>
 8005338:	efff69f3 	.word	0xefff69f3
 800533c:	40008000 	.word	0x40008000
 8005340:	40013800 	.word	0x40013800
 8005344:	40021000 	.word	0x40021000
 8005348:	40004400 	.word	0x40004400
 800534c:	40004800 	.word	0x40004800
 8005350:	40004c00 	.word	0x40004c00
 8005354:	40005000 	.word	0x40005000
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a9f      	ldr	r2, [pc, #636]	; (80055e0 <UART_SetConfig+0x568>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d17a      	bne.n	800545e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800536c:	2b08      	cmp	r3, #8
 800536e:	d824      	bhi.n	80053ba <UART_SetConfig+0x342>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x300>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053ab 	.word	0x080053ab
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053bb 	.word	0x080053bb
 8005398:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe ff2c 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 80053a0:	61f8      	str	r0, [r7, #28]
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b8f      	ldr	r3, [pc, #572]	; (80055e4 <UART_SetConfig+0x56c>)
 80053a6:	61fb      	str	r3, [r7, #28]
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fe fe8d 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 80053ae:	61f8      	str	r0, [r7, #28]
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	61fb      	str	r3, [r7, #28]
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80fb 	beq.w	80055c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d305      	bcc.n	80053ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d903      	bls.n	80053f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053f0:	e0e8      	b.n	80055c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2200      	movs	r2, #0
 80053f6:	461c      	mov	r4, r3
 80053f8:	4615      	mov	r5, r2
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	022b      	lsls	r3, r5, #8
 8005404:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005408:	0222      	lsls	r2, r4, #8
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6849      	ldr	r1, [r1, #4]
 800540e:	0849      	lsrs	r1, r1, #1
 8005410:	2000      	movs	r0, #0
 8005412:	4688      	mov	r8, r1
 8005414:	4681      	mov	r9, r0
 8005416:	eb12 0a08 	adds.w	sl, r2, r8
 800541a:	eb43 0b09 	adc.w	fp, r3, r9
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800542c:	4650      	mov	r0, sl
 800542e:	4659      	mov	r1, fp
 8005430:	f7fb fc2a 	bl	8000c88 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d308      	bcc.n	8005456 <UART_SetConfig+0x3de>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544a:	d204      	bcs.n	8005456 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	e0b6      	b.n	80055c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800545c:	e0b2      	b.n	80055c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005466:	d15e      	bne.n	8005526 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800546c:	2b08      	cmp	r3, #8
 800546e:	d828      	bhi.n	80054c2 <UART_SetConfig+0x44a>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x400>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054c3 	.word	0x080054c3
 8005488:	080054b3 	.word	0x080054b3
 800548c:	080054c3 	.word	0x080054c3
 8005490:	080054c3 	.word	0x080054c3
 8005494:	080054c3 	.word	0x080054c3
 8005498:	080054bb 	.word	0x080054bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fe feac 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 80054a0:	61f8      	str	r0, [r7, #28]
        break;
 80054a2:	e014      	b.n	80054ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe febe 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 80054a8:	61f8      	str	r0, [r7, #28]
        break;
 80054aa:	e010      	b.n	80054ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ac:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <UART_SetConfig+0x56c>)
 80054ae:	61fb      	str	r3, [r7, #28]
        break;
 80054b0:	e00d      	b.n	80054ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b2:	f7fe fe09 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 80054b6:	61f8      	str	r0, [r7, #28]
        break;
 80054b8:	e009      	b.n	80054ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054be:	61fb      	str	r3, [r7, #28]
        break;
 80054c0:	e005      	b.n	80054ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d077      	beq.n	80055c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005a      	lsls	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d916      	bls.n	800551e <UART_SetConfig+0x4a6>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f6:	d212      	bcs.n	800551e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f023 030f 	bic.w	r3, r3, #15
 8005500:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	b29b      	uxth	r3, r3
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	b29a      	uxth	r2, r3
 800550e:	8afb      	ldrh	r3, [r7, #22]
 8005510:	4313      	orrs	r3, r2
 8005512:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	8afa      	ldrh	r2, [r7, #22]
 800551a:	60da      	str	r2, [r3, #12]
 800551c:	e052      	b.n	80055c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005524:	e04e      	b.n	80055c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800552a:	2b08      	cmp	r3, #8
 800552c:	d827      	bhi.n	800557e <UART_SetConfig+0x506>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x4bc>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe fe4e 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 800555c:	61f8      	str	r0, [r7, #28]
        break;
 800555e:	e014      	b.n	800558a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe fe60 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8005564:	61f8      	str	r0, [r7, #28]
        break;
 8005566:	e010      	b.n	800558a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <UART_SetConfig+0x56c>)
 800556a:	61fb      	str	r3, [r7, #28]
        break;
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fe fdab 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8005572:	61f8      	str	r0, [r7, #28]
        break;
 8005574:	e009      	b.n	800558a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61fb      	str	r3, [r7, #28]
        break;
 800557c:	e005      	b.n	800558a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005588:	bf00      	nop
    }

    if (pclk != 0U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d019      	beq.n	80055c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	085a      	lsrs	r2, r3, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	441a      	add	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d909      	bls.n	80055be <UART_SetConfig+0x546>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d205      	bcs.n	80055be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e002      	b.n	80055c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055de:	bf00      	nop
 80055e0:	40008000 	.word	0x40008000
 80055e4:	00f42400 	.word	0x00f42400

080055e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01a      	beq.n	80056fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d10a      	bne.n	80056fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b098      	sub	sp, #96	; 0x60
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800573c:	f7fc fe02 	bl	8002344 <HAL_GetTick>
 8005740:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d12e      	bne.n	80057ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f88c 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d021      	beq.n	80057ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577e:	653b      	str	r3, [r7, #80]	; 0x50
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
 800578a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e062      	b.n	8005874 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d149      	bne.n	8005850 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f856 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d03c      	beq.n	8005850 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	623b      	str	r3, [r7, #32]
   return(result);
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30
 80057f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	60fb      	str	r3, [r7, #12]
   return(result);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	617b      	str	r3, [r7, #20]
   return(result);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e011      	b.n	8005874 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3758      	adds	r7, #88	; 0x58
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588c:	e049      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d045      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fc fd55 	bl	8002344 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <UART_WaitOnFlagUntilTimeout+0x30>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e048      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d031      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d110      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2208      	movs	r2, #8
 80058d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f8ff 	bl	8005ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2208      	movs	r2, #8
 80058de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e029      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d111      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8e5 	bl	8005ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e00f      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d0a6      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b096      	sub	sp, #88	; 0x58
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2222      	movs	r2, #34	; 0x22
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597c:	2b00      	cmp	r3, #0
 800597e:	d028      	beq.n	80059d2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005984:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <UART_Start_Receive_DMA+0x134>)
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	4a3d      	ldr	r2, [pc, #244]	; (8005a84 <UART_Start_Receive_DMA+0x138>)
 800598e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005994:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <UART_Start_Receive_DMA+0x13c>)
 8005996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	2200      	movs	r2, #0
 800599e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	4619      	mov	r1, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	461a      	mov	r2, r3
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	f7fc ffcc 	bl	8002950 <HAL_DMA_Start_IT>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2210      	movs	r2, #16
 80059c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e051      	b.n	8005a76 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80059fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a2c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a60:	623a      	str	r2, [r7, #32]
 8005a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69f9      	ldr	r1, [r7, #28]
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3758      	adds	r7, #88	; 0x58
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	08005ba1 	.word	0x08005ba1
 8005a84:	08005ccd 	.word	0x08005ccd
 8005a88:	08005d0b 	.word	0x08005d0b

08005a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6979      	ldr	r1, [r7, #20]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005acc:	bf00      	nop
 8005ace:	3724      	adds	r7, #36	; 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b095      	sub	sp, #84	; 0x54
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
 8005b00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e5      	bne.n	8005b12 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d118      	bne.n	8005b80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	647b      	str	r3, [r7, #68]	; 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b94:	bf00      	nop
 8005b96:	3754      	adds	r7, #84	; 0x54
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b09c      	sub	sp, #112	; 0x70
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d171      	bne.n	8005ca0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c16:	647a      	str	r2, [r7, #68]	; 0x44
 8005c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c40:	663b      	str	r3, [r7, #96]	; 0x60
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d118      	bne.n	8005ca0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0310 	bic.w	r3, r3, #16
 8005c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e6      	bne.n	8005c6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d107      	bne.n	8005cbe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cb8:	f7ff f9d2 	bl	8005060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cbc:	e002      	b.n	8005cc4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005cbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cc0:	f7fb fd54 	bl	800176c <HAL_UART_RxCpltCallback>
}
 8005cc4:	bf00      	nop
 8005cc6:	3770      	adds	r7, #112	; 0x70
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d109      	bne.n	8005cfc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff f9b3 	bl	8005060 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cfa:	e002      	b.n	8005d02 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff f99b 	bl	8005038 <HAL_UART_RxHalfCpltCallback>
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d109      	bne.n	8005d48 <UART_DMAError+0x3e>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b21      	cmp	r3, #33	; 0x21
 8005d38:	d106      	bne.n	8005d48 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f7ff fea2 	bl	8005a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d109      	bne.n	8005d6a <UART_DMAError+0x60>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b22      	cmp	r3, #34	; 0x22
 8005d5a:	d106      	bne.n	8005d6a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005d64:	6978      	ldr	r0, [r7, #20]
 8005d66:	f7ff feb7 	bl	8005ad8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d70:	f043 0210 	orr.w	r2, r3, #16
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7a:	6978      	ldr	r0, [r7, #20]
 8005d7c:	f7ff f966 	bl	800504c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d80:	bf00      	nop
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d88:	b084      	sub	sp, #16
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	f107 001c 	add.w	r0, r7, #28
 8005d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa66 	bl	8006278 <USB_CoreReset>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc2:	e005      	b.n	8005dd0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ddc:	b004      	add	sp, #16
 8005dde:	4770      	bx	lr

08005de0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f023 0201 	bic.w	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d115      	bne.n	8005e50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f7fc fa93 	bl	800235c <HAL_Delay>
      ms++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fa0d 	bl	800625c <USB_GetMode>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d01e      	beq.n	8005e86 <USB_SetCurrentMode+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b31      	cmp	r3, #49	; 0x31
 8005e4c:	d9f0      	bls.n	8005e30 <USB_SetCurrentMode+0x2e>
 8005e4e:	e01a      	b.n	8005e86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d115      	bne.n	8005e82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7fc fa7a 	bl	800235c <HAL_Delay>
      ms++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9f4 	bl	800625c <USB_GetMode>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <USB_SetCurrentMode+0x84>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b31      	cmp	r3, #49	; 0x31
 8005e7e:	d9f0      	bls.n	8005e62 <USB_SetCurrentMode+0x60>
 8005e80:	e001      	b.n	8005e86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e005      	b.n	8005e92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b32      	cmp	r3, #50	; 0x32
 8005e8a:	d101      	bne.n	8005e90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	e009      	b.n	8005ed0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3340      	adds	r3, #64	; 0x40
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0e      	cmp	r3, #14
 8005ed4:	d9f2      	bls.n	8005ebc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d11c      	bne.n	8005f16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eea:	f043 0302 	orr.w	r3, r3, #2
 8005eee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e005      	b.n	8005f22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f2e:	2103      	movs	r1, #3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f959 	bl	80061e8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f36:	2110      	movs	r1, #16
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8f1 	bl	8006120 <USB_FlushTxFifo>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f91d 	bl	8006188 <USB_FlushRxFifo>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	461a      	mov	r2, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e043      	b.n	800600a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f98:	d118      	bne.n	8005fcc <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	e013      	b.n	8005fde <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e008      	b.n	8005fde <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	461a      	mov	r2, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3301      	adds	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3b7      	bcc.n	8005f82 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e043      	b.n	80060a0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800602a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602e:	d118      	bne.n	8006062 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10a      	bne.n	800604c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e013      	b.n	8006074 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	461a      	mov	r2, r3
 800605a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e008      	b.n	8006074 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	461a      	mov	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	461a      	mov	r2, r3
 8006094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006098:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3301      	adds	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3b7      	bcc.n	8006018 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f043 0210 	orr.w	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <USB_DevInit+0x280>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f043 0208 	orr.w	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006102:	f043 0304 	orr.w	r3, r3, #4
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006116:	b004      	add	sp, #16
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	803c3800 	.word	0x803c3800

08006120 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <USB_FlushTxFifo+0x64>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e01b      	b.n	8006178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	daf2      	bge.n	800612e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	019b      	lsls	r3, r3, #6
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <USB_FlushTxFifo+0x64>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e006      	b.n	8006178 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d0f0      	beq.n	8006158 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	00030d40 	.word	0x00030d40

08006188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <USB_FlushRxFifo+0x5c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e018      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	daf2      	bge.n	8006194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2210      	movs	r2, #16
 80061b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <USB_FlushRxFifo+0x5c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e006      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d0f0      	beq.n	80061b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	00030d40 	.word	0x00030d40

080061e8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f003 0301 	and.w	r3, r3, #1
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <USB_CoreReset+0x64>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e01b      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	daf2      	bge.n	8006284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <USB_CoreReset+0x64>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e006      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d0f0      	beq.n	80062ae <USB_CoreReset+0x36>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	00030d40 	.word	0x00030d40

080062e0 <__cvt>:
 80062e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	ec55 4b10 	vmov	r4, r5, d0
 80062e8:	2d00      	cmp	r5, #0
 80062ea:	460e      	mov	r6, r1
 80062ec:	4619      	mov	r1, r3
 80062ee:	462b      	mov	r3, r5
 80062f0:	bfbb      	ittet	lt
 80062f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062f6:	461d      	movlt	r5, r3
 80062f8:	2300      	movge	r3, #0
 80062fa:	232d      	movlt	r3, #45	; 0x2d
 80062fc:	700b      	strb	r3, [r1, #0]
 80062fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006300:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006304:	4691      	mov	r9, r2
 8006306:	f023 0820 	bic.w	r8, r3, #32
 800630a:	bfbc      	itt	lt
 800630c:	4622      	movlt	r2, r4
 800630e:	4614      	movlt	r4, r2
 8006310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006314:	d005      	beq.n	8006322 <__cvt+0x42>
 8006316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800631a:	d100      	bne.n	800631e <__cvt+0x3e>
 800631c:	3601      	adds	r6, #1
 800631e:	2102      	movs	r1, #2
 8006320:	e000      	b.n	8006324 <__cvt+0x44>
 8006322:	2103      	movs	r1, #3
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	ab02      	add	r3, sp, #8
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	ec45 4b10 	vmov	d0, r4, r5
 8006330:	4653      	mov	r3, sl
 8006332:	4632      	mov	r2, r6
 8006334:	f001 f8b8 	bl	80074a8 <_dtoa_r>
 8006338:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800633c:	4607      	mov	r7, r0
 800633e:	d102      	bne.n	8006346 <__cvt+0x66>
 8006340:	f019 0f01 	tst.w	r9, #1
 8006344:	d022      	beq.n	800638c <__cvt+0xac>
 8006346:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800634a:	eb07 0906 	add.w	r9, r7, r6
 800634e:	d110      	bne.n	8006372 <__cvt+0x92>
 8006350:	783b      	ldrb	r3, [r7, #0]
 8006352:	2b30      	cmp	r3, #48	; 0x30
 8006354:	d10a      	bne.n	800636c <__cvt+0x8c>
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7fa fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006362:	b918      	cbnz	r0, 800636c <__cvt+0x8c>
 8006364:	f1c6 0601 	rsb	r6, r6, #1
 8006368:	f8ca 6000 	str.w	r6, [sl]
 800636c:	f8da 3000 	ldr.w	r3, [sl]
 8006370:	4499      	add	r9, r3
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800637e:	b108      	cbz	r0, 8006384 <__cvt+0xa4>
 8006380:	f8cd 900c 	str.w	r9, [sp, #12]
 8006384:	2230      	movs	r2, #48	; 0x30
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	454b      	cmp	r3, r9
 800638a:	d307      	bcc.n	800639c <__cvt+0xbc>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006390:	1bdb      	subs	r3, r3, r7
 8006392:	4638      	mov	r0, r7
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	b004      	add	sp, #16
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	1c59      	adds	r1, r3, #1
 800639e:	9103      	str	r1, [sp, #12]
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e7f0      	b.n	8006386 <__cvt+0xa6>

080063a4 <__exponent>:
 80063a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a6:	4603      	mov	r3, r0
 80063a8:	2900      	cmp	r1, #0
 80063aa:	bfb8      	it	lt
 80063ac:	4249      	neglt	r1, r1
 80063ae:	f803 2b02 	strb.w	r2, [r3], #2
 80063b2:	bfb4      	ite	lt
 80063b4:	222d      	movlt	r2, #45	; 0x2d
 80063b6:	222b      	movge	r2, #43	; 0x2b
 80063b8:	2909      	cmp	r1, #9
 80063ba:	7042      	strb	r2, [r0, #1]
 80063bc:	dd2a      	ble.n	8006414 <__exponent+0x70>
 80063be:	f10d 0207 	add.w	r2, sp, #7
 80063c2:	4617      	mov	r7, r2
 80063c4:	260a      	movs	r6, #10
 80063c6:	4694      	mov	ip, r2
 80063c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80063cc:	fb06 1415 	mls	r4, r6, r5, r1
 80063d0:	3430      	adds	r4, #48	; 0x30
 80063d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80063d6:	460c      	mov	r4, r1
 80063d8:	2c63      	cmp	r4, #99	; 0x63
 80063da:	f102 32ff 	add.w	r2, r2, #4294967295
 80063de:	4629      	mov	r1, r5
 80063e0:	dcf1      	bgt.n	80063c6 <__exponent+0x22>
 80063e2:	3130      	adds	r1, #48	; 0x30
 80063e4:	f1ac 0402 	sub.w	r4, ip, #2
 80063e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063ec:	1c41      	adds	r1, r0, #1
 80063ee:	4622      	mov	r2, r4
 80063f0:	42ba      	cmp	r2, r7
 80063f2:	d30a      	bcc.n	800640a <__exponent+0x66>
 80063f4:	f10d 0209 	add.w	r2, sp, #9
 80063f8:	eba2 020c 	sub.w	r2, r2, ip
 80063fc:	42bc      	cmp	r4, r7
 80063fe:	bf88      	it	hi
 8006400:	2200      	movhi	r2, #0
 8006402:	4413      	add	r3, r2
 8006404:	1a18      	subs	r0, r3, r0
 8006406:	b003      	add	sp, #12
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800640e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006412:	e7ed      	b.n	80063f0 <__exponent+0x4c>
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	3130      	adds	r1, #48	; 0x30
 8006418:	7083      	strb	r3, [r0, #2]
 800641a:	70c1      	strb	r1, [r0, #3]
 800641c:	1d03      	adds	r3, r0, #4
 800641e:	e7f1      	b.n	8006404 <__exponent+0x60>

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	ed2d 8b02 	vpush	{d8}
 8006428:	b08d      	sub	sp, #52	; 0x34
 800642a:	460c      	mov	r4, r1
 800642c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006430:	4616      	mov	r6, r2
 8006432:	461f      	mov	r7, r3
 8006434:	4605      	mov	r5, r0
 8006436:	f000 ff29 	bl	800728c <_localeconv_r>
 800643a:	f8d0 a000 	ldr.w	sl, [r0]
 800643e:	4650      	mov	r0, sl
 8006440:	f7f9 ff16 	bl	8000270 <strlen>
 8006444:	2300      	movs	r3, #0
 8006446:	930a      	str	r3, [sp, #40]	; 0x28
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	f8d8 3000 	ldr.w	r3, [r8]
 8006450:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006454:	3307      	adds	r3, #7
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	f103 0208 	add.w	r2, r3, #8
 800645e:	f8c8 2000 	str.w	r2, [r8]
 8006462:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800646a:	9307      	str	r3, [sp, #28]
 800646c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006470:	ee08 0a10 	vmov	s16, r0
 8006474:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647c:	4b9e      	ldr	r3, [pc, #632]	; (80066f8 <_printf_float+0x2d8>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	f7fa fb53 	bl	8000b2c <__aeabi_dcmpun>
 8006486:	bb88      	cbnz	r0, 80064ec <_printf_float+0xcc>
 8006488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800648c:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <_printf_float+0x2d8>)
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	f7fa fb2d 	bl	8000af0 <__aeabi_dcmple>
 8006496:	bb48      	cbnz	r0, 80064ec <_printf_float+0xcc>
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7fa fb1c 	bl	8000adc <__aeabi_dcmplt>
 80064a4:	b110      	cbz	r0, 80064ac <_printf_float+0x8c>
 80064a6:	232d      	movs	r3, #45	; 0x2d
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	4a93      	ldr	r2, [pc, #588]	; (80066fc <_printf_float+0x2dc>)
 80064ae:	4b94      	ldr	r3, [pc, #592]	; (8006700 <_printf_float+0x2e0>)
 80064b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064b4:	bf94      	ite	ls
 80064b6:	4690      	movls	r8, r2
 80064b8:	4698      	movhi	r8, r3
 80064ba:	2303      	movs	r3, #3
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	f023 0304 	bic.w	r3, r3, #4
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	9700      	str	r7, [sp, #0]
 80064cc:	4633      	mov	r3, r6
 80064ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f9da 	bl	800688c <_printf_common>
 80064d8:	3001      	adds	r0, #1
 80064da:	f040 8090 	bne.w	80065fe <_printf_float+0x1de>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	b00d      	add	sp, #52	; 0x34
 80064e4:	ecbd 8b02 	vpop	{d8}
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7fa fb1a 	bl	8000b2c <__aeabi_dcmpun>
 80064f8:	b140      	cbz	r0, 800650c <_printf_float+0xec>
 80064fa:	464b      	mov	r3, r9
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bfbc      	itt	lt
 8006500:	232d      	movlt	r3, #45	; 0x2d
 8006502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006506:	4a7f      	ldr	r2, [pc, #508]	; (8006704 <_printf_float+0x2e4>)
 8006508:	4b7f      	ldr	r3, [pc, #508]	; (8006708 <_printf_float+0x2e8>)
 800650a:	e7d1      	b.n	80064b0 <_printf_float+0x90>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006512:	9206      	str	r2, [sp, #24]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	d13f      	bne.n	8006598 <_printf_float+0x178>
 8006518:	2306      	movs	r3, #6
 800651a:	6063      	str	r3, [r4, #4]
 800651c:	9b05      	ldr	r3, [sp, #20]
 800651e:	6861      	ldr	r1, [r4, #4]
 8006520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006524:	2300      	movs	r3, #0
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	ab0a      	add	r3, sp, #40	; 0x28
 800652a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800652e:	ab09      	add	r3, sp, #36	; 0x24
 8006530:	ec49 8b10 	vmov	d0, r8, r9
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6022      	str	r2, [r4, #0]
 8006538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800653c:	4628      	mov	r0, r5
 800653e:	f7ff fecf 	bl	80062e0 <__cvt>
 8006542:	9b06      	ldr	r3, [sp, #24]
 8006544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006546:	2b47      	cmp	r3, #71	; 0x47
 8006548:	4680      	mov	r8, r0
 800654a:	d108      	bne.n	800655e <_printf_float+0x13e>
 800654c:	1cc8      	adds	r0, r1, #3
 800654e:	db02      	blt.n	8006556 <_printf_float+0x136>
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	4299      	cmp	r1, r3
 8006554:	dd41      	ble.n	80065da <_printf_float+0x1ba>
 8006556:	f1ab 0302 	sub.w	r3, fp, #2
 800655a:	fa5f fb83 	uxtb.w	fp, r3
 800655e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006562:	d820      	bhi.n	80065a6 <_printf_float+0x186>
 8006564:	3901      	subs	r1, #1
 8006566:	465a      	mov	r2, fp
 8006568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800656c:	9109      	str	r1, [sp, #36]	; 0x24
 800656e:	f7ff ff19 	bl	80063a4 <__exponent>
 8006572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006574:	1813      	adds	r3, r2, r0
 8006576:	2a01      	cmp	r2, #1
 8006578:	4681      	mov	r9, r0
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	dc02      	bgt.n	8006584 <_printf_float+0x164>
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	07d2      	lsls	r2, r2, #31
 8006582:	d501      	bpl.n	8006588 <_printf_float+0x168>
 8006584:	3301      	adds	r3, #1
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800658c:	2b00      	cmp	r3, #0
 800658e:	d09c      	beq.n	80064ca <_printf_float+0xaa>
 8006590:	232d      	movs	r3, #45	; 0x2d
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006596:	e798      	b.n	80064ca <_printf_float+0xaa>
 8006598:	9a06      	ldr	r2, [sp, #24]
 800659a:	2a47      	cmp	r2, #71	; 0x47
 800659c:	d1be      	bne.n	800651c <_printf_float+0xfc>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1bc      	bne.n	800651c <_printf_float+0xfc>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7b9      	b.n	800651a <_printf_float+0xfa>
 80065a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065aa:	d118      	bne.n	80065de <_printf_float+0x1be>
 80065ac:	2900      	cmp	r1, #0
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	dd0b      	ble.n	80065ca <_printf_float+0x1aa>
 80065b2:	6121      	str	r1, [r4, #16]
 80065b4:	b913      	cbnz	r3, 80065bc <_printf_float+0x19c>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d502      	bpl.n	80065c2 <_printf_float+0x1a2>
 80065bc:	3301      	adds	r3, #1
 80065be:	440b      	add	r3, r1
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065c4:	f04f 0900 	mov.w	r9, #0
 80065c8:	e7de      	b.n	8006588 <_printf_float+0x168>
 80065ca:	b913      	cbnz	r3, 80065d2 <_printf_float+0x1b2>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	07d2      	lsls	r2, r2, #31
 80065d0:	d501      	bpl.n	80065d6 <_printf_float+0x1b6>
 80065d2:	3302      	adds	r3, #2
 80065d4:	e7f4      	b.n	80065c0 <_printf_float+0x1a0>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7f2      	b.n	80065c0 <_printf_float+0x1a0>
 80065da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e0:	4299      	cmp	r1, r3
 80065e2:	db05      	blt.n	80065f0 <_printf_float+0x1d0>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	6121      	str	r1, [r4, #16]
 80065e8:	07d8      	lsls	r0, r3, #31
 80065ea:	d5ea      	bpl.n	80065c2 <_printf_float+0x1a2>
 80065ec:	1c4b      	adds	r3, r1, #1
 80065ee:	e7e7      	b.n	80065c0 <_printf_float+0x1a0>
 80065f0:	2900      	cmp	r1, #0
 80065f2:	bfd4      	ite	le
 80065f4:	f1c1 0202 	rsble	r2, r1, #2
 80065f8:	2201      	movgt	r2, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	e7e0      	b.n	80065c0 <_printf_float+0x1a0>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	055a      	lsls	r2, r3, #21
 8006602:	d407      	bmi.n	8006614 <_printf_float+0x1f4>
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	4642      	mov	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d12c      	bne.n	800666c <_printf_float+0x24c>
 8006612:	e764      	b.n	80064de <_printf_float+0xbe>
 8006614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006618:	f240 80e0 	bls.w	80067dc <_printf_float+0x3bc>
 800661c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7fa fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006628:	2800      	cmp	r0, #0
 800662a:	d034      	beq.n	8006696 <_printf_float+0x276>
 800662c:	4a37      	ldr	r2, [pc, #220]	; (800670c <_printf_float+0x2ec>)
 800662e:	2301      	movs	r3, #1
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af51 	beq.w	80064de <_printf_float+0xbe>
 800663c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006640:	429a      	cmp	r2, r3
 8006642:	db02      	blt.n	800664a <_printf_float+0x22a>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07d8      	lsls	r0, r3, #31
 8006648:	d510      	bpl.n	800666c <_printf_float+0x24c>
 800664a:	ee18 3a10 	vmov	r3, s16
 800664e:	4652      	mov	r2, sl
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af41 	beq.w	80064de <_printf_float+0xbe>
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	f104 091a 	add.w	r9, r4, #26
 8006664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	4543      	cmp	r3, r8
 800666a:	dc09      	bgt.n	8006680 <_printf_float+0x260>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	f100 8107 	bmi.w	8006882 <_printf_float+0x462>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e730      	b.n	80064e2 <_printf_float+0xc2>
 8006680:	2301      	movs	r3, #1
 8006682:	464a      	mov	r2, r9
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af27 	beq.w	80064de <_printf_float+0xbe>
 8006690:	f108 0801 	add.w	r8, r8, #1
 8006694:	e7e6      	b.n	8006664 <_printf_float+0x244>
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc39      	bgt.n	8006710 <_printf_float+0x2f0>
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <_printf_float+0x2ec>)
 800669e:	2301      	movs	r3, #1
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af19 	beq.w	80064de <_printf_float+0xbe>
 80066ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066b0:	4313      	orrs	r3, r2
 80066b2:	d102      	bne.n	80066ba <_printf_float+0x29a>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	07d9      	lsls	r1, r3, #31
 80066b8:	d5d8      	bpl.n	800666c <_printf_float+0x24c>
 80066ba:	ee18 3a10 	vmov	r3, s16
 80066be:	4652      	mov	r2, sl
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af09 	beq.w	80064de <_printf_float+0xbe>
 80066cc:	f04f 0900 	mov.w	r9, #0
 80066d0:	f104 0a1a 	add.w	sl, r4, #26
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	425b      	negs	r3, r3
 80066d8:	454b      	cmp	r3, r9
 80066da:	dc01      	bgt.n	80066e0 <_printf_float+0x2c0>
 80066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066de:	e792      	b.n	8006606 <_printf_float+0x1e6>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4652      	mov	r2, sl
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f aef7 	beq.w	80064de <_printf_float+0xbe>
 80066f0:	f109 0901 	add.w	r9, r9, #1
 80066f4:	e7ee      	b.n	80066d4 <_printf_float+0x2b4>
 80066f6:	bf00      	nop
 80066f8:	7fefffff 	.word	0x7fefffff
 80066fc:	0800b3e4 	.word	0x0800b3e4
 8006700:	0800b3e8 	.word	0x0800b3e8
 8006704:	0800b3ec 	.word	0x0800b3ec
 8006708:	0800b3f0 	.word	0x0800b3f0
 800670c:	0800b780 	.word	0x0800b780
 8006710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006714:	429a      	cmp	r2, r3
 8006716:	bfa8      	it	ge
 8006718:	461a      	movge	r2, r3
 800671a:	2a00      	cmp	r2, #0
 800671c:	4691      	mov	r9, r2
 800671e:	dc37      	bgt.n	8006790 <_printf_float+0x370>
 8006720:	f04f 0b00 	mov.w	fp, #0
 8006724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006728:	f104 021a 	add.w	r2, r4, #26
 800672c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	eba3 0309 	sub.w	r3, r3, r9
 8006734:	455b      	cmp	r3, fp
 8006736:	dc33      	bgt.n	80067a0 <_printf_float+0x380>
 8006738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800673c:	429a      	cmp	r2, r3
 800673e:	db3b      	blt.n	80067b8 <_printf_float+0x398>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07da      	lsls	r2, r3, #31
 8006744:	d438      	bmi.n	80067b8 <_printf_float+0x398>
 8006746:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800674a:	eba2 0903 	sub.w	r9, r2, r3
 800674e:	9b05      	ldr	r3, [sp, #20]
 8006750:	1ad2      	subs	r2, r2, r3
 8006752:	4591      	cmp	r9, r2
 8006754:	bfa8      	it	ge
 8006756:	4691      	movge	r9, r2
 8006758:	f1b9 0f00 	cmp.w	r9, #0
 800675c:	dc35      	bgt.n	80067ca <_printf_float+0x3aa>
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006766:	f104 0a1a 	add.w	sl, r4, #26
 800676a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	eba3 0309 	sub.w	r3, r3, r9
 8006774:	4543      	cmp	r3, r8
 8006776:	f77f af79 	ble.w	800666c <_printf_float+0x24c>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f aeaa 	beq.w	80064de <_printf_float+0xbe>
 800678a:	f108 0801 	add.w	r8, r8, #1
 800678e:	e7ec      	b.n	800676a <_printf_float+0x34a>
 8006790:	4613      	mov	r3, r2
 8006792:	4631      	mov	r1, r6
 8006794:	4642      	mov	r2, r8
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d1c0      	bne.n	8006720 <_printf_float+0x300>
 800679e:	e69e      	b.n	80064de <_printf_float+0xbe>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4631      	mov	r1, r6
 80067a4:	4628      	mov	r0, r5
 80067a6:	9205      	str	r2, [sp, #20]
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f ae97 	beq.w	80064de <_printf_float+0xbe>
 80067b0:	9a05      	ldr	r2, [sp, #20]
 80067b2:	f10b 0b01 	add.w	fp, fp, #1
 80067b6:	e7b9      	b.n	800672c <_printf_float+0x30c>
 80067b8:	ee18 3a10 	vmov	r3, s16
 80067bc:	4652      	mov	r2, sl
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	d1be      	bne.n	8006746 <_printf_float+0x326>
 80067c8:	e689      	b.n	80064de <_printf_float+0xbe>
 80067ca:	9a05      	ldr	r2, [sp, #20]
 80067cc:	464b      	mov	r3, r9
 80067ce:	4442      	add	r2, r8
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	d1c1      	bne.n	800675e <_printf_float+0x33e>
 80067da:	e680      	b.n	80064de <_printf_float+0xbe>
 80067dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067de:	2a01      	cmp	r2, #1
 80067e0:	dc01      	bgt.n	80067e6 <_printf_float+0x3c6>
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d53a      	bpl.n	800685c <_printf_float+0x43c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4642      	mov	r2, r8
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f ae74 	beq.w	80064de <_printf_float+0xbe>
 80067f6:	ee18 3a10 	vmov	r3, s16
 80067fa:	4652      	mov	r2, sl
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f ae6b 	beq.w	80064de <_printf_float+0xbe>
 8006808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006814:	f7fa f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8006818:	b9d8      	cbnz	r0, 8006852 <_printf_float+0x432>
 800681a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800681e:	f108 0201 	add.w	r2, r8, #1
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	d10e      	bne.n	800684a <_printf_float+0x42a>
 800682c:	e657      	b.n	80064de <_printf_float+0xbe>
 800682e:	2301      	movs	r3, #1
 8006830:	4652      	mov	r2, sl
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f ae50 	beq.w	80064de <_printf_float+0xbe>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	3b01      	subs	r3, #1
 8006846:	4543      	cmp	r3, r8
 8006848:	dcf1      	bgt.n	800682e <_printf_float+0x40e>
 800684a:	464b      	mov	r3, r9
 800684c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006850:	e6da      	b.n	8006608 <_printf_float+0x1e8>
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	f104 0a1a 	add.w	sl, r4, #26
 800685a:	e7f2      	b.n	8006842 <_printf_float+0x422>
 800685c:	2301      	movs	r3, #1
 800685e:	4642      	mov	r2, r8
 8006860:	e7df      	b.n	8006822 <_printf_float+0x402>
 8006862:	2301      	movs	r3, #1
 8006864:	464a      	mov	r2, r9
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae36 	beq.w	80064de <_printf_float+0xbe>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800687a:	1a5b      	subs	r3, r3, r1
 800687c:	4543      	cmp	r3, r8
 800687e:	dcf0      	bgt.n	8006862 <_printf_float+0x442>
 8006880:	e6f8      	b.n	8006674 <_printf_float+0x254>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 0919 	add.w	r9, r4, #25
 800688a:	e7f4      	b.n	8006876 <_printf_float+0x456>

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4699      	mov	r9, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a8:	4607      	mov	r7, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc26      	bgt.n	8006922 <_printf_common+0x96>
 80068d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d8:	1e13      	subs	r3, r2, #0
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d42b      	bmi.n	800693c <_printf_common+0xb0>
 80068e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068e8:	4649      	mov	r1, r9
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d01e      	beq.n	8006930 <_printf_common+0xa4>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	bf02      	ittt	eq
 80068fe:	68e5      	ldreq	r5, [r4, #12]
 8006900:	6833      	ldreq	r3, [r6, #0]
 8006902:	1aed      	subeq	r5, r5, r3
 8006904:	68a3      	ldr	r3, [r4, #8]
 8006906:	bf0c      	ite	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	2500      	movne	r5, #0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfc4      	itt	gt
 8006912:	1a9b      	subgt	r3, r3, r2
 8006914:	18ed      	addgt	r5, r5, r3
 8006916:	2600      	movs	r6, #0
 8006918:	341a      	adds	r4, #26
 800691a:	42b5      	cmp	r5, r6
 800691c:	d11a      	bne.n	8006954 <_printf_common+0xc8>
 800691e:	2000      	movs	r0, #0
 8006920:	e008      	b.n	8006934 <_printf_common+0xa8>
 8006922:	2301      	movs	r3, #1
 8006924:	4652      	mov	r2, sl
 8006926:	4649      	mov	r1, r9
 8006928:	4638      	mov	r0, r7
 800692a:	47c0      	blx	r8
 800692c:	3001      	adds	r0, #1
 800692e:	d103      	bne.n	8006938 <_printf_common+0xac>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	3501      	adds	r5, #1
 800693a:	e7c6      	b.n	80068ca <_printf_common+0x3e>
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	2030      	movs	r0, #48	; 0x30
 8006942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006946:	4422      	add	r2, r4
 8006948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800694c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006950:	3302      	adds	r3, #2
 8006952:	e7c7      	b.n	80068e4 <_printf_common+0x58>
 8006954:	2301      	movs	r3, #1
 8006956:	4622      	mov	r2, r4
 8006958:	4649      	mov	r1, r9
 800695a:	4638      	mov	r0, r7
 800695c:	47c0      	blx	r8
 800695e:	3001      	adds	r0, #1
 8006960:	d0e6      	beq.n	8006930 <_printf_common+0xa4>
 8006962:	3601      	adds	r6, #1
 8006964:	e7d9      	b.n	800691a <_printf_common+0x8e>
	...

08006968 <_printf_i>:
 8006968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	7e0f      	ldrb	r7, [r1, #24]
 800696e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006970:	2f78      	cmp	r7, #120	; 0x78
 8006972:	4691      	mov	r9, r2
 8006974:	4680      	mov	r8, r0
 8006976:	460c      	mov	r4, r1
 8006978:	469a      	mov	sl, r3
 800697a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800697e:	d807      	bhi.n	8006990 <_printf_i+0x28>
 8006980:	2f62      	cmp	r7, #98	; 0x62
 8006982:	d80a      	bhi.n	800699a <_printf_i+0x32>
 8006984:	2f00      	cmp	r7, #0
 8006986:	f000 80d4 	beq.w	8006b32 <_printf_i+0x1ca>
 800698a:	2f58      	cmp	r7, #88	; 0x58
 800698c:	f000 80c0 	beq.w	8006b10 <_printf_i+0x1a8>
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006998:	e03a      	b.n	8006a10 <_printf_i+0xa8>
 800699a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800699e:	2b15      	cmp	r3, #21
 80069a0:	d8f6      	bhi.n	8006990 <_printf_i+0x28>
 80069a2:	a101      	add	r1, pc, #4	; (adr r1, 80069a8 <_printf_i+0x40>)
 80069a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006991 	.word	0x08006991
 80069b4:	08006991 	.word	0x08006991
 80069b8:	08006991 	.word	0x08006991
 80069bc:	08006991 	.word	0x08006991
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006991 	.word	0x08006991
 80069c8:	08006991 	.word	0x08006991
 80069cc:	08006991 	.word	0x08006991
 80069d0:	08006991 	.word	0x08006991
 80069d4:	08006b19 	.word	0x08006b19
 80069d8:	08006a41 	.word	0x08006a41
 80069dc:	08006ad3 	.word	0x08006ad3
 80069e0:	08006991 	.word	0x08006991
 80069e4:	08006991 	.word	0x08006991
 80069e8:	08006b3b 	.word	0x08006b3b
 80069ec:	08006991 	.word	0x08006991
 80069f0:	08006a41 	.word	0x08006a41
 80069f4:	08006991 	.word	0x08006991
 80069f8:	08006991 	.word	0x08006991
 80069fc:	08006adb 	.word	0x08006adb
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	602a      	str	r2, [r5, #0]
 8006a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a10:	2301      	movs	r3, #1
 8006a12:	e09f      	b.n	8006b54 <_printf_i+0x1ec>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	0607      	lsls	r7, r0, #24
 8006a1a:	f103 0104 	add.w	r1, r3, #4
 8006a1e:	6029      	str	r1, [r5, #0]
 8006a20:	d501      	bpl.n	8006a26 <_printf_i+0xbe>
 8006a22:	681e      	ldr	r6, [r3, #0]
 8006a24:	e003      	b.n	8006a2e <_printf_i+0xc6>
 8006a26:	0646      	lsls	r6, r0, #25
 8006a28:	d5fb      	bpl.n	8006a22 <_printf_i+0xba>
 8006a2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	da03      	bge.n	8006a3a <_printf_i+0xd2>
 8006a32:	232d      	movs	r3, #45	; 0x2d
 8006a34:	4276      	negs	r6, r6
 8006a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3a:	485a      	ldr	r0, [pc, #360]	; (8006ba4 <_printf_i+0x23c>)
 8006a3c:	230a      	movs	r3, #10
 8006a3e:	e012      	b.n	8006a66 <_printf_i+0xfe>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	1d19      	adds	r1, r3, #4
 8006a46:	6029      	str	r1, [r5, #0]
 8006a48:	0605      	lsls	r5, r0, #24
 8006a4a:	d501      	bpl.n	8006a50 <_printf_i+0xe8>
 8006a4c:	681e      	ldr	r6, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <_printf_i+0xee>
 8006a50:	0641      	lsls	r1, r0, #25
 8006a52:	d5fb      	bpl.n	8006a4c <_printf_i+0xe4>
 8006a54:	881e      	ldrh	r6, [r3, #0]
 8006a56:	4853      	ldr	r0, [pc, #332]	; (8006ba4 <_printf_i+0x23c>)
 8006a58:	2f6f      	cmp	r7, #111	; 0x6f
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2308      	moveq	r3, #8
 8006a5e:	230a      	movne	r3, #10
 8006a60:	2100      	movs	r1, #0
 8006a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a66:	6865      	ldr	r5, [r4, #4]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	bfa2      	ittt	ge
 8006a6e:	6821      	ldrge	r1, [r4, #0]
 8006a70:	f021 0104 	bicge.w	r1, r1, #4
 8006a74:	6021      	strge	r1, [r4, #0]
 8006a76:	b90e      	cbnz	r6, 8006a7c <_printf_i+0x114>
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	d04b      	beq.n	8006b14 <_printf_i+0x1ac>
 8006a7c:	4615      	mov	r5, r2
 8006a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a82:	fb03 6711 	mls	r7, r3, r1, r6
 8006a86:	5dc7      	ldrb	r7, [r0, r7]
 8006a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a8c:	4637      	mov	r7, r6
 8006a8e:	42bb      	cmp	r3, r7
 8006a90:	460e      	mov	r6, r1
 8006a92:	d9f4      	bls.n	8006a7e <_printf_i+0x116>
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d10b      	bne.n	8006ab0 <_printf_i+0x148>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	07de      	lsls	r6, r3, #31
 8006a9c:	d508      	bpl.n	8006ab0 <_printf_i+0x148>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	6861      	ldr	r1, [r4, #4]
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	bfde      	ittt	le
 8006aa6:	2330      	movle	r3, #48	; 0x30
 8006aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ab0:	1b52      	subs	r2, r2, r5
 8006ab2:	6122      	str	r2, [r4, #16]
 8006ab4:	f8cd a000 	str.w	sl, [sp]
 8006ab8:	464b      	mov	r3, r9
 8006aba:	aa03      	add	r2, sp, #12
 8006abc:	4621      	mov	r1, r4
 8006abe:	4640      	mov	r0, r8
 8006ac0:	f7ff fee4 	bl	800688c <_printf_common>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d14a      	bne.n	8006b5e <_printf_i+0x1f6>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	b004      	add	sp, #16
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	f043 0320 	orr.w	r3, r3, #32
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	4833      	ldr	r0, [pc, #204]	; (8006ba8 <_printf_i+0x240>)
 8006adc:	2778      	movs	r7, #120	; 0x78
 8006ade:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	6829      	ldr	r1, [r5, #0]
 8006ae6:	061f      	lsls	r7, r3, #24
 8006ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aec:	d402      	bmi.n	8006af4 <_printf_i+0x18c>
 8006aee:	065f      	lsls	r7, r3, #25
 8006af0:	bf48      	it	mi
 8006af2:	b2b6      	uxthmi	r6, r6
 8006af4:	07df      	lsls	r7, r3, #31
 8006af6:	bf48      	it	mi
 8006af8:	f043 0320 	orrmi.w	r3, r3, #32
 8006afc:	6029      	str	r1, [r5, #0]
 8006afe:	bf48      	it	mi
 8006b00:	6023      	strmi	r3, [r4, #0]
 8006b02:	b91e      	cbnz	r6, 8006b0c <_printf_i+0x1a4>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	f023 0320 	bic.w	r3, r3, #32
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	e7a7      	b.n	8006a60 <_printf_i+0xf8>
 8006b10:	4824      	ldr	r0, [pc, #144]	; (8006ba4 <_printf_i+0x23c>)
 8006b12:	e7e4      	b.n	8006ade <_printf_i+0x176>
 8006b14:	4615      	mov	r5, r2
 8006b16:	e7bd      	b.n	8006a94 <_printf_i+0x12c>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	6826      	ldr	r6, [r4, #0]
 8006b1c:	6961      	ldr	r1, [r4, #20]
 8006b1e:	1d18      	adds	r0, r3, #4
 8006b20:	6028      	str	r0, [r5, #0]
 8006b22:	0635      	lsls	r5, r6, #24
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	d501      	bpl.n	8006b2c <_printf_i+0x1c4>
 8006b28:	6019      	str	r1, [r3, #0]
 8006b2a:	e002      	b.n	8006b32 <_printf_i+0x1ca>
 8006b2c:	0670      	lsls	r0, r6, #25
 8006b2e:	d5fb      	bpl.n	8006b28 <_printf_i+0x1c0>
 8006b30:	8019      	strh	r1, [r3, #0]
 8006b32:	2300      	movs	r3, #0
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	4615      	mov	r5, r2
 8006b38:	e7bc      	b.n	8006ab4 <_printf_i+0x14c>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	1d1a      	adds	r2, r3, #4
 8006b3e:	602a      	str	r2, [r5, #0]
 8006b40:	681d      	ldr	r5, [r3, #0]
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	2100      	movs	r1, #0
 8006b46:	4628      	mov	r0, r5
 8006b48:	f7f9 fb42 	bl	80001d0 <memchr>
 8006b4c:	b108      	cbz	r0, 8006b52 <_printf_i+0x1ea>
 8006b4e:	1b40      	subs	r0, r0, r5
 8006b50:	6060      	str	r0, [r4, #4]
 8006b52:	6863      	ldr	r3, [r4, #4]
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	2300      	movs	r3, #0
 8006b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b5c:	e7aa      	b.n	8006ab4 <_printf_i+0x14c>
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	462a      	mov	r2, r5
 8006b62:	4649      	mov	r1, r9
 8006b64:	4640      	mov	r0, r8
 8006b66:	47d0      	blx	sl
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d0ad      	beq.n	8006ac8 <_printf_i+0x160>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	079b      	lsls	r3, r3, #30
 8006b70:	d413      	bmi.n	8006b9a <_printf_i+0x232>
 8006b72:	68e0      	ldr	r0, [r4, #12]
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	4298      	cmp	r0, r3
 8006b78:	bfb8      	it	lt
 8006b7a:	4618      	movlt	r0, r3
 8006b7c:	e7a6      	b.n	8006acc <_printf_i+0x164>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4632      	mov	r2, r6
 8006b82:	4649      	mov	r1, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	47d0      	blx	sl
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d09d      	beq.n	8006ac8 <_printf_i+0x160>
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	9903      	ldr	r1, [sp, #12]
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dcf2      	bgt.n	8006b7e <_printf_i+0x216>
 8006b98:	e7eb      	b.n	8006b72 <_printf_i+0x20a>
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	f104 0619 	add.w	r6, r4, #25
 8006ba0:	e7f5      	b.n	8006b8e <_printf_i+0x226>
 8006ba2:	bf00      	nop
 8006ba4:	0800b3f4 	.word	0x0800b3f4
 8006ba8:	0800b405 	.word	0x0800b405

08006bac <_scanf_float>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	4617      	mov	r7, r2
 8006bb4:	9303      	str	r3, [sp, #12]
 8006bb6:	688b      	ldr	r3, [r1, #8]
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006bbe:	bf83      	ittte	hi
 8006bc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006bc4:	195b      	addhi	r3, r3, r5
 8006bc6:	9302      	strhi	r3, [sp, #8]
 8006bc8:	2300      	movls	r3, #0
 8006bca:	bf86      	itte	hi
 8006bcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006bd0:	608b      	strhi	r3, [r1, #8]
 8006bd2:	9302      	strls	r3, [sp, #8]
 8006bd4:	680b      	ldr	r3, [r1, #0]
 8006bd6:	468b      	mov	fp, r1
 8006bd8:	2500      	movs	r5, #0
 8006bda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006bde:	f84b 3b1c 	str.w	r3, [fp], #28
 8006be2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006be6:	4680      	mov	r8, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	465e      	mov	r6, fp
 8006bec:	46aa      	mov	sl, r5
 8006bee:	46a9      	mov	r9, r5
 8006bf0:	9501      	str	r5, [sp, #4]
 8006bf2:	68a2      	ldr	r2, [r4, #8]
 8006bf4:	b152      	cbz	r2, 8006c0c <_scanf_float+0x60>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b4e      	cmp	r3, #78	; 0x4e
 8006bfc:	d864      	bhi.n	8006cc8 <_scanf_float+0x11c>
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d83c      	bhi.n	8006c7c <_scanf_float+0xd0>
 8006c02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c06:	b2c8      	uxtb	r0, r1
 8006c08:	280e      	cmp	r0, #14
 8006c0a:	d93a      	bls.n	8006c82 <_scanf_float+0xd6>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	d003      	beq.n	8006c1a <_scanf_float+0x6e>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c1e:	f1ba 0f01 	cmp.w	sl, #1
 8006c22:	f200 8113 	bhi.w	8006e4c <_scanf_float+0x2a0>
 8006c26:	455e      	cmp	r6, fp
 8006c28:	f200 8105 	bhi.w	8006e36 <_scanf_float+0x28a>
 8006c2c:	2501      	movs	r5, #1
 8006c2e:	4628      	mov	r0, r5
 8006c30:	b007      	add	sp, #28
 8006c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c3a:	2a0d      	cmp	r2, #13
 8006c3c:	d8e6      	bhi.n	8006c0c <_scanf_float+0x60>
 8006c3e:	a101      	add	r1, pc, #4	; (adr r1, 8006c44 <_scanf_float+0x98>)
 8006c40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c44:	08006d83 	.word	0x08006d83
 8006c48:	08006c0d 	.word	0x08006c0d
 8006c4c:	08006c0d 	.word	0x08006c0d
 8006c50:	08006c0d 	.word	0x08006c0d
 8006c54:	08006de3 	.word	0x08006de3
 8006c58:	08006dbb 	.word	0x08006dbb
 8006c5c:	08006c0d 	.word	0x08006c0d
 8006c60:	08006c0d 	.word	0x08006c0d
 8006c64:	08006d91 	.word	0x08006d91
 8006c68:	08006c0d 	.word	0x08006c0d
 8006c6c:	08006c0d 	.word	0x08006c0d
 8006c70:	08006c0d 	.word	0x08006c0d
 8006c74:	08006c0d 	.word	0x08006c0d
 8006c78:	08006d49 	.word	0x08006d49
 8006c7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c80:	e7db      	b.n	8006c3a <_scanf_float+0x8e>
 8006c82:	290e      	cmp	r1, #14
 8006c84:	d8c2      	bhi.n	8006c0c <_scanf_float+0x60>
 8006c86:	a001      	add	r0, pc, #4	; (adr r0, 8006c8c <_scanf_float+0xe0>)
 8006c88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c8c:	08006d3b 	.word	0x08006d3b
 8006c90:	08006c0d 	.word	0x08006c0d
 8006c94:	08006d3b 	.word	0x08006d3b
 8006c98:	08006dcf 	.word	0x08006dcf
 8006c9c:	08006c0d 	.word	0x08006c0d
 8006ca0:	08006ce9 	.word	0x08006ce9
 8006ca4:	08006d25 	.word	0x08006d25
 8006ca8:	08006d25 	.word	0x08006d25
 8006cac:	08006d25 	.word	0x08006d25
 8006cb0:	08006d25 	.word	0x08006d25
 8006cb4:	08006d25 	.word	0x08006d25
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006d25 	.word	0x08006d25
 8006cc8:	2b6e      	cmp	r3, #110	; 0x6e
 8006cca:	d809      	bhi.n	8006ce0 <_scanf_float+0x134>
 8006ccc:	2b60      	cmp	r3, #96	; 0x60
 8006cce:	d8b2      	bhi.n	8006c36 <_scanf_float+0x8a>
 8006cd0:	2b54      	cmp	r3, #84	; 0x54
 8006cd2:	d077      	beq.n	8006dc4 <_scanf_float+0x218>
 8006cd4:	2b59      	cmp	r3, #89	; 0x59
 8006cd6:	d199      	bne.n	8006c0c <_scanf_float+0x60>
 8006cd8:	2d07      	cmp	r5, #7
 8006cda:	d197      	bne.n	8006c0c <_scanf_float+0x60>
 8006cdc:	2508      	movs	r5, #8
 8006cde:	e029      	b.n	8006d34 <_scanf_float+0x188>
 8006ce0:	2b74      	cmp	r3, #116	; 0x74
 8006ce2:	d06f      	beq.n	8006dc4 <_scanf_float+0x218>
 8006ce4:	2b79      	cmp	r3, #121	; 0x79
 8006ce6:	e7f6      	b.n	8006cd6 <_scanf_float+0x12a>
 8006ce8:	6821      	ldr	r1, [r4, #0]
 8006cea:	05c8      	lsls	r0, r1, #23
 8006cec:	d51a      	bpl.n	8006d24 <_scanf_float+0x178>
 8006cee:	9b02      	ldr	r3, [sp, #8]
 8006cf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cf4:	6021      	str	r1, [r4, #0]
 8006cf6:	f109 0901 	add.w	r9, r9, #1
 8006cfa:	b11b      	cbz	r3, 8006d04 <_scanf_float+0x158>
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	3201      	adds	r2, #1
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	60a2      	str	r2, [r4, #8]
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	f340 8084 	ble.w	8006e24 <_scanf_float+0x278>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	e766      	b.n	8006bf2 <_scanf_float+0x46>
 8006d24:	eb1a 0f05 	cmn.w	sl, r5
 8006d28:	f47f af70 	bne.w	8006c0c <_scanf_float+0x60>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d32:	6022      	str	r2, [r4, #0]
 8006d34:	f806 3b01 	strb.w	r3, [r6], #1
 8006d38:	e7e4      	b.n	8006d04 <_scanf_float+0x158>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	0610      	lsls	r0, r2, #24
 8006d3e:	f57f af65 	bpl.w	8006c0c <_scanf_float+0x60>
 8006d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d46:	e7f4      	b.n	8006d32 <_scanf_float+0x186>
 8006d48:	f1ba 0f00 	cmp.w	sl, #0
 8006d4c:	d10e      	bne.n	8006d6c <_scanf_float+0x1c0>
 8006d4e:	f1b9 0f00 	cmp.w	r9, #0
 8006d52:	d10e      	bne.n	8006d72 <_scanf_float+0x1c6>
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d5e:	d108      	bne.n	8006d72 <_scanf_float+0x1c6>
 8006d60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d64:	6022      	str	r2, [r4, #0]
 8006d66:	f04f 0a01 	mov.w	sl, #1
 8006d6a:	e7e3      	b.n	8006d34 <_scanf_float+0x188>
 8006d6c:	f1ba 0f02 	cmp.w	sl, #2
 8006d70:	d055      	beq.n	8006e1e <_scanf_float+0x272>
 8006d72:	2d01      	cmp	r5, #1
 8006d74:	d002      	beq.n	8006d7c <_scanf_float+0x1d0>
 8006d76:	2d04      	cmp	r5, #4
 8006d78:	f47f af48 	bne.w	8006c0c <_scanf_float+0x60>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	b2ed      	uxtb	r5, r5
 8006d80:	e7d8      	b.n	8006d34 <_scanf_float+0x188>
 8006d82:	f1ba 0f01 	cmp.w	sl, #1
 8006d86:	f47f af41 	bne.w	8006c0c <_scanf_float+0x60>
 8006d8a:	f04f 0a02 	mov.w	sl, #2
 8006d8e:	e7d1      	b.n	8006d34 <_scanf_float+0x188>
 8006d90:	b97d      	cbnz	r5, 8006db2 <_scanf_float+0x206>
 8006d92:	f1b9 0f00 	cmp.w	r9, #0
 8006d96:	f47f af3c 	bne.w	8006c12 <_scanf_float+0x66>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006da0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006da4:	f47f af39 	bne.w	8006c1a <_scanf_float+0x6e>
 8006da8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	2501      	movs	r5, #1
 8006db0:	e7c0      	b.n	8006d34 <_scanf_float+0x188>
 8006db2:	2d03      	cmp	r5, #3
 8006db4:	d0e2      	beq.n	8006d7c <_scanf_float+0x1d0>
 8006db6:	2d05      	cmp	r5, #5
 8006db8:	e7de      	b.n	8006d78 <_scanf_float+0x1cc>
 8006dba:	2d02      	cmp	r5, #2
 8006dbc:	f47f af26 	bne.w	8006c0c <_scanf_float+0x60>
 8006dc0:	2503      	movs	r5, #3
 8006dc2:	e7b7      	b.n	8006d34 <_scanf_float+0x188>
 8006dc4:	2d06      	cmp	r5, #6
 8006dc6:	f47f af21 	bne.w	8006c0c <_scanf_float+0x60>
 8006dca:	2507      	movs	r5, #7
 8006dcc:	e7b2      	b.n	8006d34 <_scanf_float+0x188>
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	0591      	lsls	r1, r2, #22
 8006dd2:	f57f af1b 	bpl.w	8006c0c <_scanf_float+0x60>
 8006dd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006de0:	e7a8      	b.n	8006d34 <_scanf_float+0x188>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006de8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006dec:	d006      	beq.n	8006dfc <_scanf_float+0x250>
 8006dee:	0550      	lsls	r0, r2, #21
 8006df0:	f57f af0c 	bpl.w	8006c0c <_scanf_float+0x60>
 8006df4:	f1b9 0f00 	cmp.w	r9, #0
 8006df8:	f43f af0f 	beq.w	8006c1a <_scanf_float+0x6e>
 8006dfc:	0591      	lsls	r1, r2, #22
 8006dfe:	bf58      	it	pl
 8006e00:	9901      	ldrpl	r1, [sp, #4]
 8006e02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e06:	bf58      	it	pl
 8006e08:	eba9 0101 	subpl.w	r1, r9, r1
 8006e0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e10:	bf58      	it	pl
 8006e12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	f04f 0900 	mov.w	r9, #0
 8006e1c:	e78a      	b.n	8006d34 <_scanf_float+0x188>
 8006e1e:	f04f 0a03 	mov.w	sl, #3
 8006e22:	e787      	b.n	8006d34 <_scanf_float+0x188>
 8006e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4798      	blx	r3
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f aedf 	beq.w	8006bf2 <_scanf_float+0x46>
 8006e34:	e6ea      	b.n	8006c0c <_scanf_float+0x60>
 8006e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4640      	mov	r0, r8
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e6ec      	b.n	8006c26 <_scanf_float+0x7a>
 8006e4c:	1e6b      	subs	r3, r5, #1
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d825      	bhi.n	8006e9e <_scanf_float+0x2f2>
 8006e52:	2d02      	cmp	r5, #2
 8006e54:	d836      	bhi.n	8006ec4 <_scanf_float+0x318>
 8006e56:	455e      	cmp	r6, fp
 8006e58:	f67f aee8 	bls.w	8006c2c <_scanf_float+0x80>
 8006e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e64:	463a      	mov	r2, r7
 8006e66:	4640      	mov	r0, r8
 8006e68:	4798      	blx	r3
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	e7f1      	b.n	8006e56 <_scanf_float+0x2aa>
 8006e72:	9802      	ldr	r0, [sp, #8]
 8006e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e7c:	9002      	str	r0, [sp, #8]
 8006e7e:	463a      	mov	r2, r7
 8006e80:	4640      	mov	r0, r8
 8006e82:	4798      	blx	r3
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8e:	fa5f fa8a 	uxtb.w	sl, sl
 8006e92:	f1ba 0f02 	cmp.w	sl, #2
 8006e96:	d1ec      	bne.n	8006e72 <_scanf_float+0x2c6>
 8006e98:	3d03      	subs	r5, #3
 8006e9a:	b2ed      	uxtb	r5, r5
 8006e9c:	1b76      	subs	r6, r6, r5
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	05da      	lsls	r2, r3, #23
 8006ea2:	d52f      	bpl.n	8006f04 <_scanf_float+0x358>
 8006ea4:	055b      	lsls	r3, r3, #21
 8006ea6:	d510      	bpl.n	8006eca <_scanf_float+0x31e>
 8006ea8:	455e      	cmp	r6, fp
 8006eaa:	f67f aebf 	bls.w	8006c2c <_scanf_float+0x80>
 8006eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4798      	blx	r3
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	e7f1      	b.n	8006ea8 <_scanf_float+0x2fc>
 8006ec4:	46aa      	mov	sl, r5
 8006ec6:	9602      	str	r6, [sp, #8]
 8006ec8:	e7df      	b.n	8006e8a <_scanf_float+0x2de>
 8006eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	2965      	cmp	r1, #101	; 0x65
 8006ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ed6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	d00c      	beq.n	8006ef8 <_scanf_float+0x34c>
 8006ede:	2945      	cmp	r1, #69	; 0x45
 8006ee0:	d00a      	beq.n	8006ef8 <_scanf_float+0x34c>
 8006ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	1eb5      	subs	r5, r6, #2
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006efc:	463a      	mov	r2, r7
 8006efe:	4640      	mov	r0, r8
 8006f00:	4798      	blx	r3
 8006f02:	462e      	mov	r6, r5
 8006f04:	6825      	ldr	r5, [r4, #0]
 8006f06:	f015 0510 	ands.w	r5, r5, #16
 8006f0a:	d158      	bne.n	8006fbe <_scanf_float+0x412>
 8006f0c:	7035      	strb	r5, [r6, #0]
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d11c      	bne.n	8006f54 <_scanf_float+0x3a8>
 8006f1a:	9b01      	ldr	r3, [sp, #4]
 8006f1c:	454b      	cmp	r3, r9
 8006f1e:	eba3 0209 	sub.w	r2, r3, r9
 8006f22:	d124      	bne.n	8006f6e <_scanf_float+0x3c2>
 8006f24:	2200      	movs	r2, #0
 8006f26:	4659      	mov	r1, fp
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f002 fc69 	bl	8009800 <_strtod_r>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	6821      	ldr	r1, [r4, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f011 0f02 	tst.w	r1, #2
 8006f38:	ec57 6b10 	vmov	r6, r7, d0
 8006f3c:	f103 0204 	add.w	r2, r3, #4
 8006f40:	d020      	beq.n	8006f84 <_scanf_float+0x3d8>
 8006f42:	9903      	ldr	r1, [sp, #12]
 8006f44:	600a      	str	r2, [r1, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	e9c3 6700 	strd	r6, r7, [r3]
 8006f4c:	68e3      	ldr	r3, [r4, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60e3      	str	r3, [r4, #12]
 8006f52:	e66c      	b.n	8006c2e <_scanf_float+0x82>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0e4      	beq.n	8006f24 <_scanf_float+0x378>
 8006f5a:	9905      	ldr	r1, [sp, #20]
 8006f5c:	230a      	movs	r3, #10
 8006f5e:	462a      	mov	r2, r5
 8006f60:	3101      	adds	r1, #1
 8006f62:	4640      	mov	r0, r8
 8006f64:	f002 fcd4 	bl	8009910 <_strtol_r>
 8006f68:	9b04      	ldr	r3, [sp, #16]
 8006f6a:	9e05      	ldr	r6, [sp, #20]
 8006f6c:	1ac2      	subs	r2, r0, r3
 8006f6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f72:	429e      	cmp	r6, r3
 8006f74:	bf28      	it	cs
 8006f76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f7a:	4912      	ldr	r1, [pc, #72]	; (8006fc4 <_scanf_float+0x418>)
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f8d5 	bl	800712c <siprintf>
 8006f82:	e7cf      	b.n	8006f24 <_scanf_float+0x378>
 8006f84:	f011 0f04 	tst.w	r1, #4
 8006f88:	9903      	ldr	r1, [sp, #12]
 8006f8a:	600a      	str	r2, [r1, #0]
 8006f8c:	d1db      	bne.n	8006f46 <_scanf_float+0x39a>
 8006f8e:	f8d3 8000 	ldr.w	r8, [r3]
 8006f92:	ee10 2a10 	vmov	r2, s0
 8006f96:	ee10 0a10 	vmov	r0, s0
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	f7f9 fdc5 	bl	8000b2c <__aeabi_dcmpun>
 8006fa2:	b128      	cbz	r0, 8006fb0 <_scanf_float+0x404>
 8006fa4:	4808      	ldr	r0, [pc, #32]	; (8006fc8 <_scanf_float+0x41c>)
 8006fa6:	f000 f9ef 	bl	8007388 <nanf>
 8006faa:	ed88 0a00 	vstr	s0, [r8]
 8006fae:	e7cd      	b.n	8006f4c <_scanf_float+0x3a0>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fe18 	bl	8000be8 <__aeabi_d2f>
 8006fb8:	f8c8 0000 	str.w	r0, [r8]
 8006fbc:	e7c6      	b.n	8006f4c <_scanf_float+0x3a0>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	e635      	b.n	8006c2e <_scanf_float+0x82>
 8006fc2:	bf00      	nop
 8006fc4:	0800b416 	.word	0x0800b416
 8006fc8:	0800b7c8 	.word	0x0800b7c8

08006fcc <std>:
 8006fcc:	2300      	movs	r3, #0
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fda:	6083      	str	r3, [r0, #8]
 8006fdc:	8181      	strh	r1, [r0, #12]
 8006fde:	6643      	str	r3, [r0, #100]	; 0x64
 8006fe0:	81c2      	strh	r2, [r0, #14]
 8006fe2:	6183      	str	r3, [r0, #24]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	305c      	adds	r0, #92	; 0x5c
 8006fea:	f000 f930 	bl	800724e <memset>
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <std+0x38>)
 8006ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x3c>)
 8006ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ff6:	4b05      	ldr	r3, [pc, #20]	; (800700c <std+0x40>)
 8006ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <std+0x44>)
 8006ffc:	6224      	str	r4, [r4, #32]
 8006ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8007000:	bd10      	pop	{r4, pc}
 8007002:	bf00      	nop
 8007004:	080071c5 	.word	0x080071c5
 8007008:	080071eb 	.word	0x080071eb
 800700c:	08007223 	.word	0x08007223
 8007010:	08007247 	.word	0x08007247

08007014 <stdio_exit_handler>:
 8007014:	4a02      	ldr	r2, [pc, #8]	; (8007020 <stdio_exit_handler+0xc>)
 8007016:	4903      	ldr	r1, [pc, #12]	; (8007024 <stdio_exit_handler+0x10>)
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <stdio_exit_handler+0x14>)
 800701a:	f000 b869 	b.w	80070f0 <_fwalk_sglue>
 800701e:	bf00      	nop
 8007020:	2000000c 	.word	0x2000000c
 8007024:	0800a311 	.word	0x0800a311
 8007028:	20000018 	.word	0x20000018

0800702c <cleanup_stdio>:
 800702c:	6841      	ldr	r1, [r0, #4]
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <cleanup_stdio+0x34>)
 8007030:	4299      	cmp	r1, r3
 8007032:	b510      	push	{r4, lr}
 8007034:	4604      	mov	r4, r0
 8007036:	d001      	beq.n	800703c <cleanup_stdio+0x10>
 8007038:	f003 f96a 	bl	800a310 <_fflush_r>
 800703c:	68a1      	ldr	r1, [r4, #8]
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <cleanup_stdio+0x38>)
 8007040:	4299      	cmp	r1, r3
 8007042:	d002      	beq.n	800704a <cleanup_stdio+0x1e>
 8007044:	4620      	mov	r0, r4
 8007046:	f003 f963 	bl	800a310 <_fflush_r>
 800704a:	68e1      	ldr	r1, [r4, #12]
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <cleanup_stdio+0x3c>)
 800704e:	4299      	cmp	r1, r3
 8007050:	d004      	beq.n	800705c <cleanup_stdio+0x30>
 8007052:	4620      	mov	r0, r4
 8007054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007058:	f003 b95a 	b.w	800a310 <_fflush_r>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	bf00      	nop
 8007060:	20001020 	.word	0x20001020
 8007064:	20001088 	.word	0x20001088
 8007068:	200010f0 	.word	0x200010f0

0800706c <global_stdio_init.part.0>:
 800706c:	b510      	push	{r4, lr}
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <global_stdio_init.part.0+0x30>)
 8007070:	4c0b      	ldr	r4, [pc, #44]	; (80070a0 <global_stdio_init.part.0+0x34>)
 8007072:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <global_stdio_init.part.0+0x38>)
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	4620      	mov	r0, r4
 8007078:	2200      	movs	r2, #0
 800707a:	2104      	movs	r1, #4
 800707c:	f7ff ffa6 	bl	8006fcc <std>
 8007080:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007084:	2201      	movs	r2, #1
 8007086:	2109      	movs	r1, #9
 8007088:	f7ff ffa0 	bl	8006fcc <std>
 800708c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007090:	2202      	movs	r2, #2
 8007092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007096:	2112      	movs	r1, #18
 8007098:	f7ff bf98 	b.w	8006fcc <std>
 800709c:	20001158 	.word	0x20001158
 80070a0:	20001020 	.word	0x20001020
 80070a4:	08007015 	.word	0x08007015

080070a8 <__sfp_lock_acquire>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__sfp_lock_acquire+0x8>)
 80070aa:	f000 b963 	b.w	8007374 <__retarget_lock_acquire_recursive>
 80070ae:	bf00      	nop
 80070b0:	20001161 	.word	0x20001161

080070b4 <__sfp_lock_release>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__sfp_lock_release+0x8>)
 80070b6:	f000 b95e 	b.w	8007376 <__retarget_lock_release_recursive>
 80070ba:	bf00      	nop
 80070bc:	20001161 	.word	0x20001161

080070c0 <__sinit>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	f7ff fff0 	bl	80070a8 <__sfp_lock_acquire>
 80070c8:	6a23      	ldr	r3, [r4, #32]
 80070ca:	b11b      	cbz	r3, 80070d4 <__sinit+0x14>
 80070cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d0:	f7ff bff0 	b.w	80070b4 <__sfp_lock_release>
 80070d4:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <__sinit+0x28>)
 80070d6:	6223      	str	r3, [r4, #32]
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <__sinit+0x2c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f5      	bne.n	80070cc <__sinit+0xc>
 80070e0:	f7ff ffc4 	bl	800706c <global_stdio_init.part.0>
 80070e4:	e7f2      	b.n	80070cc <__sinit+0xc>
 80070e6:	bf00      	nop
 80070e8:	0800702d 	.word	0x0800702d
 80070ec:	20001158 	.word	0x20001158

080070f0 <_fwalk_sglue>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4607      	mov	r7, r0
 80070f6:	4688      	mov	r8, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	2600      	movs	r6, #0
 80070fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007100:	f1b9 0901 	subs.w	r9, r9, #1
 8007104:	d505      	bpl.n	8007112 <_fwalk_sglue+0x22>
 8007106:	6824      	ldr	r4, [r4, #0]
 8007108:	2c00      	cmp	r4, #0
 800710a:	d1f7      	bne.n	80070fc <_fwalk_sglue+0xc>
 800710c:	4630      	mov	r0, r6
 800710e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007112:	89ab      	ldrh	r3, [r5, #12]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d907      	bls.n	8007128 <_fwalk_sglue+0x38>
 8007118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800711c:	3301      	adds	r3, #1
 800711e:	d003      	beq.n	8007128 <_fwalk_sglue+0x38>
 8007120:	4629      	mov	r1, r5
 8007122:	4638      	mov	r0, r7
 8007124:	47c0      	blx	r8
 8007126:	4306      	orrs	r6, r0
 8007128:	3568      	adds	r5, #104	; 0x68
 800712a:	e7e9      	b.n	8007100 <_fwalk_sglue+0x10>

0800712c <siprintf>:
 800712c:	b40e      	push	{r1, r2, r3}
 800712e:	b500      	push	{lr}
 8007130:	b09c      	sub	sp, #112	; 0x70
 8007132:	ab1d      	add	r3, sp, #116	; 0x74
 8007134:	9002      	str	r0, [sp, #8]
 8007136:	9006      	str	r0, [sp, #24]
 8007138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <siprintf+0x38>)
 800713e:	9107      	str	r1, [sp, #28]
 8007140:	9104      	str	r1, [sp, #16]
 8007142:	4909      	ldr	r1, [pc, #36]	; (8007168 <siprintf+0x3c>)
 8007144:	f853 2b04 	ldr.w	r2, [r3], #4
 8007148:	9105      	str	r1, [sp, #20]
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	a902      	add	r1, sp, #8
 8007150:	f002 fc3a 	bl	80099c8 <_svfiprintf_r>
 8007154:	9b02      	ldr	r3, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	b01c      	add	sp, #112	; 0x70
 800715c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007160:	b003      	add	sp, #12
 8007162:	4770      	bx	lr
 8007164:	20000064 	.word	0x20000064
 8007168:	ffff0208 	.word	0xffff0208

0800716c <siscanf>:
 800716c:	b40e      	push	{r1, r2, r3}
 800716e:	b510      	push	{r4, lr}
 8007170:	b09f      	sub	sp, #124	; 0x7c
 8007172:	ac21      	add	r4, sp, #132	; 0x84
 8007174:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007178:	f854 2b04 	ldr.w	r2, [r4], #4
 800717c:	9201      	str	r2, [sp, #4]
 800717e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007182:	9004      	str	r0, [sp, #16]
 8007184:	9008      	str	r0, [sp, #32]
 8007186:	f7f9 f873 	bl	8000270 <strlen>
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <siscanf+0x50>)
 800718c:	9005      	str	r0, [sp, #20]
 800718e:	9009      	str	r0, [sp, #36]	; 0x24
 8007190:	930d      	str	r3, [sp, #52]	; 0x34
 8007192:	480b      	ldr	r0, [pc, #44]	; (80071c0 <siscanf+0x54>)
 8007194:	9a01      	ldr	r2, [sp, #4]
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	9403      	str	r4, [sp, #12]
 800719a:	2300      	movs	r3, #0
 800719c:	9311      	str	r3, [sp, #68]	; 0x44
 800719e:	9316      	str	r3, [sp, #88]	; 0x58
 80071a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80071a8:	a904      	add	r1, sp, #16
 80071aa:	4623      	mov	r3, r4
 80071ac:	f002 fd64 	bl	8009c78 <__ssvfiscanf_r>
 80071b0:	b01f      	add	sp, #124	; 0x7c
 80071b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b6:	b003      	add	sp, #12
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	20000064 	.word	0x20000064

080071c4 <__sread>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	460c      	mov	r4, r1
 80071c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071cc:	f000 f884 	bl	80072d8 <_read_r>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	bfab      	itete	ge
 80071d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071d6:	89a3      	ldrhlt	r3, [r4, #12]
 80071d8:	181b      	addge	r3, r3, r0
 80071da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071de:	bfac      	ite	ge
 80071e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071e2:	81a3      	strhlt	r3, [r4, #12]
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <__seofread>:
 80071e6:	2000      	movs	r0, #0
 80071e8:	4770      	bx	lr

080071ea <__swrite>:
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	461f      	mov	r7, r3
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	05db      	lsls	r3, r3, #23
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d505      	bpl.n	8007208 <__swrite+0x1e>
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2302      	movs	r3, #2
 8007202:	2200      	movs	r2, #0
 8007204:	f000 f856 	bl	80072b4 <_lseek_r>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	f000 b86d 	b.w	80072fc <_write_r>

08007222 <__sseek>:
 8007222:	b510      	push	{r4, lr}
 8007224:	460c      	mov	r4, r1
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 f843 	bl	80072b4 <_lseek_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	bf15      	itete	ne
 8007234:	6560      	strne	r0, [r4, #84]	; 0x54
 8007236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800723a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800723e:	81a3      	strheq	r3, [r4, #12]
 8007240:	bf18      	it	ne
 8007242:	81a3      	strhne	r3, [r4, #12]
 8007244:	bd10      	pop	{r4, pc}

08007246 <__sclose>:
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 b823 	b.w	8007294 <_close_r>

0800724e <memset>:
 800724e:	4402      	add	r2, r0
 8007250:	4603      	mov	r3, r0
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <memset+0xa>
 8007256:	4770      	bx	lr
 8007258:	f803 1b01 	strb.w	r1, [r3], #1
 800725c:	e7f9      	b.n	8007252 <memset+0x4>

0800725e <strstr>:
 800725e:	780a      	ldrb	r2, [r1, #0]
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	b96a      	cbnz	r2, 8007280 <strstr+0x22>
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	429a      	cmp	r2, r3
 8007268:	d109      	bne.n	800727e <strstr+0x20>
 800726a:	460c      	mov	r4, r1
 800726c:	4605      	mov	r5, r0
 800726e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f6      	beq.n	8007264 <strstr+0x6>
 8007276:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800727a:	429e      	cmp	r6, r3
 800727c:	d0f7      	beq.n	800726e <strstr+0x10>
 800727e:	3001      	adds	r0, #1
 8007280:	7803      	ldrb	r3, [r0, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1ef      	bne.n	8007266 <strstr+0x8>
 8007286:	4618      	mov	r0, r3
 8007288:	e7ec      	b.n	8007264 <strstr+0x6>
	...

0800728c <_localeconv_r>:
 800728c:	4800      	ldr	r0, [pc, #0]	; (8007290 <_localeconv_r+0x4>)
 800728e:	4770      	bx	lr
 8007290:	20000158 	.word	0x20000158

08007294 <_close_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_close_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fa ff41 	bl	8002126 <_close>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_close_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_close_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	2000115c 	.word	0x2000115c

080072b4 <_lseek_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d07      	ldr	r5, [pc, #28]	; (80072d4 <_lseek_r+0x20>)
 80072b8:	4604      	mov	r4, r0
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	602a      	str	r2, [r5, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa ff56 	bl	8002174 <_lseek>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_lseek_r+0x1e>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_lseek_r+0x1e>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	2000115c 	.word	0x2000115c

080072d8 <_read_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_read_r+0x20>)
 80072dc:	4604      	mov	r4, r0
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	2200      	movs	r2, #0
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fa fee4 	bl	80020b4 <_read>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_read_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_read_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	2000115c 	.word	0x2000115c

080072fc <_write_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	; (800731c <_write_r+0x20>)
 8007300:	4604      	mov	r4, r0
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f7fa feef 	bl	80020ee <_write>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_write_r+0x1e>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_write_r+0x1e>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	2000115c 	.word	0x2000115c

08007320 <__errno>:
 8007320:	4b01      	ldr	r3, [pc, #4]	; (8007328 <__errno+0x8>)
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000064 	.word	0x20000064

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4d0d      	ldr	r5, [pc, #52]	; (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	; (8007368 <__libc_init_array+0x3c>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2600      	movs	r6, #0
 8007338:	42a6      	cmp	r6, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4d0b      	ldr	r5, [pc, #44]	; (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	; (8007370 <__libc_init_array+0x44>)
 8007340:	f003 ffe6 	bl	800b310 <_init>
 8007344:	1b64      	subs	r4, r4, r5
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2600      	movs	r6, #0
 800734a:	42a6      	cmp	r6, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f855 3b04 	ldr.w	r3, [r5], #4
 8007354:	4798      	blx	r3
 8007356:	3601      	adds	r6, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f855 3b04 	ldr.w	r3, [r5], #4
 800735e:	4798      	blx	r3
 8007360:	3601      	adds	r6, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	0800b834 	.word	0x0800b834
 8007368:	0800b834 	.word	0x0800b834
 800736c:	0800b834 	.word	0x0800b834
 8007370:	0800b838 	.word	0x0800b838

08007374 <__retarget_lock_acquire_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_release_recursive>:
 8007376:	4770      	bx	lr

08007378 <strcpy>:
 8007378:	4603      	mov	r3, r0
 800737a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737e:	f803 2b01 	strb.w	r2, [r3], #1
 8007382:	2a00      	cmp	r2, #0
 8007384:	d1f9      	bne.n	800737a <strcpy+0x2>
 8007386:	4770      	bx	lr

08007388 <nanf>:
 8007388:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007390 <nanf+0x8>
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	7fc00000 	.word	0x7fc00000

08007394 <quorem>:
 8007394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	6903      	ldr	r3, [r0, #16]
 800739a:	690c      	ldr	r4, [r1, #16]
 800739c:	42a3      	cmp	r3, r4
 800739e:	4607      	mov	r7, r0
 80073a0:	db7e      	blt.n	80074a0 <quorem+0x10c>
 80073a2:	3c01      	subs	r4, #1
 80073a4:	f101 0814 	add.w	r8, r1, #20
 80073a8:	f100 0514 	add.w	r5, r0, #20
 80073ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ba:	3301      	adds	r3, #1
 80073bc:	429a      	cmp	r2, r3
 80073be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80073ca:	d331      	bcc.n	8007430 <quorem+0x9c>
 80073cc:	f04f 0e00 	mov.w	lr, #0
 80073d0:	4640      	mov	r0, r8
 80073d2:	46ac      	mov	ip, r5
 80073d4:	46f2      	mov	sl, lr
 80073d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80073da:	b293      	uxth	r3, r2
 80073dc:	fb06 e303 	mla	r3, r6, r3, lr
 80073e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073e4:	0c1a      	lsrs	r2, r3, #16
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	ebaa 0303 	sub.w	r3, sl, r3
 80073ec:	f8dc a000 	ldr.w	sl, [ip]
 80073f0:	fa13 f38a 	uxtah	r3, r3, sl
 80073f4:	fb06 220e 	mla	r2, r6, lr, r2
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	9b00      	ldr	r3, [sp, #0]
 80073fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007400:	b292      	uxth	r2, r2
 8007402:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007406:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800740a:	f8bd 3000 	ldrh.w	r3, [sp]
 800740e:	4581      	cmp	r9, r0
 8007410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007414:	f84c 3b04 	str.w	r3, [ip], #4
 8007418:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800741c:	d2db      	bcs.n	80073d6 <quorem+0x42>
 800741e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007422:	b92b      	cbnz	r3, 8007430 <quorem+0x9c>
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	3b04      	subs	r3, #4
 8007428:	429d      	cmp	r5, r3
 800742a:	461a      	mov	r2, r3
 800742c:	d32c      	bcc.n	8007488 <quorem+0xf4>
 800742e:	613c      	str	r4, [r7, #16]
 8007430:	4638      	mov	r0, r7
 8007432:	f001 f9f1 	bl	8008818 <__mcmp>
 8007436:	2800      	cmp	r0, #0
 8007438:	db22      	blt.n	8007480 <quorem+0xec>
 800743a:	3601      	adds	r6, #1
 800743c:	4629      	mov	r1, r5
 800743e:	2000      	movs	r0, #0
 8007440:	f858 2b04 	ldr.w	r2, [r8], #4
 8007444:	f8d1 c000 	ldr.w	ip, [r1]
 8007448:	b293      	uxth	r3, r2
 800744a:	1ac3      	subs	r3, r0, r3
 800744c:	0c12      	lsrs	r2, r2, #16
 800744e:	fa13 f38c 	uxtah	r3, r3, ip
 8007452:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007456:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007460:	45c1      	cmp	r9, r8
 8007462:	f841 3b04 	str.w	r3, [r1], #4
 8007466:	ea4f 4022 	mov.w	r0, r2, asr #16
 800746a:	d2e9      	bcs.n	8007440 <quorem+0xac>
 800746c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007474:	b922      	cbnz	r2, 8007480 <quorem+0xec>
 8007476:	3b04      	subs	r3, #4
 8007478:	429d      	cmp	r5, r3
 800747a:	461a      	mov	r2, r3
 800747c:	d30a      	bcc.n	8007494 <quorem+0x100>
 800747e:	613c      	str	r4, [r7, #16]
 8007480:	4630      	mov	r0, r6
 8007482:	b003      	add	sp, #12
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	3b04      	subs	r3, #4
 800748c:	2a00      	cmp	r2, #0
 800748e:	d1ce      	bne.n	800742e <quorem+0x9a>
 8007490:	3c01      	subs	r4, #1
 8007492:	e7c9      	b.n	8007428 <quorem+0x94>
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	3b04      	subs	r3, #4
 8007498:	2a00      	cmp	r2, #0
 800749a:	d1f0      	bne.n	800747e <quorem+0xea>
 800749c:	3c01      	subs	r4, #1
 800749e:	e7eb      	b.n	8007478 <quorem+0xe4>
 80074a0:	2000      	movs	r0, #0
 80074a2:	e7ee      	b.n	8007482 <quorem+0xee>
 80074a4:	0000      	movs	r0, r0
	...

080074a8 <_dtoa_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	ed2d 8b04 	vpush	{d8-d9}
 80074b0:	69c5      	ldr	r5, [r0, #28]
 80074b2:	b093      	sub	sp, #76	; 0x4c
 80074b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074b8:	ec57 6b10 	vmov	r6, r7, d0
 80074bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074c0:	9107      	str	r1, [sp, #28]
 80074c2:	4604      	mov	r4, r0
 80074c4:	920a      	str	r2, [sp, #40]	; 0x28
 80074c6:	930d      	str	r3, [sp, #52]	; 0x34
 80074c8:	b975      	cbnz	r5, 80074e8 <_dtoa_r+0x40>
 80074ca:	2010      	movs	r0, #16
 80074cc:	f000 fe2a 	bl	8008124 <malloc>
 80074d0:	4602      	mov	r2, r0
 80074d2:	61e0      	str	r0, [r4, #28]
 80074d4:	b920      	cbnz	r0, 80074e0 <_dtoa_r+0x38>
 80074d6:	4bae      	ldr	r3, [pc, #696]	; (8007790 <_dtoa_r+0x2e8>)
 80074d8:	21ef      	movs	r1, #239	; 0xef
 80074da:	48ae      	ldr	r0, [pc, #696]	; (8007794 <_dtoa_r+0x2ec>)
 80074dc:	f003 f808 	bl	800a4f0 <__assert_func>
 80074e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074e4:	6005      	str	r5, [r0, #0]
 80074e6:	60c5      	str	r5, [r0, #12]
 80074e8:	69e3      	ldr	r3, [r4, #28]
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	b151      	cbz	r1, 8007504 <_dtoa_r+0x5c>
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	604a      	str	r2, [r1, #4]
 80074f2:	2301      	movs	r3, #1
 80074f4:	4093      	lsls	r3, r2
 80074f6:	608b      	str	r3, [r1, #8]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 ff07 	bl	800830c <_Bfree>
 80074fe:	69e3      	ldr	r3, [r4, #28]
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	1e3b      	subs	r3, r7, #0
 8007506:	bfbb      	ittet	lt
 8007508:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800750c:	9303      	strlt	r3, [sp, #12]
 800750e:	2300      	movge	r3, #0
 8007510:	2201      	movlt	r2, #1
 8007512:	bfac      	ite	ge
 8007514:	f8c8 3000 	strge.w	r3, [r8]
 8007518:	f8c8 2000 	strlt.w	r2, [r8]
 800751c:	4b9e      	ldr	r3, [pc, #632]	; (8007798 <_dtoa_r+0x2f0>)
 800751e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007522:	ea33 0308 	bics.w	r3, r3, r8
 8007526:	d11b      	bne.n	8007560 <_dtoa_r+0xb8>
 8007528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800752a:	f242 730f 	movw	r3, #9999	; 0x270f
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007534:	4333      	orrs	r3, r6
 8007536:	f000 8593 	beq.w	8008060 <_dtoa_r+0xbb8>
 800753a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800753c:	b963      	cbnz	r3, 8007558 <_dtoa_r+0xb0>
 800753e:	4b97      	ldr	r3, [pc, #604]	; (800779c <_dtoa_r+0x2f4>)
 8007540:	e027      	b.n	8007592 <_dtoa_r+0xea>
 8007542:	4b97      	ldr	r3, [pc, #604]	; (80077a0 <_dtoa_r+0x2f8>)
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	9800      	ldr	r0, [sp, #0]
 800754e:	b013      	add	sp, #76	; 0x4c
 8007550:	ecbd 8b04 	vpop	{d8-d9}
 8007554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007558:	4b90      	ldr	r3, [pc, #576]	; (800779c <_dtoa_r+0x2f4>)
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	3303      	adds	r3, #3
 800755e:	e7f3      	b.n	8007548 <_dtoa_r+0xa0>
 8007560:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	ec51 0b17 	vmov	r0, r1, d7
 800756a:	eeb0 8a47 	vmov.f32	s16, s14
 800756e:	eef0 8a67 	vmov.f32	s17, s15
 8007572:	2300      	movs	r3, #0
 8007574:	f7f9 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007578:	4681      	mov	r9, r0
 800757a:	b160      	cbz	r0, 8007596 <_dtoa_r+0xee>
 800757c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800757e:	2301      	movs	r3, #1
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8568 	beq.w	800805a <_dtoa_r+0xbb2>
 800758a:	4b86      	ldr	r3, [pc, #536]	; (80077a4 <_dtoa_r+0x2fc>)
 800758c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	e7da      	b.n	800754c <_dtoa_r+0xa4>
 8007596:	aa10      	add	r2, sp, #64	; 0x40
 8007598:	a911      	add	r1, sp, #68	; 0x44
 800759a:	4620      	mov	r0, r4
 800759c:	eeb0 0a48 	vmov.f32	s0, s16
 80075a0:	eef0 0a68 	vmov.f32	s1, s17
 80075a4:	f001 fa4e 	bl	8008a44 <__d2b>
 80075a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075ac:	4682      	mov	sl, r0
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	d07f      	beq.n	80076b2 <_dtoa_r+0x20a>
 80075b2:	ee18 3a90 	vmov	r3, s17
 80075b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80075be:	ec51 0b18 	vmov	r0, r1, d8
 80075c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80075ce:	4619      	mov	r1, r3
 80075d0:	2200      	movs	r2, #0
 80075d2:	4b75      	ldr	r3, [pc, #468]	; (80077a8 <_dtoa_r+0x300>)
 80075d4:	f7f8 fe58 	bl	8000288 <__aeabi_dsub>
 80075d8:	a367      	add	r3, pc, #412	; (adr r3, 8007778 <_dtoa_r+0x2d0>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f9 f80b 	bl	80005f8 <__aeabi_dmul>
 80075e2:	a367      	add	r3, pc, #412	; (adr r3, 8007780 <_dtoa_r+0x2d8>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fe50 	bl	800028c <__adddf3>
 80075ec:	4606      	mov	r6, r0
 80075ee:	4628      	mov	r0, r5
 80075f0:	460f      	mov	r7, r1
 80075f2:	f7f8 ff97 	bl	8000524 <__aeabi_i2d>
 80075f6:	a364      	add	r3, pc, #400	; (adr r3, 8007788 <_dtoa_r+0x2e0>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 fffc 	bl	80005f8 <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f8 fe40 	bl	800028c <__adddf3>
 800760c:	4606      	mov	r6, r0
 800760e:	460f      	mov	r7, r1
 8007610:	f7f9 faa2 	bl	8000b58 <__aeabi_d2iz>
 8007614:	2200      	movs	r2, #0
 8007616:	4683      	mov	fp, r0
 8007618:	2300      	movs	r3, #0
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	f7f9 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8007622:	b148      	cbz	r0, 8007638 <_dtoa_r+0x190>
 8007624:	4658      	mov	r0, fp
 8007626:	f7f8 ff7d 	bl	8000524 <__aeabi_i2d>
 800762a:	4632      	mov	r2, r6
 800762c:	463b      	mov	r3, r7
 800762e:	f7f9 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007632:	b908      	cbnz	r0, 8007638 <_dtoa_r+0x190>
 8007634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007638:	f1bb 0f16 	cmp.w	fp, #22
 800763c:	d857      	bhi.n	80076ee <_dtoa_r+0x246>
 800763e:	4b5b      	ldr	r3, [pc, #364]	; (80077ac <_dtoa_r+0x304>)
 8007640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	ec51 0b18 	vmov	r0, r1, d8
 800764c:	f7f9 fa46 	bl	8000adc <__aeabi_dcmplt>
 8007650:	2800      	cmp	r0, #0
 8007652:	d04e      	beq.n	80076f2 <_dtoa_r+0x24a>
 8007654:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007658:	2300      	movs	r3, #0
 800765a:	930c      	str	r3, [sp, #48]	; 0x30
 800765c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800765e:	1b5b      	subs	r3, r3, r5
 8007660:	1e5a      	subs	r2, r3, #1
 8007662:	bf45      	ittet	mi
 8007664:	f1c3 0301 	rsbmi	r3, r3, #1
 8007668:	9305      	strmi	r3, [sp, #20]
 800766a:	2300      	movpl	r3, #0
 800766c:	2300      	movmi	r3, #0
 800766e:	9206      	str	r2, [sp, #24]
 8007670:	bf54      	ite	pl
 8007672:	9305      	strpl	r3, [sp, #20]
 8007674:	9306      	strmi	r3, [sp, #24]
 8007676:	f1bb 0f00 	cmp.w	fp, #0
 800767a:	db3c      	blt.n	80076f6 <_dtoa_r+0x24e>
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007682:	445b      	add	r3, fp
 8007684:	9306      	str	r3, [sp, #24]
 8007686:	2300      	movs	r3, #0
 8007688:	9308      	str	r3, [sp, #32]
 800768a:	9b07      	ldr	r3, [sp, #28]
 800768c:	2b09      	cmp	r3, #9
 800768e:	d868      	bhi.n	8007762 <_dtoa_r+0x2ba>
 8007690:	2b05      	cmp	r3, #5
 8007692:	bfc4      	itt	gt
 8007694:	3b04      	subgt	r3, #4
 8007696:	9307      	strgt	r3, [sp, #28]
 8007698:	9b07      	ldr	r3, [sp, #28]
 800769a:	f1a3 0302 	sub.w	r3, r3, #2
 800769e:	bfcc      	ite	gt
 80076a0:	2500      	movgt	r5, #0
 80076a2:	2501      	movle	r5, #1
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	f200 8085 	bhi.w	80077b4 <_dtoa_r+0x30c>
 80076aa:	e8df f003 	tbb	[pc, r3]
 80076ae:	3b2e      	.short	0x3b2e
 80076b0:	5839      	.short	0x5839
 80076b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076b6:	441d      	add	r5, r3
 80076b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076bc:	2b20      	cmp	r3, #32
 80076be:	bfc1      	itttt	gt
 80076c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80076c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80076cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80076d0:	bfd6      	itet	le
 80076d2:	f1c3 0320 	rsble	r3, r3, #32
 80076d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80076da:	fa06 f003 	lslle.w	r0, r6, r3
 80076de:	f7f8 ff11 	bl	8000504 <__aeabi_ui2d>
 80076e2:	2201      	movs	r2, #1
 80076e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80076e8:	3d01      	subs	r5, #1
 80076ea:	920e      	str	r2, [sp, #56]	; 0x38
 80076ec:	e76f      	b.n	80075ce <_dtoa_r+0x126>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7b3      	b.n	800765a <_dtoa_r+0x1b2>
 80076f2:	900c      	str	r0, [sp, #48]	; 0x30
 80076f4:	e7b2      	b.n	800765c <_dtoa_r+0x1b4>
 80076f6:	9b05      	ldr	r3, [sp, #20]
 80076f8:	eba3 030b 	sub.w	r3, r3, fp
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	f1cb 0300 	rsb	r3, fp, #0
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	2300      	movs	r3, #0
 8007706:	930b      	str	r3, [sp, #44]	; 0x2c
 8007708:	e7bf      	b.n	800768a <_dtoa_r+0x1e2>
 800770a:	2300      	movs	r3, #0
 800770c:	9309      	str	r3, [sp, #36]	; 0x24
 800770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	dc52      	bgt.n	80077ba <_dtoa_r+0x312>
 8007714:	2301      	movs	r3, #1
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	461a      	mov	r2, r3
 800771c:	920a      	str	r2, [sp, #40]	; 0x28
 800771e:	e00b      	b.n	8007738 <_dtoa_r+0x290>
 8007720:	2301      	movs	r3, #1
 8007722:	e7f3      	b.n	800770c <_dtoa_r+0x264>
 8007724:	2300      	movs	r3, #0
 8007726:	9309      	str	r3, [sp, #36]	; 0x24
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	445b      	add	r3, fp
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	3301      	adds	r3, #1
 8007730:	2b01      	cmp	r3, #1
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	bfb8      	it	lt
 8007736:	2301      	movlt	r3, #1
 8007738:	69e0      	ldr	r0, [r4, #28]
 800773a:	2100      	movs	r1, #0
 800773c:	2204      	movs	r2, #4
 800773e:	f102 0614 	add.w	r6, r2, #20
 8007742:	429e      	cmp	r6, r3
 8007744:	d93d      	bls.n	80077c2 <_dtoa_r+0x31a>
 8007746:	6041      	str	r1, [r0, #4]
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fd9f 	bl	800828c <_Balloc>
 800774e:	9000      	str	r0, [sp, #0]
 8007750:	2800      	cmp	r0, #0
 8007752:	d139      	bne.n	80077c8 <_dtoa_r+0x320>
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <_dtoa_r+0x308>)
 8007756:	4602      	mov	r2, r0
 8007758:	f240 11af 	movw	r1, #431	; 0x1af
 800775c:	e6bd      	b.n	80074da <_dtoa_r+0x32>
 800775e:	2301      	movs	r3, #1
 8007760:	e7e1      	b.n	8007726 <_dtoa_r+0x27e>
 8007762:	2501      	movs	r5, #1
 8007764:	2300      	movs	r3, #0
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	9509      	str	r5, [sp, #36]	; 0x24
 800776a:	f04f 33ff 	mov.w	r3, #4294967295
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	2200      	movs	r2, #0
 8007774:	2312      	movs	r3, #18
 8007776:	e7d1      	b.n	800771c <_dtoa_r+0x274>
 8007778:	636f4361 	.word	0x636f4361
 800777c:	3fd287a7 	.word	0x3fd287a7
 8007780:	8b60c8b3 	.word	0x8b60c8b3
 8007784:	3fc68a28 	.word	0x3fc68a28
 8007788:	509f79fb 	.word	0x509f79fb
 800778c:	3fd34413 	.word	0x3fd34413
 8007790:	0800b428 	.word	0x0800b428
 8007794:	0800b43f 	.word	0x0800b43f
 8007798:	7ff00000 	.word	0x7ff00000
 800779c:	0800b424 	.word	0x0800b424
 80077a0:	0800b41b 	.word	0x0800b41b
 80077a4:	0800b781 	.word	0x0800b781
 80077a8:	3ff80000 	.word	0x3ff80000
 80077ac:	0800b530 	.word	0x0800b530
 80077b0:	0800b497 	.word	0x0800b497
 80077b4:	2301      	movs	r3, #1
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	e7d7      	b.n	800776a <_dtoa_r+0x2c2>
 80077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	e7ba      	b.n	8007738 <_dtoa_r+0x290>
 80077c2:	3101      	adds	r1, #1
 80077c4:	0052      	lsls	r2, r2, #1
 80077c6:	e7ba      	b.n	800773e <_dtoa_r+0x296>
 80077c8:	69e3      	ldr	r3, [r4, #28]
 80077ca:	9a00      	ldr	r2, [sp, #0]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	2b0e      	cmp	r3, #14
 80077d2:	f200 80a8 	bhi.w	8007926 <_dtoa_r+0x47e>
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	f000 80a5 	beq.w	8007926 <_dtoa_r+0x47e>
 80077dc:	f1bb 0f00 	cmp.w	fp, #0
 80077e0:	dd38      	ble.n	8007854 <_dtoa_r+0x3ac>
 80077e2:	4bc0      	ldr	r3, [pc, #768]	; (8007ae4 <_dtoa_r+0x63c>)
 80077e4:	f00b 020f 	and.w	r2, fp, #15
 80077e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80077f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80077f8:	d019      	beq.n	800782e <_dtoa_r+0x386>
 80077fa:	4bbb      	ldr	r3, [pc, #748]	; (8007ae8 <_dtoa_r+0x640>)
 80077fc:	ec51 0b18 	vmov	r0, r1, d8
 8007800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007804:	f7f9 f822 	bl	800084c <__aeabi_ddiv>
 8007808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800780c:	f008 080f 	and.w	r8, r8, #15
 8007810:	2503      	movs	r5, #3
 8007812:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ae8 <_dtoa_r+0x640>
 8007816:	f1b8 0f00 	cmp.w	r8, #0
 800781a:	d10a      	bne.n	8007832 <_dtoa_r+0x38a>
 800781c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007820:	4632      	mov	r2, r6
 8007822:	463b      	mov	r3, r7
 8007824:	f7f9 f812 	bl	800084c <__aeabi_ddiv>
 8007828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800782c:	e02b      	b.n	8007886 <_dtoa_r+0x3de>
 800782e:	2502      	movs	r5, #2
 8007830:	e7ef      	b.n	8007812 <_dtoa_r+0x36a>
 8007832:	f018 0f01 	tst.w	r8, #1
 8007836:	d008      	beq.n	800784a <_dtoa_r+0x3a2>
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	3501      	adds	r5, #1
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800784e:	f109 0908 	add.w	r9, r9, #8
 8007852:	e7e0      	b.n	8007816 <_dtoa_r+0x36e>
 8007854:	f000 809f 	beq.w	8007996 <_dtoa_r+0x4ee>
 8007858:	f1cb 0600 	rsb	r6, fp, #0
 800785c:	4ba1      	ldr	r3, [pc, #644]	; (8007ae4 <_dtoa_r+0x63c>)
 800785e:	4fa2      	ldr	r7, [pc, #648]	; (8007ae8 <_dtoa_r+0x640>)
 8007860:	f006 020f 	and.w	r2, r6, #15
 8007864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	ec51 0b18 	vmov	r0, r1, d8
 8007870:	f7f8 fec2 	bl	80005f8 <__aeabi_dmul>
 8007874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007878:	1136      	asrs	r6, r6, #4
 800787a:	2300      	movs	r3, #0
 800787c:	2502      	movs	r5, #2
 800787e:	2e00      	cmp	r6, #0
 8007880:	d17e      	bne.n	8007980 <_dtoa_r+0x4d8>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1d0      	bne.n	8007828 <_dtoa_r+0x380>
 8007886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007888:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8084 	beq.w	800799a <_dtoa_r+0x4f2>
 8007892:	4b96      	ldr	r3, [pc, #600]	; (8007aec <_dtoa_r+0x644>)
 8007894:	2200      	movs	r2, #0
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f9 f91f 	bl	8000adc <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d07b      	beq.n	800799a <_dtoa_r+0x4f2>
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d078      	beq.n	800799a <_dtoa_r+0x4f2>
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dd39      	ble.n	8007922 <_dtoa_r+0x47a>
 80078ae:	4b90      	ldr	r3, [pc, #576]	; (8007af0 <_dtoa_r+0x648>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078be:	9e01      	ldr	r6, [sp, #4]
 80078c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80078c4:	3501      	adds	r5, #1
 80078c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7f8 fe2a 	bl	8000524 <__aeabi_i2d>
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	f7f8 fe90 	bl	80005f8 <__aeabi_dmul>
 80078d8:	4b86      	ldr	r3, [pc, #536]	; (8007af4 <_dtoa_r+0x64c>)
 80078da:	2200      	movs	r2, #0
 80078dc:	f7f8 fcd6 	bl	800028c <__adddf3>
 80078e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	d158      	bne.n	80079a0 <_dtoa_r+0x4f8>
 80078ee:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <_dtoa_r+0x650>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078fe:	4680      	mov	r8, r0
 8007900:	4689      	mov	r9, r1
 8007902:	f7f9 f909 	bl	8000b18 <__aeabi_dcmpgt>
 8007906:	2800      	cmp	r0, #0
 8007908:	f040 8296 	bne.w	8007e38 <_dtoa_r+0x990>
 800790c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007910:	4640      	mov	r0, r8
 8007912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007916:	4649      	mov	r1, r9
 8007918:	f7f9 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800791c:	2800      	cmp	r0, #0
 800791e:	f040 8289 	bne.w	8007e34 <_dtoa_r+0x98c>
 8007922:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007928:	2b00      	cmp	r3, #0
 800792a:	f2c0 814e 	blt.w	8007bca <_dtoa_r+0x722>
 800792e:	f1bb 0f0e 	cmp.w	fp, #14
 8007932:	f300 814a 	bgt.w	8007bca <_dtoa_r+0x722>
 8007936:	4b6b      	ldr	r3, [pc, #428]	; (8007ae4 <_dtoa_r+0x63c>)
 8007938:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800793c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	f280 80dc 	bge.w	8007b00 <_dtoa_r+0x658>
 8007948:	9b04      	ldr	r3, [sp, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f300 80d8 	bgt.w	8007b00 <_dtoa_r+0x658>
 8007950:	f040 826f 	bne.w	8007e32 <_dtoa_r+0x98a>
 8007954:	4b68      	ldr	r3, [pc, #416]	; (8007af8 <_dtoa_r+0x650>)
 8007956:	2200      	movs	r2, #0
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fe4c 	bl	80005f8 <__aeabi_dmul>
 8007960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007964:	f7f9 f8ce 	bl	8000b04 <__aeabi_dcmpge>
 8007968:	9e04      	ldr	r6, [sp, #16]
 800796a:	4637      	mov	r7, r6
 800796c:	2800      	cmp	r0, #0
 800796e:	f040 8245 	bne.w	8007dfc <_dtoa_r+0x954>
 8007972:	9d00      	ldr	r5, [sp, #0]
 8007974:	2331      	movs	r3, #49	; 0x31
 8007976:	f805 3b01 	strb.w	r3, [r5], #1
 800797a:	f10b 0b01 	add.w	fp, fp, #1
 800797e:	e241      	b.n	8007e04 <_dtoa_r+0x95c>
 8007980:	07f2      	lsls	r2, r6, #31
 8007982:	d505      	bpl.n	8007990 <_dtoa_r+0x4e8>
 8007984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007988:	f7f8 fe36 	bl	80005f8 <__aeabi_dmul>
 800798c:	3501      	adds	r5, #1
 800798e:	2301      	movs	r3, #1
 8007990:	1076      	asrs	r6, r6, #1
 8007992:	3708      	adds	r7, #8
 8007994:	e773      	b.n	800787e <_dtoa_r+0x3d6>
 8007996:	2502      	movs	r5, #2
 8007998:	e775      	b.n	8007886 <_dtoa_r+0x3de>
 800799a:	9e04      	ldr	r6, [sp, #16]
 800799c:	465f      	mov	r7, fp
 800799e:	e792      	b.n	80078c6 <_dtoa_r+0x41e>
 80079a0:	9900      	ldr	r1, [sp, #0]
 80079a2:	4b50      	ldr	r3, [pc, #320]	; (8007ae4 <_dtoa_r+0x63c>)
 80079a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079a8:	4431      	add	r1, r6
 80079aa:	9102      	str	r1, [sp, #8]
 80079ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ae:	eeb0 9a47 	vmov.f32	s18, s14
 80079b2:	eef0 9a67 	vmov.f32	s19, s15
 80079b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079be:	2900      	cmp	r1, #0
 80079c0:	d044      	beq.n	8007a4c <_dtoa_r+0x5a4>
 80079c2:	494e      	ldr	r1, [pc, #312]	; (8007afc <_dtoa_r+0x654>)
 80079c4:	2000      	movs	r0, #0
 80079c6:	f7f8 ff41 	bl	800084c <__aeabi_ddiv>
 80079ca:	ec53 2b19 	vmov	r2, r3, d9
 80079ce:	f7f8 fc5b 	bl	8000288 <__aeabi_dsub>
 80079d2:	9d00      	ldr	r5, [sp, #0]
 80079d4:	ec41 0b19 	vmov	d9, r0, r1
 80079d8:	4649      	mov	r1, r9
 80079da:	4640      	mov	r0, r8
 80079dc:	f7f9 f8bc 	bl	8000b58 <__aeabi_d2iz>
 80079e0:	4606      	mov	r6, r0
 80079e2:	f7f8 fd9f 	bl	8000524 <__aeabi_i2d>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4640      	mov	r0, r8
 80079ec:	4649      	mov	r1, r9
 80079ee:	f7f8 fc4b 	bl	8000288 <__aeabi_dsub>
 80079f2:	3630      	adds	r6, #48	; 0x30
 80079f4:	f805 6b01 	strb.w	r6, [r5], #1
 80079f8:	ec53 2b19 	vmov	r2, r3, d9
 80079fc:	4680      	mov	r8, r0
 80079fe:	4689      	mov	r9, r1
 8007a00:	f7f9 f86c 	bl	8000adc <__aeabi_dcmplt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d164      	bne.n	8007ad2 <_dtoa_r+0x62a>
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4937      	ldr	r1, [pc, #220]	; (8007aec <_dtoa_r+0x644>)
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f7f8 fc3a 	bl	8000288 <__aeabi_dsub>
 8007a14:	ec53 2b19 	vmov	r2, r3, d9
 8007a18:	f7f9 f860 	bl	8000adc <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 80b6 	bne.w	8007b8e <_dtoa_r+0x6e6>
 8007a22:	9b02      	ldr	r3, [sp, #8]
 8007a24:	429d      	cmp	r5, r3
 8007a26:	f43f af7c 	beq.w	8007922 <_dtoa_r+0x47a>
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <_dtoa_r+0x648>)
 8007a2c:	ec51 0b19 	vmov	r0, r1, d9
 8007a30:	2200      	movs	r2, #0
 8007a32:	f7f8 fde1 	bl	80005f8 <__aeabi_dmul>
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <_dtoa_r+0x648>)
 8007a38:	ec41 0b19 	vmov	d9, r0, r1
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	4649      	mov	r1, r9
 8007a42:	f7f8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	e7c5      	b.n	80079d8 <_dtoa_r+0x530>
 8007a4c:	ec51 0b17 	vmov	r0, r1, d7
 8007a50:	f7f8 fdd2 	bl	80005f8 <__aeabi_dmul>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	9d00      	ldr	r5, [sp, #0]
 8007a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a5a:	ec41 0b19 	vmov	d9, r0, r1
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	f7f9 f879 	bl	8000b58 <__aeabi_d2iz>
 8007a66:	4606      	mov	r6, r0
 8007a68:	f7f8 fd5c 	bl	8000524 <__aeabi_i2d>
 8007a6c:	3630      	adds	r6, #48	; 0x30
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4640      	mov	r0, r8
 8007a74:	4649      	mov	r1, r9
 8007a76:	f7f8 fc07 	bl	8000288 <__aeabi_dsub>
 8007a7a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a7e:	9b02      	ldr	r3, [sp, #8]
 8007a80:	429d      	cmp	r5, r3
 8007a82:	4680      	mov	r8, r0
 8007a84:	4689      	mov	r9, r1
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	d124      	bne.n	8007ad6 <_dtoa_r+0x62e>
 8007a8c:	4b1b      	ldr	r3, [pc, #108]	; (8007afc <_dtoa_r+0x654>)
 8007a8e:	ec51 0b19 	vmov	r0, r1, d9
 8007a92:	f7f8 fbfb 	bl	800028c <__adddf3>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f9 f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d173      	bne.n	8007b8e <_dtoa_r+0x6e6>
 8007aa6:	ec53 2b19 	vmov	r2, r3, d9
 8007aaa:	4914      	ldr	r1, [pc, #80]	; (8007afc <_dtoa_r+0x654>)
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7f8 fbeb 	bl	8000288 <__aeabi_dsub>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f9 f80f 	bl	8000adc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f af2f 	beq.w	8007922 <_dtoa_r+0x47a>
 8007ac4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ac6:	1e6b      	subs	r3, r5, #1
 8007ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ace:	2b30      	cmp	r3, #48	; 0x30
 8007ad0:	d0f8      	beq.n	8007ac4 <_dtoa_r+0x61c>
 8007ad2:	46bb      	mov	fp, r7
 8007ad4:	e04a      	b.n	8007b6c <_dtoa_r+0x6c4>
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <_dtoa_r+0x648>)
 8007ad8:	f7f8 fd8e 	bl	80005f8 <__aeabi_dmul>
 8007adc:	4680      	mov	r8, r0
 8007ade:	4689      	mov	r9, r1
 8007ae0:	e7bd      	b.n	8007a5e <_dtoa_r+0x5b6>
 8007ae2:	bf00      	nop
 8007ae4:	0800b530 	.word	0x0800b530
 8007ae8:	0800b508 	.word	0x0800b508
 8007aec:	3ff00000 	.word	0x3ff00000
 8007af0:	40240000 	.word	0x40240000
 8007af4:	401c0000 	.word	0x401c0000
 8007af8:	40140000 	.word	0x40140000
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b04:	9d00      	ldr	r5, [sp, #0]
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	f7f8 fe9d 	bl	800084c <__aeabi_ddiv>
 8007b12:	f7f9 f821 	bl	8000b58 <__aeabi_d2iz>
 8007b16:	9001      	str	r0, [sp, #4]
 8007b18:	f7f8 fd04 	bl	8000524 <__aeabi_i2d>
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fbac 	bl	8000288 <__aeabi_dsub>
 8007b30:	9e01      	ldr	r6, [sp, #4]
 8007b32:	9f04      	ldr	r7, [sp, #16]
 8007b34:	3630      	adds	r6, #48	; 0x30
 8007b36:	f805 6b01 	strb.w	r6, [r5], #1
 8007b3a:	9e00      	ldr	r6, [sp, #0]
 8007b3c:	1bae      	subs	r6, r5, r6
 8007b3e:	42b7      	cmp	r7, r6
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	d134      	bne.n	8007bb0 <_dtoa_r+0x708>
 8007b46:	f7f8 fba1 	bl	800028c <__adddf3>
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460f      	mov	r7, r1
 8007b52:	f7f8 ffe1 	bl	8000b18 <__aeabi_dcmpgt>
 8007b56:	b9c8      	cbnz	r0, 8007b8c <_dtoa_r+0x6e4>
 8007b58:	4642      	mov	r2, r8
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b64:	b110      	cbz	r0, 8007b6c <_dtoa_r+0x6c4>
 8007b66:	9b01      	ldr	r3, [sp, #4]
 8007b68:	07db      	lsls	r3, r3, #31
 8007b6a:	d40f      	bmi.n	8007b8c <_dtoa_r+0x6e4>
 8007b6c:	4651      	mov	r1, sl
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fbcc 	bl	800830c <_Bfree>
 8007b74:	2300      	movs	r3, #0
 8007b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b78:	702b      	strb	r3, [r5, #0]
 8007b7a:	f10b 0301 	add.w	r3, fp, #1
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f43f ace2 	beq.w	800754c <_dtoa_r+0xa4>
 8007b88:	601d      	str	r5, [r3, #0]
 8007b8a:	e4df      	b.n	800754c <_dtoa_r+0xa4>
 8007b8c:	465f      	mov	r7, fp
 8007b8e:	462b      	mov	r3, r5
 8007b90:	461d      	mov	r5, r3
 8007b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b96:	2a39      	cmp	r2, #57	; 0x39
 8007b98:	d106      	bne.n	8007ba8 <_dtoa_r+0x700>
 8007b9a:	9a00      	ldr	r2, [sp, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d1f7      	bne.n	8007b90 <_dtoa_r+0x6e8>
 8007ba0:	9900      	ldr	r1, [sp, #0]
 8007ba2:	2230      	movs	r2, #48	; 0x30
 8007ba4:	3701      	adds	r7, #1
 8007ba6:	700a      	strb	r2, [r1, #0]
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	3201      	adds	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e790      	b.n	8007ad2 <_dtoa_r+0x62a>
 8007bb0:	4ba3      	ldr	r3, [pc, #652]	; (8007e40 <_dtoa_r+0x998>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	f7f8 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d09e      	beq.n	8007b06 <_dtoa_r+0x65e>
 8007bc8:	e7d0      	b.n	8007b6c <_dtoa_r+0x6c4>
 8007bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	f000 80ca 	beq.w	8007d66 <_dtoa_r+0x8be>
 8007bd2:	9a07      	ldr	r2, [sp, #28]
 8007bd4:	2a01      	cmp	r2, #1
 8007bd6:	f300 80ad 	bgt.w	8007d34 <_dtoa_r+0x88c>
 8007bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	f000 80a5 	beq.w	8007d2c <_dtoa_r+0x884>
 8007be2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007be6:	9e08      	ldr	r6, [sp, #32]
 8007be8:	9d05      	ldr	r5, [sp, #20]
 8007bea:	9a05      	ldr	r2, [sp, #20]
 8007bec:	441a      	add	r2, r3
 8007bee:	9205      	str	r2, [sp, #20]
 8007bf0:	9a06      	ldr	r2, [sp, #24]
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	441a      	add	r2, r3
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	9206      	str	r2, [sp, #24]
 8007bfa:	f000 fc87 	bl	800850c <__i2b>
 8007bfe:	4607      	mov	r7, r0
 8007c00:	b165      	cbz	r5, 8007c1c <_dtoa_r+0x774>
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dd09      	ble.n	8007c1c <_dtoa_r+0x774>
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	9a05      	ldr	r2, [sp, #20]
 8007c0c:	bfa8      	it	ge
 8007c0e:	462b      	movge	r3, r5
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	9205      	str	r2, [sp, #20]
 8007c14:	9a06      	ldr	r2, [sp, #24]
 8007c16:	1aed      	subs	r5, r5, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	9306      	str	r3, [sp, #24]
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	b1f3      	cbz	r3, 8007c5e <_dtoa_r+0x7b6>
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80a3 	beq.w	8007d6e <_dtoa_r+0x8c6>
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	dd10      	ble.n	8007c4e <_dtoa_r+0x7a6>
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	4632      	mov	r2, r6
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 fd2b 	bl	800868c <__pow5mult>
 8007c36:	4652      	mov	r2, sl
 8007c38:	4601      	mov	r1, r0
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fc7b 	bl	8008538 <__multiply>
 8007c42:	4651      	mov	r1, sl
 8007c44:	4680      	mov	r8, r0
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fb60 	bl	800830c <_Bfree>
 8007c4c:	46c2      	mov	sl, r8
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	1b9a      	subs	r2, r3, r6
 8007c52:	d004      	beq.n	8007c5e <_dtoa_r+0x7b6>
 8007c54:	4651      	mov	r1, sl
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 fd18 	bl	800868c <__pow5mult>
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 fc53 	bl	800850c <__i2b>
 8007c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	f340 8081 	ble.w	8007d72 <_dtoa_r+0x8ca>
 8007c70:	461a      	mov	r2, r3
 8007c72:	4601      	mov	r1, r0
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fd09 	bl	800868c <__pow5mult>
 8007c7a:	9b07      	ldr	r3, [sp, #28]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	4606      	mov	r6, r0
 8007c80:	dd7a      	ble.n	8007d78 <_dtoa_r+0x8d0>
 8007c82:	f04f 0800 	mov.w	r8, #0
 8007c86:	6933      	ldr	r3, [r6, #16]
 8007c88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c8c:	6918      	ldr	r0, [r3, #16]
 8007c8e:	f000 fbef 	bl	8008470 <__hi0bits>
 8007c92:	f1c0 0020 	rsb	r0, r0, #32
 8007c96:	9b06      	ldr	r3, [sp, #24]
 8007c98:	4418      	add	r0, r3
 8007c9a:	f010 001f 	ands.w	r0, r0, #31
 8007c9e:	f000 8094 	beq.w	8007dca <_dtoa_r+0x922>
 8007ca2:	f1c0 0320 	rsb	r3, r0, #32
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	f340 8085 	ble.w	8007db6 <_dtoa_r+0x90e>
 8007cac:	9b05      	ldr	r3, [sp, #20]
 8007cae:	f1c0 001c 	rsb	r0, r0, #28
 8007cb2:	4403      	add	r3, r0
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	9b06      	ldr	r3, [sp, #24]
 8007cb8:	4403      	add	r3, r0
 8007cba:	4405      	add	r5, r0
 8007cbc:	9306      	str	r3, [sp, #24]
 8007cbe:	9b05      	ldr	r3, [sp, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dd05      	ble.n	8007cd0 <_dtoa_r+0x828>
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fd39 	bl	8008740 <__lshift>
 8007cce:	4682      	mov	sl, r0
 8007cd0:	9b06      	ldr	r3, [sp, #24]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dd05      	ble.n	8007ce2 <_dtoa_r+0x83a>
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fd30 	bl	8008740 <__lshift>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d072      	beq.n	8007dce <_dtoa_r+0x926>
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4650      	mov	r0, sl
 8007cec:	f000 fd94 	bl	8008818 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	da6c      	bge.n	8007dce <_dtoa_r+0x926>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4651      	mov	r1, sl
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fb28 	bl	8008350 <__multadd>
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d06:	4682      	mov	sl, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 81b0 	beq.w	800806e <_dtoa_r+0xbc6>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4639      	mov	r1, r7
 8007d12:	220a      	movs	r2, #10
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fb1b 	bl	8008350 <__multadd>
 8007d1a:	9b01      	ldr	r3, [sp, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	4607      	mov	r7, r0
 8007d20:	f300 8096 	bgt.w	8007e50 <_dtoa_r+0x9a8>
 8007d24:	9b07      	ldr	r3, [sp, #28]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	dc59      	bgt.n	8007dde <_dtoa_r+0x936>
 8007d2a:	e091      	b.n	8007e50 <_dtoa_r+0x9a8>
 8007d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d32:	e758      	b.n	8007be6 <_dtoa_r+0x73e>
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	1e5e      	subs	r6, r3, #1
 8007d38:	9b08      	ldr	r3, [sp, #32]
 8007d3a:	42b3      	cmp	r3, r6
 8007d3c:	bfbf      	itttt	lt
 8007d3e:	9b08      	ldrlt	r3, [sp, #32]
 8007d40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007d42:	9608      	strlt	r6, [sp, #32]
 8007d44:	1af3      	sublt	r3, r6, r3
 8007d46:	bfb4      	ite	lt
 8007d48:	18d2      	addlt	r2, r2, r3
 8007d4a:	1b9e      	subge	r6, r3, r6
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	bfbc      	itt	lt
 8007d50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007d52:	2600      	movlt	r6, #0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfb7      	itett	lt
 8007d58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007d5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d60:	1a9d      	sublt	r5, r3, r2
 8007d62:	2300      	movlt	r3, #0
 8007d64:	e741      	b.n	8007bea <_dtoa_r+0x742>
 8007d66:	9e08      	ldr	r6, [sp, #32]
 8007d68:	9d05      	ldr	r5, [sp, #20]
 8007d6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d6c:	e748      	b.n	8007c00 <_dtoa_r+0x758>
 8007d6e:	9a08      	ldr	r2, [sp, #32]
 8007d70:	e770      	b.n	8007c54 <_dtoa_r+0x7ac>
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	dc19      	bgt.n	8007dac <_dtoa_r+0x904>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	b9bb      	cbnz	r3, 8007dac <_dtoa_r+0x904>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d82:	b99b      	cbnz	r3, 8007dac <_dtoa_r+0x904>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d8a:	0d1b      	lsrs	r3, r3, #20
 8007d8c:	051b      	lsls	r3, r3, #20
 8007d8e:	b183      	cbz	r3, 8007db2 <_dtoa_r+0x90a>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	3301      	adds	r3, #1
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	9b06      	ldr	r3, [sp, #24]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	f04f 0801 	mov.w	r8, #1
 8007da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f47f af6f 	bne.w	8007c86 <_dtoa_r+0x7de>
 8007da8:	2001      	movs	r0, #1
 8007daa:	e774      	b.n	8007c96 <_dtoa_r+0x7ee>
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	e7f6      	b.n	8007da0 <_dtoa_r+0x8f8>
 8007db2:	4698      	mov	r8, r3
 8007db4:	e7f4      	b.n	8007da0 <_dtoa_r+0x8f8>
 8007db6:	d082      	beq.n	8007cbe <_dtoa_r+0x816>
 8007db8:	9a05      	ldr	r2, [sp, #20]
 8007dba:	331c      	adds	r3, #28
 8007dbc:	441a      	add	r2, r3
 8007dbe:	9205      	str	r2, [sp, #20]
 8007dc0:	9a06      	ldr	r2, [sp, #24]
 8007dc2:	441a      	add	r2, r3
 8007dc4:	441d      	add	r5, r3
 8007dc6:	9206      	str	r2, [sp, #24]
 8007dc8:	e779      	b.n	8007cbe <_dtoa_r+0x816>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	e7f4      	b.n	8007db8 <_dtoa_r+0x910>
 8007dce:	9b04      	ldr	r3, [sp, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dc37      	bgt.n	8007e44 <_dtoa_r+0x99c>
 8007dd4:	9b07      	ldr	r3, [sp, #28]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dd34      	ble.n	8007e44 <_dtoa_r+0x99c>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	b963      	cbnz	r3, 8007dfc <_dtoa_r+0x954>
 8007de2:	4631      	mov	r1, r6
 8007de4:	2205      	movs	r2, #5
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 fab2 	bl	8008350 <__multadd>
 8007dec:	4601      	mov	r1, r0
 8007dee:	4606      	mov	r6, r0
 8007df0:	4650      	mov	r0, sl
 8007df2:	f000 fd11 	bl	8008818 <__mcmp>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f73f adbb 	bgt.w	8007972 <_dtoa_r+0x4ca>
 8007dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfe:	9d00      	ldr	r5, [sp, #0]
 8007e00:	ea6f 0b03 	mvn.w	fp, r3
 8007e04:	f04f 0800 	mov.w	r8, #0
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 fa7e 	bl	800830c <_Bfree>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	f43f aeab 	beq.w	8007b6c <_dtoa_r+0x6c4>
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	d005      	beq.n	8007e28 <_dtoa_r+0x980>
 8007e1c:	45b8      	cmp	r8, r7
 8007e1e:	d003      	beq.n	8007e28 <_dtoa_r+0x980>
 8007e20:	4641      	mov	r1, r8
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fa72 	bl	800830c <_Bfree>
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fa6e 	bl	800830c <_Bfree>
 8007e30:	e69c      	b.n	8007b6c <_dtoa_r+0x6c4>
 8007e32:	2600      	movs	r6, #0
 8007e34:	4637      	mov	r7, r6
 8007e36:	e7e1      	b.n	8007dfc <_dtoa_r+0x954>
 8007e38:	46bb      	mov	fp, r7
 8007e3a:	4637      	mov	r7, r6
 8007e3c:	e599      	b.n	8007972 <_dtoa_r+0x4ca>
 8007e3e:	bf00      	nop
 8007e40:	40240000 	.word	0x40240000
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80c8 	beq.w	8007fdc <_dtoa_r+0xb34>
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	dd05      	ble.n	8007e60 <_dtoa_r+0x9b8>
 8007e54:	4639      	mov	r1, r7
 8007e56:	462a      	mov	r2, r5
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fc71 	bl	8008740 <__lshift>
 8007e5e:	4607      	mov	r7, r0
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d05b      	beq.n	8007f1e <_dtoa_r+0xa76>
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fa0f 	bl	800828c <_Balloc>
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <_dtoa_r+0x9d6>
 8007e72:	4b83      	ldr	r3, [pc, #524]	; (8008080 <_dtoa_r+0xbd8>)
 8007e74:	4602      	mov	r2, r0
 8007e76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e7a:	f7ff bb2e 	b.w	80074da <_dtoa_r+0x32>
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	3202      	adds	r2, #2
 8007e82:	0092      	lsls	r2, r2, #2
 8007e84:	f107 010c 	add.w	r1, r7, #12
 8007e88:	300c      	adds	r0, #12
 8007e8a:	f002 fb19 	bl	800a4c0 <memcpy>
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4629      	mov	r1, r5
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 fc54 	bl	8008740 <__lshift>
 8007e98:	9b00      	ldr	r3, [sp, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	9308      	str	r3, [sp, #32]
 8007ea6:	9b02      	ldr	r3, [sp, #8]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	46b8      	mov	r8, r7
 8007eae:	9306      	str	r3, [sp, #24]
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4650      	mov	r0, sl
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	f7ff fa6a 	bl	8007394 <quorem>
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	9002      	str	r0, [sp, #8]
 8007ec4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f000 fca5 	bl	8008818 <__mcmp>
 8007ece:	463a      	mov	r2, r7
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fcbb 	bl	8008850 <__mdiff>
 8007eda:	68c2      	ldr	r2, [r0, #12]
 8007edc:	4605      	mov	r5, r0
 8007ede:	bb02      	cbnz	r2, 8007f22 <_dtoa_r+0xa7a>
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f000 fc98 	bl	8008818 <__mcmp>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4629      	mov	r1, r5
 8007eec:	4620      	mov	r0, r4
 8007eee:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef0:	f000 fa0c 	bl	800830c <_Bfree>
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef8:	9d04      	ldr	r5, [sp, #16]
 8007efa:	ea43 0102 	orr.w	r1, r3, r2
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	4319      	orrs	r1, r3
 8007f02:	d110      	bne.n	8007f26 <_dtoa_r+0xa7e>
 8007f04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f08:	d029      	beq.n	8007f5e <_dtoa_r+0xab6>
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dd02      	ble.n	8007f16 <_dtoa_r+0xa6e>
 8007f10:	9b02      	ldr	r3, [sp, #8]
 8007f12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	f883 9000 	strb.w	r9, [r3]
 8007f1c:	e774      	b.n	8007e08 <_dtoa_r+0x960>
 8007f1e:	4638      	mov	r0, r7
 8007f20:	e7ba      	b.n	8007e98 <_dtoa_r+0x9f0>
 8007f22:	2201      	movs	r2, #1
 8007f24:	e7e1      	b.n	8007eea <_dtoa_r+0xa42>
 8007f26:	9b05      	ldr	r3, [sp, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db04      	blt.n	8007f36 <_dtoa_r+0xa8e>
 8007f2c:	9907      	ldr	r1, [sp, #28]
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	9906      	ldr	r1, [sp, #24]
 8007f32:	430b      	orrs	r3, r1
 8007f34:	d120      	bne.n	8007f78 <_dtoa_r+0xad0>
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	dded      	ble.n	8007f16 <_dtoa_r+0xa6e>
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fbfe 	bl	8008740 <__lshift>
 8007f44:	4631      	mov	r1, r6
 8007f46:	4682      	mov	sl, r0
 8007f48:	f000 fc66 	bl	8008818 <__mcmp>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	dc03      	bgt.n	8007f58 <_dtoa_r+0xab0>
 8007f50:	d1e1      	bne.n	8007f16 <_dtoa_r+0xa6e>
 8007f52:	f019 0f01 	tst.w	r9, #1
 8007f56:	d0de      	beq.n	8007f16 <_dtoa_r+0xa6e>
 8007f58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f5c:	d1d8      	bne.n	8007f10 <_dtoa_r+0xa68>
 8007f5e:	9a01      	ldr	r2, [sp, #4]
 8007f60:	2339      	movs	r3, #57	; 0x39
 8007f62:	7013      	strb	r3, [r2, #0]
 8007f64:	462b      	mov	r3, r5
 8007f66:	461d      	mov	r5, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f6e:	2a39      	cmp	r2, #57	; 0x39
 8007f70:	d06c      	beq.n	800804c <_dtoa_r+0xba4>
 8007f72:	3201      	adds	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e747      	b.n	8007e08 <_dtoa_r+0x960>
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	dd07      	ble.n	8007f8c <_dtoa_r+0xae4>
 8007f7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f80:	d0ed      	beq.n	8007f5e <_dtoa_r+0xab6>
 8007f82:	9a01      	ldr	r2, [sp, #4]
 8007f84:	f109 0301 	add.w	r3, r9, #1
 8007f88:	7013      	strb	r3, [r2, #0]
 8007f8a:	e73d      	b.n	8007e08 <_dtoa_r+0x960>
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	9a08      	ldr	r2, [sp, #32]
 8007f90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d043      	beq.n	8008020 <_dtoa_r+0xb78>
 8007f98:	4651      	mov	r1, sl
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 f9d6 	bl	8008350 <__multadd>
 8007fa4:	45b8      	cmp	r8, r7
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	f04f 020a 	mov.w	r2, #10
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	d107      	bne.n	8007fc6 <_dtoa_r+0xb1e>
 8007fb6:	f000 f9cb 	bl	8008350 <__multadd>
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	e775      	b.n	8007eb2 <_dtoa_r+0xa0a>
 8007fc6:	f000 f9c3 	bl	8008350 <__multadd>
 8007fca:	4639      	mov	r1, r7
 8007fcc:	4680      	mov	r8, r0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 f9bc 	bl	8008350 <__multadd>
 8007fd8:	4607      	mov	r7, r0
 8007fda:	e7f0      	b.n	8007fbe <_dtoa_r+0xb16>
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	9d00      	ldr	r5, [sp, #0]
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	f7ff f9d5 	bl	8007394 <quorem>
 8007fea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	f805 9b01 	strb.w	r9, [r5], #1
 8007ff4:	1aea      	subs	r2, r5, r3
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	dd07      	ble.n	800800c <_dtoa_r+0xb64>
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	2300      	movs	r3, #0
 8008000:	220a      	movs	r2, #10
 8008002:	4620      	mov	r0, r4
 8008004:	f000 f9a4 	bl	8008350 <__multadd>
 8008008:	4682      	mov	sl, r0
 800800a:	e7ea      	b.n	8007fe2 <_dtoa_r+0xb3a>
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfc8      	it	gt
 8008012:	461d      	movgt	r5, r3
 8008014:	9b00      	ldr	r3, [sp, #0]
 8008016:	bfd8      	it	le
 8008018:	2501      	movle	r5, #1
 800801a:	441d      	add	r5, r3
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	4651      	mov	r1, sl
 8008022:	2201      	movs	r2, #1
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fb8b 	bl	8008740 <__lshift>
 800802a:	4631      	mov	r1, r6
 800802c:	4682      	mov	sl, r0
 800802e:	f000 fbf3 	bl	8008818 <__mcmp>
 8008032:	2800      	cmp	r0, #0
 8008034:	dc96      	bgt.n	8007f64 <_dtoa_r+0xabc>
 8008036:	d102      	bne.n	800803e <_dtoa_r+0xb96>
 8008038:	f019 0f01 	tst.w	r9, #1
 800803c:	d192      	bne.n	8007f64 <_dtoa_r+0xabc>
 800803e:	462b      	mov	r3, r5
 8008040:	461d      	mov	r5, r3
 8008042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008046:	2a30      	cmp	r2, #48	; 0x30
 8008048:	d0fa      	beq.n	8008040 <_dtoa_r+0xb98>
 800804a:	e6dd      	b.n	8007e08 <_dtoa_r+0x960>
 800804c:	9a00      	ldr	r2, [sp, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d189      	bne.n	8007f66 <_dtoa_r+0xabe>
 8008052:	f10b 0b01 	add.w	fp, fp, #1
 8008056:	2331      	movs	r3, #49	; 0x31
 8008058:	e796      	b.n	8007f88 <_dtoa_r+0xae0>
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <_dtoa_r+0xbdc>)
 800805c:	f7ff ba99 	b.w	8007592 <_dtoa_r+0xea>
 8008060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f aa6d 	bne.w	8007542 <_dtoa_r+0x9a>
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <_dtoa_r+0xbe0>)
 800806a:	f7ff ba92 	b.w	8007592 <_dtoa_r+0xea>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dcb5      	bgt.n	8007fe0 <_dtoa_r+0xb38>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	2b02      	cmp	r3, #2
 8008078:	f73f aeb1 	bgt.w	8007dde <_dtoa_r+0x936>
 800807c:	e7b0      	b.n	8007fe0 <_dtoa_r+0xb38>
 800807e:	bf00      	nop
 8008080:	0800b497 	.word	0x0800b497
 8008084:	0800b780 	.word	0x0800b780
 8008088:	0800b41b 	.word	0x0800b41b

0800808c <_free_r>:
 800808c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800808e:	2900      	cmp	r1, #0
 8008090:	d044      	beq.n	800811c <_free_r+0x90>
 8008092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008096:	9001      	str	r0, [sp, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f1a1 0404 	sub.w	r4, r1, #4
 800809e:	bfb8      	it	lt
 80080a0:	18e4      	addlt	r4, r4, r3
 80080a2:	f000 f8e7 	bl	8008274 <__malloc_lock>
 80080a6:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <_free_r+0x94>)
 80080a8:	9801      	ldr	r0, [sp, #4]
 80080aa:	6813      	ldr	r3, [r2, #0]
 80080ac:	b933      	cbnz	r3, 80080bc <_free_r+0x30>
 80080ae:	6063      	str	r3, [r4, #4]
 80080b0:	6014      	str	r4, [r2, #0]
 80080b2:	b003      	add	sp, #12
 80080b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080b8:	f000 b8e2 	b.w	8008280 <__malloc_unlock>
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d908      	bls.n	80080d2 <_free_r+0x46>
 80080c0:	6825      	ldr	r5, [r4, #0]
 80080c2:	1961      	adds	r1, r4, r5
 80080c4:	428b      	cmp	r3, r1
 80080c6:	bf01      	itttt	eq
 80080c8:	6819      	ldreq	r1, [r3, #0]
 80080ca:	685b      	ldreq	r3, [r3, #4]
 80080cc:	1949      	addeq	r1, r1, r5
 80080ce:	6021      	streq	r1, [r4, #0]
 80080d0:	e7ed      	b.n	80080ae <_free_r+0x22>
 80080d2:	461a      	mov	r2, r3
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	b10b      	cbz	r3, 80080dc <_free_r+0x50>
 80080d8:	42a3      	cmp	r3, r4
 80080da:	d9fa      	bls.n	80080d2 <_free_r+0x46>
 80080dc:	6811      	ldr	r1, [r2, #0]
 80080de:	1855      	adds	r5, r2, r1
 80080e0:	42a5      	cmp	r5, r4
 80080e2:	d10b      	bne.n	80080fc <_free_r+0x70>
 80080e4:	6824      	ldr	r4, [r4, #0]
 80080e6:	4421      	add	r1, r4
 80080e8:	1854      	adds	r4, r2, r1
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	6011      	str	r1, [r2, #0]
 80080ee:	d1e0      	bne.n	80080b2 <_free_r+0x26>
 80080f0:	681c      	ldr	r4, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	6053      	str	r3, [r2, #4]
 80080f6:	440c      	add	r4, r1
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	e7da      	b.n	80080b2 <_free_r+0x26>
 80080fc:	d902      	bls.n	8008104 <_free_r+0x78>
 80080fe:	230c      	movs	r3, #12
 8008100:	6003      	str	r3, [r0, #0]
 8008102:	e7d6      	b.n	80080b2 <_free_r+0x26>
 8008104:	6825      	ldr	r5, [r4, #0]
 8008106:	1961      	adds	r1, r4, r5
 8008108:	428b      	cmp	r3, r1
 800810a:	bf04      	itt	eq
 800810c:	6819      	ldreq	r1, [r3, #0]
 800810e:	685b      	ldreq	r3, [r3, #4]
 8008110:	6063      	str	r3, [r4, #4]
 8008112:	bf04      	itt	eq
 8008114:	1949      	addeq	r1, r1, r5
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	6054      	str	r4, [r2, #4]
 800811a:	e7ca      	b.n	80080b2 <_free_r+0x26>
 800811c:	b003      	add	sp, #12
 800811e:	bd30      	pop	{r4, r5, pc}
 8008120:	20001164 	.word	0x20001164

08008124 <malloc>:
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <malloc+0xc>)
 8008126:	4601      	mov	r1, r0
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	f000 b823 	b.w	8008174 <_malloc_r>
 800812e:	bf00      	nop
 8008130:	20000064 	.word	0x20000064

08008134 <sbrk_aligned>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4e0e      	ldr	r6, [pc, #56]	; (8008170 <sbrk_aligned+0x3c>)
 8008138:	460c      	mov	r4, r1
 800813a:	6831      	ldr	r1, [r6, #0]
 800813c:	4605      	mov	r5, r0
 800813e:	b911      	cbnz	r1, 8008146 <sbrk_aligned+0x12>
 8008140:	f002 f9ae 	bl	800a4a0 <_sbrk_r>
 8008144:	6030      	str	r0, [r6, #0]
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f002 f9a9 	bl	800a4a0 <_sbrk_r>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	d00a      	beq.n	8008168 <sbrk_aligned+0x34>
 8008152:	1cc4      	adds	r4, r0, #3
 8008154:	f024 0403 	bic.w	r4, r4, #3
 8008158:	42a0      	cmp	r0, r4
 800815a:	d007      	beq.n	800816c <sbrk_aligned+0x38>
 800815c:	1a21      	subs	r1, r4, r0
 800815e:	4628      	mov	r0, r5
 8008160:	f002 f99e 	bl	800a4a0 <_sbrk_r>
 8008164:	3001      	adds	r0, #1
 8008166:	d101      	bne.n	800816c <sbrk_aligned+0x38>
 8008168:	f04f 34ff 	mov.w	r4, #4294967295
 800816c:	4620      	mov	r0, r4
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	20001168 	.word	0x20001168

08008174 <_malloc_r>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	1ccd      	adds	r5, r1, #3
 800817a:	f025 0503 	bic.w	r5, r5, #3
 800817e:	3508      	adds	r5, #8
 8008180:	2d0c      	cmp	r5, #12
 8008182:	bf38      	it	cc
 8008184:	250c      	movcc	r5, #12
 8008186:	2d00      	cmp	r5, #0
 8008188:	4607      	mov	r7, r0
 800818a:	db01      	blt.n	8008190 <_malloc_r+0x1c>
 800818c:	42a9      	cmp	r1, r5
 800818e:	d905      	bls.n	800819c <_malloc_r+0x28>
 8008190:	230c      	movs	r3, #12
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	2600      	movs	r6, #0
 8008196:	4630      	mov	r0, r6
 8008198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008270 <_malloc_r+0xfc>
 80081a0:	f000 f868 	bl	8008274 <__malloc_lock>
 80081a4:	f8d8 3000 	ldr.w	r3, [r8]
 80081a8:	461c      	mov	r4, r3
 80081aa:	bb5c      	cbnz	r4, 8008204 <_malloc_r+0x90>
 80081ac:	4629      	mov	r1, r5
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7ff ffc0 	bl	8008134 <sbrk_aligned>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	4604      	mov	r4, r0
 80081b8:	d155      	bne.n	8008266 <_malloc_r+0xf2>
 80081ba:	f8d8 4000 	ldr.w	r4, [r8]
 80081be:	4626      	mov	r6, r4
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	d145      	bne.n	8008250 <_malloc_r+0xdc>
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	d048      	beq.n	800825a <_malloc_r+0xe6>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	4631      	mov	r1, r6
 80081cc:	4638      	mov	r0, r7
 80081ce:	eb04 0903 	add.w	r9, r4, r3
 80081d2:	f002 f965 	bl	800a4a0 <_sbrk_r>
 80081d6:	4581      	cmp	r9, r0
 80081d8:	d13f      	bne.n	800825a <_malloc_r+0xe6>
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	1a6d      	subs	r5, r5, r1
 80081de:	4629      	mov	r1, r5
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ffa7 	bl	8008134 <sbrk_aligned>
 80081e6:	3001      	adds	r0, #1
 80081e8:	d037      	beq.n	800825a <_malloc_r+0xe6>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	442b      	add	r3, r5
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	f8d8 3000 	ldr.w	r3, [r8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d038      	beq.n	800826a <_malloc_r+0xf6>
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	42a2      	cmp	r2, r4
 80081fc:	d12b      	bne.n	8008256 <_malloc_r+0xe2>
 80081fe:	2200      	movs	r2, #0
 8008200:	605a      	str	r2, [r3, #4]
 8008202:	e00f      	b.n	8008224 <_malloc_r+0xb0>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	1b52      	subs	r2, r2, r5
 8008208:	d41f      	bmi.n	800824a <_malloc_r+0xd6>
 800820a:	2a0b      	cmp	r2, #11
 800820c:	d917      	bls.n	800823e <_malloc_r+0xca>
 800820e:	1961      	adds	r1, r4, r5
 8008210:	42a3      	cmp	r3, r4
 8008212:	6025      	str	r5, [r4, #0]
 8008214:	bf18      	it	ne
 8008216:	6059      	strne	r1, [r3, #4]
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	bf08      	it	eq
 800821c:	f8c8 1000 	streq.w	r1, [r8]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4638      	mov	r0, r7
 8008226:	f104 060b 	add.w	r6, r4, #11
 800822a:	f000 f829 	bl	8008280 <__malloc_unlock>
 800822e:	f026 0607 	bic.w	r6, r6, #7
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	1af2      	subs	r2, r6, r3
 8008236:	d0ae      	beq.n	8008196 <_malloc_r+0x22>
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	50a3      	str	r3, [r4, r2]
 800823c:	e7ab      	b.n	8008196 <_malloc_r+0x22>
 800823e:	42a3      	cmp	r3, r4
 8008240:	6862      	ldr	r2, [r4, #4]
 8008242:	d1dd      	bne.n	8008200 <_malloc_r+0x8c>
 8008244:	f8c8 2000 	str.w	r2, [r8]
 8008248:	e7ec      	b.n	8008224 <_malloc_r+0xb0>
 800824a:	4623      	mov	r3, r4
 800824c:	6864      	ldr	r4, [r4, #4]
 800824e:	e7ac      	b.n	80081aa <_malloc_r+0x36>
 8008250:	4634      	mov	r4, r6
 8008252:	6876      	ldr	r6, [r6, #4]
 8008254:	e7b4      	b.n	80081c0 <_malloc_r+0x4c>
 8008256:	4613      	mov	r3, r2
 8008258:	e7cc      	b.n	80081f4 <_malloc_r+0x80>
 800825a:	230c      	movs	r3, #12
 800825c:	603b      	str	r3, [r7, #0]
 800825e:	4638      	mov	r0, r7
 8008260:	f000 f80e 	bl	8008280 <__malloc_unlock>
 8008264:	e797      	b.n	8008196 <_malloc_r+0x22>
 8008266:	6025      	str	r5, [r4, #0]
 8008268:	e7dc      	b.n	8008224 <_malloc_r+0xb0>
 800826a:	605b      	str	r3, [r3, #4]
 800826c:	deff      	udf	#255	; 0xff
 800826e:	bf00      	nop
 8008270:	20001164 	.word	0x20001164

08008274 <__malloc_lock>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__malloc_lock+0x8>)
 8008276:	f7ff b87d 	b.w	8007374 <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20001160 	.word	0x20001160

08008280 <__malloc_unlock>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__malloc_unlock+0x8>)
 8008282:	f7ff b878 	b.w	8007376 <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20001160 	.word	0x20001160

0800828c <_Balloc>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	69c6      	ldr	r6, [r0, #28]
 8008290:	4604      	mov	r4, r0
 8008292:	460d      	mov	r5, r1
 8008294:	b976      	cbnz	r6, 80082b4 <_Balloc+0x28>
 8008296:	2010      	movs	r0, #16
 8008298:	f7ff ff44 	bl	8008124 <malloc>
 800829c:	4602      	mov	r2, r0
 800829e:	61e0      	str	r0, [r4, #28]
 80082a0:	b920      	cbnz	r0, 80082ac <_Balloc+0x20>
 80082a2:	4b18      	ldr	r3, [pc, #96]	; (8008304 <_Balloc+0x78>)
 80082a4:	4818      	ldr	r0, [pc, #96]	; (8008308 <_Balloc+0x7c>)
 80082a6:	216b      	movs	r1, #107	; 0x6b
 80082a8:	f002 f922 	bl	800a4f0 <__assert_func>
 80082ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082b0:	6006      	str	r6, [r0, #0]
 80082b2:	60c6      	str	r6, [r0, #12]
 80082b4:	69e6      	ldr	r6, [r4, #28]
 80082b6:	68f3      	ldr	r3, [r6, #12]
 80082b8:	b183      	cbz	r3, 80082dc <_Balloc+0x50>
 80082ba:	69e3      	ldr	r3, [r4, #28]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082c2:	b9b8      	cbnz	r0, 80082f4 <_Balloc+0x68>
 80082c4:	2101      	movs	r1, #1
 80082c6:	fa01 f605 	lsl.w	r6, r1, r5
 80082ca:	1d72      	adds	r2, r6, #5
 80082cc:	0092      	lsls	r2, r2, #2
 80082ce:	4620      	mov	r0, r4
 80082d0:	f002 f92c 	bl	800a52c <_calloc_r>
 80082d4:	b160      	cbz	r0, 80082f0 <_Balloc+0x64>
 80082d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082da:	e00e      	b.n	80082fa <_Balloc+0x6e>
 80082dc:	2221      	movs	r2, #33	; 0x21
 80082de:	2104      	movs	r1, #4
 80082e0:	4620      	mov	r0, r4
 80082e2:	f002 f923 	bl	800a52c <_calloc_r>
 80082e6:	69e3      	ldr	r3, [r4, #28]
 80082e8:	60f0      	str	r0, [r6, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e4      	bne.n	80082ba <_Balloc+0x2e>
 80082f0:	2000      	movs	r0, #0
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	6802      	ldr	r2, [r0, #0]
 80082f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082fa:	2300      	movs	r3, #0
 80082fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008300:	e7f7      	b.n	80082f2 <_Balloc+0x66>
 8008302:	bf00      	nop
 8008304:	0800b428 	.word	0x0800b428
 8008308:	0800b4a8 	.word	0x0800b4a8

0800830c <_Bfree>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	69c6      	ldr	r6, [r0, #28]
 8008310:	4605      	mov	r5, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b976      	cbnz	r6, 8008334 <_Bfree+0x28>
 8008316:	2010      	movs	r0, #16
 8008318:	f7ff ff04 	bl	8008124 <malloc>
 800831c:	4602      	mov	r2, r0
 800831e:	61e8      	str	r0, [r5, #28]
 8008320:	b920      	cbnz	r0, 800832c <_Bfree+0x20>
 8008322:	4b09      	ldr	r3, [pc, #36]	; (8008348 <_Bfree+0x3c>)
 8008324:	4809      	ldr	r0, [pc, #36]	; (800834c <_Bfree+0x40>)
 8008326:	218f      	movs	r1, #143	; 0x8f
 8008328:	f002 f8e2 	bl	800a4f0 <__assert_func>
 800832c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008330:	6006      	str	r6, [r0, #0]
 8008332:	60c6      	str	r6, [r0, #12]
 8008334:	b13c      	cbz	r4, 8008346 <_Bfree+0x3a>
 8008336:	69eb      	ldr	r3, [r5, #28]
 8008338:	6862      	ldr	r2, [r4, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008340:	6021      	str	r1, [r4, #0]
 8008342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	0800b428 	.word	0x0800b428
 800834c:	0800b4a8 	.word	0x0800b4a8

08008350 <__multadd>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	690d      	ldr	r5, [r1, #16]
 8008356:	4607      	mov	r7, r0
 8008358:	460c      	mov	r4, r1
 800835a:	461e      	mov	r6, r3
 800835c:	f101 0c14 	add.w	ip, r1, #20
 8008360:	2000      	movs	r0, #0
 8008362:	f8dc 3000 	ldr.w	r3, [ip]
 8008366:	b299      	uxth	r1, r3
 8008368:	fb02 6101 	mla	r1, r2, r1, r6
 800836c:	0c1e      	lsrs	r6, r3, #16
 800836e:	0c0b      	lsrs	r3, r1, #16
 8008370:	fb02 3306 	mla	r3, r2, r6, r3
 8008374:	b289      	uxth	r1, r1
 8008376:	3001      	adds	r0, #1
 8008378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800837c:	4285      	cmp	r5, r0
 800837e:	f84c 1b04 	str.w	r1, [ip], #4
 8008382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008386:	dcec      	bgt.n	8008362 <__multadd+0x12>
 8008388:	b30e      	cbz	r6, 80083ce <__multadd+0x7e>
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	42ab      	cmp	r3, r5
 800838e:	dc19      	bgt.n	80083c4 <__multadd+0x74>
 8008390:	6861      	ldr	r1, [r4, #4]
 8008392:	4638      	mov	r0, r7
 8008394:	3101      	adds	r1, #1
 8008396:	f7ff ff79 	bl	800828c <_Balloc>
 800839a:	4680      	mov	r8, r0
 800839c:	b928      	cbnz	r0, 80083aa <__multadd+0x5a>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <__multadd+0x84>)
 80083a2:	480d      	ldr	r0, [pc, #52]	; (80083d8 <__multadd+0x88>)
 80083a4:	21ba      	movs	r1, #186	; 0xba
 80083a6:	f002 f8a3 	bl	800a4f0 <__assert_func>
 80083aa:	6922      	ldr	r2, [r4, #16]
 80083ac:	3202      	adds	r2, #2
 80083ae:	f104 010c 	add.w	r1, r4, #12
 80083b2:	0092      	lsls	r2, r2, #2
 80083b4:	300c      	adds	r0, #12
 80083b6:	f002 f883 	bl	800a4c0 <memcpy>
 80083ba:	4621      	mov	r1, r4
 80083bc:	4638      	mov	r0, r7
 80083be:	f7ff ffa5 	bl	800830c <_Bfree>
 80083c2:	4644      	mov	r4, r8
 80083c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083c8:	3501      	adds	r5, #1
 80083ca:	615e      	str	r6, [r3, #20]
 80083cc:	6125      	str	r5, [r4, #16]
 80083ce:	4620      	mov	r0, r4
 80083d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d4:	0800b497 	.word	0x0800b497
 80083d8:	0800b4a8 	.word	0x0800b4a8

080083dc <__s2b>:
 80083dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e0:	460c      	mov	r4, r1
 80083e2:	4615      	mov	r5, r2
 80083e4:	461f      	mov	r7, r3
 80083e6:	2209      	movs	r2, #9
 80083e8:	3308      	adds	r3, #8
 80083ea:	4606      	mov	r6, r0
 80083ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80083f0:	2100      	movs	r1, #0
 80083f2:	2201      	movs	r2, #1
 80083f4:	429a      	cmp	r2, r3
 80083f6:	db09      	blt.n	800840c <__s2b+0x30>
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff ff47 	bl	800828c <_Balloc>
 80083fe:	b940      	cbnz	r0, 8008412 <__s2b+0x36>
 8008400:	4602      	mov	r2, r0
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <__s2b+0x8c>)
 8008404:	4819      	ldr	r0, [pc, #100]	; (800846c <__s2b+0x90>)
 8008406:	21d3      	movs	r1, #211	; 0xd3
 8008408:	f002 f872 	bl	800a4f0 <__assert_func>
 800840c:	0052      	lsls	r2, r2, #1
 800840e:	3101      	adds	r1, #1
 8008410:	e7f0      	b.n	80083f4 <__s2b+0x18>
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	6143      	str	r3, [r0, #20]
 8008416:	2d09      	cmp	r5, #9
 8008418:	f04f 0301 	mov.w	r3, #1
 800841c:	6103      	str	r3, [r0, #16]
 800841e:	dd16      	ble.n	800844e <__s2b+0x72>
 8008420:	f104 0909 	add.w	r9, r4, #9
 8008424:	46c8      	mov	r8, r9
 8008426:	442c      	add	r4, r5
 8008428:	f818 3b01 	ldrb.w	r3, [r8], #1
 800842c:	4601      	mov	r1, r0
 800842e:	3b30      	subs	r3, #48	; 0x30
 8008430:	220a      	movs	r2, #10
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ff8c 	bl	8008350 <__multadd>
 8008438:	45a0      	cmp	r8, r4
 800843a:	d1f5      	bne.n	8008428 <__s2b+0x4c>
 800843c:	f1a5 0408 	sub.w	r4, r5, #8
 8008440:	444c      	add	r4, r9
 8008442:	1b2d      	subs	r5, r5, r4
 8008444:	1963      	adds	r3, r4, r5
 8008446:	42bb      	cmp	r3, r7
 8008448:	db04      	blt.n	8008454 <__s2b+0x78>
 800844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844e:	340a      	adds	r4, #10
 8008450:	2509      	movs	r5, #9
 8008452:	e7f6      	b.n	8008442 <__s2b+0x66>
 8008454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008458:	4601      	mov	r1, r0
 800845a:	3b30      	subs	r3, #48	; 0x30
 800845c:	220a      	movs	r2, #10
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ff76 	bl	8008350 <__multadd>
 8008464:	e7ee      	b.n	8008444 <__s2b+0x68>
 8008466:	bf00      	nop
 8008468:	0800b497 	.word	0x0800b497
 800846c:	0800b4a8 	.word	0x0800b4a8

08008470 <__hi0bits>:
 8008470:	0c03      	lsrs	r3, r0, #16
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	b9d3      	cbnz	r3, 80084ac <__hi0bits+0x3c>
 8008476:	0400      	lsls	r0, r0, #16
 8008478:	2310      	movs	r3, #16
 800847a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800847e:	bf04      	itt	eq
 8008480:	0200      	lsleq	r0, r0, #8
 8008482:	3308      	addeq	r3, #8
 8008484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008488:	bf04      	itt	eq
 800848a:	0100      	lsleq	r0, r0, #4
 800848c:	3304      	addeq	r3, #4
 800848e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008492:	bf04      	itt	eq
 8008494:	0080      	lsleq	r0, r0, #2
 8008496:	3302      	addeq	r3, #2
 8008498:	2800      	cmp	r0, #0
 800849a:	db05      	blt.n	80084a8 <__hi0bits+0x38>
 800849c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084a0:	f103 0301 	add.w	r3, r3, #1
 80084a4:	bf08      	it	eq
 80084a6:	2320      	moveq	r3, #32
 80084a8:	4618      	mov	r0, r3
 80084aa:	4770      	bx	lr
 80084ac:	2300      	movs	r3, #0
 80084ae:	e7e4      	b.n	800847a <__hi0bits+0xa>

080084b0 <__lo0bits>:
 80084b0:	6803      	ldr	r3, [r0, #0]
 80084b2:	f013 0207 	ands.w	r2, r3, #7
 80084b6:	d00c      	beq.n	80084d2 <__lo0bits+0x22>
 80084b8:	07d9      	lsls	r1, r3, #31
 80084ba:	d422      	bmi.n	8008502 <__lo0bits+0x52>
 80084bc:	079a      	lsls	r2, r3, #30
 80084be:	bf49      	itett	mi
 80084c0:	085b      	lsrmi	r3, r3, #1
 80084c2:	089b      	lsrpl	r3, r3, #2
 80084c4:	6003      	strmi	r3, [r0, #0]
 80084c6:	2201      	movmi	r2, #1
 80084c8:	bf5c      	itt	pl
 80084ca:	6003      	strpl	r3, [r0, #0]
 80084cc:	2202      	movpl	r2, #2
 80084ce:	4610      	mov	r0, r2
 80084d0:	4770      	bx	lr
 80084d2:	b299      	uxth	r1, r3
 80084d4:	b909      	cbnz	r1, 80084da <__lo0bits+0x2a>
 80084d6:	0c1b      	lsrs	r3, r3, #16
 80084d8:	2210      	movs	r2, #16
 80084da:	b2d9      	uxtb	r1, r3
 80084dc:	b909      	cbnz	r1, 80084e2 <__lo0bits+0x32>
 80084de:	3208      	adds	r2, #8
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	0719      	lsls	r1, r3, #28
 80084e4:	bf04      	itt	eq
 80084e6:	091b      	lsreq	r3, r3, #4
 80084e8:	3204      	addeq	r2, #4
 80084ea:	0799      	lsls	r1, r3, #30
 80084ec:	bf04      	itt	eq
 80084ee:	089b      	lsreq	r3, r3, #2
 80084f0:	3202      	addeq	r2, #2
 80084f2:	07d9      	lsls	r1, r3, #31
 80084f4:	d403      	bmi.n	80084fe <__lo0bits+0x4e>
 80084f6:	085b      	lsrs	r3, r3, #1
 80084f8:	f102 0201 	add.w	r2, r2, #1
 80084fc:	d003      	beq.n	8008506 <__lo0bits+0x56>
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	e7e5      	b.n	80084ce <__lo0bits+0x1e>
 8008502:	2200      	movs	r2, #0
 8008504:	e7e3      	b.n	80084ce <__lo0bits+0x1e>
 8008506:	2220      	movs	r2, #32
 8008508:	e7e1      	b.n	80084ce <__lo0bits+0x1e>
	...

0800850c <__i2b>:
 800850c:	b510      	push	{r4, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	2101      	movs	r1, #1
 8008512:	f7ff febb 	bl	800828c <_Balloc>
 8008516:	4602      	mov	r2, r0
 8008518:	b928      	cbnz	r0, 8008526 <__i2b+0x1a>
 800851a:	4b05      	ldr	r3, [pc, #20]	; (8008530 <__i2b+0x24>)
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <__i2b+0x28>)
 800851e:	f240 1145 	movw	r1, #325	; 0x145
 8008522:	f001 ffe5 	bl	800a4f0 <__assert_func>
 8008526:	2301      	movs	r3, #1
 8008528:	6144      	str	r4, [r0, #20]
 800852a:	6103      	str	r3, [r0, #16]
 800852c:	bd10      	pop	{r4, pc}
 800852e:	bf00      	nop
 8008530:	0800b497 	.word	0x0800b497
 8008534:	0800b4a8 	.word	0x0800b4a8

08008538 <__multiply>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4691      	mov	r9, r2
 800853e:	690a      	ldr	r2, [r1, #16]
 8008540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008544:	429a      	cmp	r2, r3
 8008546:	bfb8      	it	lt
 8008548:	460b      	movlt	r3, r1
 800854a:	460c      	mov	r4, r1
 800854c:	bfbc      	itt	lt
 800854e:	464c      	movlt	r4, r9
 8008550:	4699      	movlt	r9, r3
 8008552:	6927      	ldr	r7, [r4, #16]
 8008554:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	6861      	ldr	r1, [r4, #4]
 800855c:	eb07 060a 	add.w	r6, r7, sl
 8008560:	42b3      	cmp	r3, r6
 8008562:	b085      	sub	sp, #20
 8008564:	bfb8      	it	lt
 8008566:	3101      	addlt	r1, #1
 8008568:	f7ff fe90 	bl	800828c <_Balloc>
 800856c:	b930      	cbnz	r0, 800857c <__multiply+0x44>
 800856e:	4602      	mov	r2, r0
 8008570:	4b44      	ldr	r3, [pc, #272]	; (8008684 <__multiply+0x14c>)
 8008572:	4845      	ldr	r0, [pc, #276]	; (8008688 <__multiply+0x150>)
 8008574:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008578:	f001 ffba 	bl	800a4f0 <__assert_func>
 800857c:	f100 0514 	add.w	r5, r0, #20
 8008580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008584:	462b      	mov	r3, r5
 8008586:	2200      	movs	r2, #0
 8008588:	4543      	cmp	r3, r8
 800858a:	d321      	bcc.n	80085d0 <__multiply+0x98>
 800858c:	f104 0314 	add.w	r3, r4, #20
 8008590:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008594:	f109 0314 	add.w	r3, r9, #20
 8008598:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800859c:	9202      	str	r2, [sp, #8]
 800859e:	1b3a      	subs	r2, r7, r4
 80085a0:	3a15      	subs	r2, #21
 80085a2:	f022 0203 	bic.w	r2, r2, #3
 80085a6:	3204      	adds	r2, #4
 80085a8:	f104 0115 	add.w	r1, r4, #21
 80085ac:	428f      	cmp	r7, r1
 80085ae:	bf38      	it	cc
 80085b0:	2204      	movcc	r2, #4
 80085b2:	9201      	str	r2, [sp, #4]
 80085b4:	9a02      	ldr	r2, [sp, #8]
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d80c      	bhi.n	80085d6 <__multiply+0x9e>
 80085bc:	2e00      	cmp	r6, #0
 80085be:	dd03      	ble.n	80085c8 <__multiply+0x90>
 80085c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d05b      	beq.n	8008680 <__multiply+0x148>
 80085c8:	6106      	str	r6, [r0, #16]
 80085ca:	b005      	add	sp, #20
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	f843 2b04 	str.w	r2, [r3], #4
 80085d4:	e7d8      	b.n	8008588 <__multiply+0x50>
 80085d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80085da:	f1ba 0f00 	cmp.w	sl, #0
 80085de:	d024      	beq.n	800862a <__multiply+0xf2>
 80085e0:	f104 0e14 	add.w	lr, r4, #20
 80085e4:	46a9      	mov	r9, r5
 80085e6:	f04f 0c00 	mov.w	ip, #0
 80085ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085ee:	f8d9 1000 	ldr.w	r1, [r9]
 80085f2:	fa1f fb82 	uxth.w	fp, r2
 80085f6:	b289      	uxth	r1, r1
 80085f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80085fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008600:	f8d9 2000 	ldr.w	r2, [r9]
 8008604:	4461      	add	r1, ip
 8008606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800860a:	fb0a c20b 	mla	r2, sl, fp, ip
 800860e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008612:	b289      	uxth	r1, r1
 8008614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008618:	4577      	cmp	r7, lr
 800861a:	f849 1b04 	str.w	r1, [r9], #4
 800861e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008622:	d8e2      	bhi.n	80085ea <__multiply+0xb2>
 8008624:	9a01      	ldr	r2, [sp, #4]
 8008626:	f845 c002 	str.w	ip, [r5, r2]
 800862a:	9a03      	ldr	r2, [sp, #12]
 800862c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008630:	3304      	adds	r3, #4
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	d021      	beq.n	800867c <__multiply+0x144>
 8008638:	6829      	ldr	r1, [r5, #0]
 800863a:	f104 0c14 	add.w	ip, r4, #20
 800863e:	46ae      	mov	lr, r5
 8008640:	f04f 0a00 	mov.w	sl, #0
 8008644:	f8bc b000 	ldrh.w	fp, [ip]
 8008648:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800864c:	fb09 220b 	mla	r2, r9, fp, r2
 8008650:	4452      	add	r2, sl
 8008652:	b289      	uxth	r1, r1
 8008654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008658:	f84e 1b04 	str.w	r1, [lr], #4
 800865c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008664:	f8be 1000 	ldrh.w	r1, [lr]
 8008668:	fb09 110a 	mla	r1, r9, sl, r1
 800866c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008670:	4567      	cmp	r7, ip
 8008672:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008676:	d8e5      	bhi.n	8008644 <__multiply+0x10c>
 8008678:	9a01      	ldr	r2, [sp, #4]
 800867a:	50a9      	str	r1, [r5, r2]
 800867c:	3504      	adds	r5, #4
 800867e:	e799      	b.n	80085b4 <__multiply+0x7c>
 8008680:	3e01      	subs	r6, #1
 8008682:	e79b      	b.n	80085bc <__multiply+0x84>
 8008684:	0800b497 	.word	0x0800b497
 8008688:	0800b4a8 	.word	0x0800b4a8

0800868c <__pow5mult>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	4615      	mov	r5, r2
 8008692:	f012 0203 	ands.w	r2, r2, #3
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	d007      	beq.n	80086ac <__pow5mult+0x20>
 800869c:	4c25      	ldr	r4, [pc, #148]	; (8008734 <__pow5mult+0xa8>)
 800869e:	3a01      	subs	r2, #1
 80086a0:	2300      	movs	r3, #0
 80086a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086a6:	f7ff fe53 	bl	8008350 <__multadd>
 80086aa:	4607      	mov	r7, r0
 80086ac:	10ad      	asrs	r5, r5, #2
 80086ae:	d03d      	beq.n	800872c <__pow5mult+0xa0>
 80086b0:	69f4      	ldr	r4, [r6, #28]
 80086b2:	b97c      	cbnz	r4, 80086d4 <__pow5mult+0x48>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f7ff fd35 	bl	8008124 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	61f0      	str	r0, [r6, #28]
 80086be:	b928      	cbnz	r0, 80086cc <__pow5mult+0x40>
 80086c0:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <__pow5mult+0xac>)
 80086c2:	481e      	ldr	r0, [pc, #120]	; (800873c <__pow5mult+0xb0>)
 80086c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086c8:	f001 ff12 	bl	800a4f0 <__assert_func>
 80086cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086d0:	6004      	str	r4, [r0, #0]
 80086d2:	60c4      	str	r4, [r0, #12]
 80086d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086dc:	b94c      	cbnz	r4, 80086f2 <__pow5mult+0x66>
 80086de:	f240 2171 	movw	r1, #625	; 0x271
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ff12 	bl	800850c <__i2b>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ee:	4604      	mov	r4, r0
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	07eb      	lsls	r3, r5, #31
 80086f8:	d50a      	bpl.n	8008710 <__pow5mult+0x84>
 80086fa:	4639      	mov	r1, r7
 80086fc:	4622      	mov	r2, r4
 80086fe:	4630      	mov	r0, r6
 8008700:	f7ff ff1a 	bl	8008538 <__multiply>
 8008704:	4639      	mov	r1, r7
 8008706:	4680      	mov	r8, r0
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff fdff 	bl	800830c <_Bfree>
 800870e:	4647      	mov	r7, r8
 8008710:	106d      	asrs	r5, r5, #1
 8008712:	d00b      	beq.n	800872c <__pow5mult+0xa0>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	b938      	cbnz	r0, 8008728 <__pow5mult+0x9c>
 8008718:	4622      	mov	r2, r4
 800871a:	4621      	mov	r1, r4
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff ff0b 	bl	8008538 <__multiply>
 8008722:	6020      	str	r0, [r4, #0]
 8008724:	f8c0 9000 	str.w	r9, [r0]
 8008728:	4604      	mov	r4, r0
 800872a:	e7e4      	b.n	80086f6 <__pow5mult+0x6a>
 800872c:	4638      	mov	r0, r7
 800872e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008732:	bf00      	nop
 8008734:	0800b5f8 	.word	0x0800b5f8
 8008738:	0800b428 	.word	0x0800b428
 800873c:	0800b4a8 	.word	0x0800b4a8

08008740 <__lshift>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	6849      	ldr	r1, [r1, #4]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	4607      	mov	r7, r0
 8008752:	4691      	mov	r9, r2
 8008754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008758:	f108 0601 	add.w	r6, r8, #1
 800875c:	42b3      	cmp	r3, r6
 800875e:	db0b      	blt.n	8008778 <__lshift+0x38>
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff fd93 	bl	800828c <_Balloc>
 8008766:	4605      	mov	r5, r0
 8008768:	b948      	cbnz	r0, 800877e <__lshift+0x3e>
 800876a:	4602      	mov	r2, r0
 800876c:	4b28      	ldr	r3, [pc, #160]	; (8008810 <__lshift+0xd0>)
 800876e:	4829      	ldr	r0, [pc, #164]	; (8008814 <__lshift+0xd4>)
 8008770:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008774:	f001 febc 	bl	800a4f0 <__assert_func>
 8008778:	3101      	adds	r1, #1
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	e7ee      	b.n	800875c <__lshift+0x1c>
 800877e:	2300      	movs	r3, #0
 8008780:	f100 0114 	add.w	r1, r0, #20
 8008784:	f100 0210 	add.w	r2, r0, #16
 8008788:	4618      	mov	r0, r3
 800878a:	4553      	cmp	r3, sl
 800878c:	db33      	blt.n	80087f6 <__lshift+0xb6>
 800878e:	6920      	ldr	r0, [r4, #16]
 8008790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008794:	f104 0314 	add.w	r3, r4, #20
 8008798:	f019 091f 	ands.w	r9, r9, #31
 800879c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087a4:	d02b      	beq.n	80087fe <__lshift+0xbe>
 80087a6:	f1c9 0e20 	rsb	lr, r9, #32
 80087aa:	468a      	mov	sl, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	fa00 f009 	lsl.w	r0, r0, r9
 80087b4:	4310      	orrs	r0, r2
 80087b6:	f84a 0b04 	str.w	r0, [sl], #4
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	459c      	cmp	ip, r3
 80087c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087c4:	d8f3      	bhi.n	80087ae <__lshift+0x6e>
 80087c6:	ebac 0304 	sub.w	r3, ip, r4
 80087ca:	3b15      	subs	r3, #21
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	3304      	adds	r3, #4
 80087d2:	f104 0015 	add.w	r0, r4, #21
 80087d6:	4584      	cmp	ip, r0
 80087d8:	bf38      	it	cc
 80087da:	2304      	movcc	r3, #4
 80087dc:	50ca      	str	r2, [r1, r3]
 80087de:	b10a      	cbz	r2, 80087e4 <__lshift+0xa4>
 80087e0:	f108 0602 	add.w	r6, r8, #2
 80087e4:	3e01      	subs	r6, #1
 80087e6:	4638      	mov	r0, r7
 80087e8:	612e      	str	r6, [r5, #16]
 80087ea:	4621      	mov	r1, r4
 80087ec:	f7ff fd8e 	bl	800830c <_Bfree>
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fa:	3301      	adds	r3, #1
 80087fc:	e7c5      	b.n	800878a <__lshift+0x4a>
 80087fe:	3904      	subs	r1, #4
 8008800:	f853 2b04 	ldr.w	r2, [r3], #4
 8008804:	f841 2f04 	str.w	r2, [r1, #4]!
 8008808:	459c      	cmp	ip, r3
 800880a:	d8f9      	bhi.n	8008800 <__lshift+0xc0>
 800880c:	e7ea      	b.n	80087e4 <__lshift+0xa4>
 800880e:	bf00      	nop
 8008810:	0800b497 	.word	0x0800b497
 8008814:	0800b4a8 	.word	0x0800b4a8

08008818 <__mcmp>:
 8008818:	b530      	push	{r4, r5, lr}
 800881a:	6902      	ldr	r2, [r0, #16]
 800881c:	690c      	ldr	r4, [r1, #16]
 800881e:	1b12      	subs	r2, r2, r4
 8008820:	d10e      	bne.n	8008840 <__mcmp+0x28>
 8008822:	f100 0314 	add.w	r3, r0, #20
 8008826:	3114      	adds	r1, #20
 8008828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800882c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008838:	42a5      	cmp	r5, r4
 800883a:	d003      	beq.n	8008844 <__mcmp+0x2c>
 800883c:	d305      	bcc.n	800884a <__mcmp+0x32>
 800883e:	2201      	movs	r2, #1
 8008840:	4610      	mov	r0, r2
 8008842:	bd30      	pop	{r4, r5, pc}
 8008844:	4283      	cmp	r3, r0
 8008846:	d3f3      	bcc.n	8008830 <__mcmp+0x18>
 8008848:	e7fa      	b.n	8008840 <__mcmp+0x28>
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	e7f7      	b.n	8008840 <__mcmp+0x28>

08008850 <__mdiff>:
 8008850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	4606      	mov	r6, r0
 8008858:	4611      	mov	r1, r2
 800885a:	4620      	mov	r0, r4
 800885c:	4690      	mov	r8, r2
 800885e:	f7ff ffdb 	bl	8008818 <__mcmp>
 8008862:	1e05      	subs	r5, r0, #0
 8008864:	d110      	bne.n	8008888 <__mdiff+0x38>
 8008866:	4629      	mov	r1, r5
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff fd0f 	bl	800828c <_Balloc>
 800886e:	b930      	cbnz	r0, 800887e <__mdiff+0x2e>
 8008870:	4b3a      	ldr	r3, [pc, #232]	; (800895c <__mdiff+0x10c>)
 8008872:	4602      	mov	r2, r0
 8008874:	f240 2137 	movw	r1, #567	; 0x237
 8008878:	4839      	ldr	r0, [pc, #228]	; (8008960 <__mdiff+0x110>)
 800887a:	f001 fe39 	bl	800a4f0 <__assert_func>
 800887e:	2301      	movs	r3, #1
 8008880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008888:	bfa4      	itt	ge
 800888a:	4643      	movge	r3, r8
 800888c:	46a0      	movge	r8, r4
 800888e:	4630      	mov	r0, r6
 8008890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008894:	bfa6      	itte	ge
 8008896:	461c      	movge	r4, r3
 8008898:	2500      	movge	r5, #0
 800889a:	2501      	movlt	r5, #1
 800889c:	f7ff fcf6 	bl	800828c <_Balloc>
 80088a0:	b920      	cbnz	r0, 80088ac <__mdiff+0x5c>
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <__mdiff+0x10c>)
 80088a4:	4602      	mov	r2, r0
 80088a6:	f240 2145 	movw	r1, #581	; 0x245
 80088aa:	e7e5      	b.n	8008878 <__mdiff+0x28>
 80088ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088b0:	6926      	ldr	r6, [r4, #16]
 80088b2:	60c5      	str	r5, [r0, #12]
 80088b4:	f104 0914 	add.w	r9, r4, #20
 80088b8:	f108 0514 	add.w	r5, r8, #20
 80088bc:	f100 0e14 	add.w	lr, r0, #20
 80088c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088c8:	f108 0210 	add.w	r2, r8, #16
 80088cc:	46f2      	mov	sl, lr
 80088ce:	2100      	movs	r1, #0
 80088d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088d8:	fa11 f88b 	uxtah	r8, r1, fp
 80088dc:	b299      	uxth	r1, r3
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	eba8 0801 	sub.w	r8, r8, r1
 80088e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088ec:	fa1f f888 	uxth.w	r8, r8
 80088f0:	1419      	asrs	r1, r3, #16
 80088f2:	454e      	cmp	r6, r9
 80088f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088f8:	f84a 3b04 	str.w	r3, [sl], #4
 80088fc:	d8e8      	bhi.n	80088d0 <__mdiff+0x80>
 80088fe:	1b33      	subs	r3, r6, r4
 8008900:	3b15      	subs	r3, #21
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	3304      	adds	r3, #4
 8008908:	3415      	adds	r4, #21
 800890a:	42a6      	cmp	r6, r4
 800890c:	bf38      	it	cc
 800890e:	2304      	movcc	r3, #4
 8008910:	441d      	add	r5, r3
 8008912:	4473      	add	r3, lr
 8008914:	469e      	mov	lr, r3
 8008916:	462e      	mov	r6, r5
 8008918:	4566      	cmp	r6, ip
 800891a:	d30e      	bcc.n	800893a <__mdiff+0xea>
 800891c:	f10c 0203 	add.w	r2, ip, #3
 8008920:	1b52      	subs	r2, r2, r5
 8008922:	f022 0203 	bic.w	r2, r2, #3
 8008926:	3d03      	subs	r5, #3
 8008928:	45ac      	cmp	ip, r5
 800892a:	bf38      	it	cc
 800892c:	2200      	movcc	r2, #0
 800892e:	4413      	add	r3, r2
 8008930:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008934:	b17a      	cbz	r2, 8008956 <__mdiff+0x106>
 8008936:	6107      	str	r7, [r0, #16]
 8008938:	e7a4      	b.n	8008884 <__mdiff+0x34>
 800893a:	f856 8b04 	ldr.w	r8, [r6], #4
 800893e:	fa11 f288 	uxtah	r2, r1, r8
 8008942:	1414      	asrs	r4, r2, #16
 8008944:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008948:	b292      	uxth	r2, r2
 800894a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800894e:	f84e 2b04 	str.w	r2, [lr], #4
 8008952:	1421      	asrs	r1, r4, #16
 8008954:	e7e0      	b.n	8008918 <__mdiff+0xc8>
 8008956:	3f01      	subs	r7, #1
 8008958:	e7ea      	b.n	8008930 <__mdiff+0xe0>
 800895a:	bf00      	nop
 800895c:	0800b497 	.word	0x0800b497
 8008960:	0800b4a8 	.word	0x0800b4a8

08008964 <__ulp>:
 8008964:	b082      	sub	sp, #8
 8008966:	ed8d 0b00 	vstr	d0, [sp]
 800896a:	9a01      	ldr	r2, [sp, #4]
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <__ulp+0x48>)
 800896e:	4013      	ands	r3, r2
 8008970:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008974:	2b00      	cmp	r3, #0
 8008976:	dc08      	bgt.n	800898a <__ulp+0x26>
 8008978:	425b      	negs	r3, r3
 800897a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800897e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008982:	da04      	bge.n	800898e <__ulp+0x2a>
 8008984:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008988:	4113      	asrs	r3, r2
 800898a:	2200      	movs	r2, #0
 800898c:	e008      	b.n	80089a0 <__ulp+0x3c>
 800898e:	f1a2 0314 	sub.w	r3, r2, #20
 8008992:	2b1e      	cmp	r3, #30
 8008994:	bfda      	itte	le
 8008996:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800899a:	40da      	lsrle	r2, r3
 800899c:	2201      	movgt	r2, #1
 800899e:	2300      	movs	r3, #0
 80089a0:	4619      	mov	r1, r3
 80089a2:	4610      	mov	r0, r2
 80089a4:	ec41 0b10 	vmov	d0, r0, r1
 80089a8:	b002      	add	sp, #8
 80089aa:	4770      	bx	lr
 80089ac:	7ff00000 	.word	0x7ff00000

080089b0 <__b2d>:
 80089b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	6906      	ldr	r6, [r0, #16]
 80089b6:	f100 0814 	add.w	r8, r0, #20
 80089ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80089be:	1f37      	subs	r7, r6, #4
 80089c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7ff fd53 	bl	8008470 <__hi0bits>
 80089ca:	f1c0 0320 	rsb	r3, r0, #32
 80089ce:	280a      	cmp	r0, #10
 80089d0:	600b      	str	r3, [r1, #0]
 80089d2:	491b      	ldr	r1, [pc, #108]	; (8008a40 <__b2d+0x90>)
 80089d4:	dc15      	bgt.n	8008a02 <__b2d+0x52>
 80089d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80089da:	fa22 f30c 	lsr.w	r3, r2, ip
 80089de:	45b8      	cmp	r8, r7
 80089e0:	ea43 0501 	orr.w	r5, r3, r1
 80089e4:	bf34      	ite	cc
 80089e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089ea:	2300      	movcs	r3, #0
 80089ec:	3015      	adds	r0, #21
 80089ee:	fa02 f000 	lsl.w	r0, r2, r0
 80089f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80089f6:	4303      	orrs	r3, r0
 80089f8:	461c      	mov	r4, r3
 80089fa:	ec45 4b10 	vmov	d0, r4, r5
 80089fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a02:	45b8      	cmp	r8, r7
 8008a04:	bf3a      	itte	cc
 8008a06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8008a0e:	2300      	movcs	r3, #0
 8008a10:	380b      	subs	r0, #11
 8008a12:	d012      	beq.n	8008a3a <__b2d+0x8a>
 8008a14:	f1c0 0120 	rsb	r1, r0, #32
 8008a18:	fa23 f401 	lsr.w	r4, r3, r1
 8008a1c:	4082      	lsls	r2, r0
 8008a1e:	4322      	orrs	r2, r4
 8008a20:	4547      	cmp	r7, r8
 8008a22:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008a26:	bf8c      	ite	hi
 8008a28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a2c:	2200      	movls	r2, #0
 8008a2e:	4083      	lsls	r3, r0
 8008a30:	40ca      	lsrs	r2, r1
 8008a32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a36:	4313      	orrs	r3, r2
 8008a38:	e7de      	b.n	80089f8 <__b2d+0x48>
 8008a3a:	ea42 0501 	orr.w	r5, r2, r1
 8008a3e:	e7db      	b.n	80089f8 <__b2d+0x48>
 8008a40:	3ff00000 	.word	0x3ff00000

08008a44 <__d2b>:
 8008a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	460f      	mov	r7, r1
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	ec59 8b10 	vmov	r8, r9, d0
 8008a50:	4616      	mov	r6, r2
 8008a52:	f7ff fc1b 	bl	800828c <_Balloc>
 8008a56:	4604      	mov	r4, r0
 8008a58:	b930      	cbnz	r0, 8008a68 <__d2b+0x24>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <__d2b+0xac>)
 8008a5e:	4825      	ldr	r0, [pc, #148]	; (8008af4 <__d2b+0xb0>)
 8008a60:	f240 310f 	movw	r1, #783	; 0x30f
 8008a64:	f001 fd44 	bl	800a4f0 <__assert_func>
 8008a68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a70:	bb2d      	cbnz	r5, 8008abe <__d2b+0x7a>
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	f1b8 0300 	subs.w	r3, r8, #0
 8008a78:	d026      	beq.n	8008ac8 <__d2b+0x84>
 8008a7a:	4668      	mov	r0, sp
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	f7ff fd17 	bl	80084b0 <__lo0bits>
 8008a82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a86:	b1e8      	cbz	r0, 8008ac4 <__d2b+0x80>
 8008a88:	f1c0 0320 	rsb	r3, r0, #32
 8008a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a90:	430b      	orrs	r3, r1
 8008a92:	40c2      	lsrs	r2, r0
 8008a94:	6163      	str	r3, [r4, #20]
 8008a96:	9201      	str	r2, [sp, #4]
 8008a98:	9b01      	ldr	r3, [sp, #4]
 8008a9a:	61a3      	str	r3, [r4, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bf14      	ite	ne
 8008aa0:	2202      	movne	r2, #2
 8008aa2:	2201      	moveq	r2, #1
 8008aa4:	6122      	str	r2, [r4, #16]
 8008aa6:	b1bd      	cbz	r5, 8008ad8 <__d2b+0x94>
 8008aa8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008aac:	4405      	add	r5, r0
 8008aae:	603d      	str	r5, [r7, #0]
 8008ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ab4:	6030      	str	r0, [r6, #0]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	b003      	add	sp, #12
 8008aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ac2:	e7d6      	b.n	8008a72 <__d2b+0x2e>
 8008ac4:	6161      	str	r1, [r4, #20]
 8008ac6:	e7e7      	b.n	8008a98 <__d2b+0x54>
 8008ac8:	a801      	add	r0, sp, #4
 8008aca:	f7ff fcf1 	bl	80084b0 <__lo0bits>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	6163      	str	r3, [r4, #20]
 8008ad2:	3020      	adds	r0, #32
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	e7e5      	b.n	8008aa4 <__d2b+0x60>
 8008ad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008adc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ae0:	6038      	str	r0, [r7, #0]
 8008ae2:	6918      	ldr	r0, [r3, #16]
 8008ae4:	f7ff fcc4 	bl	8008470 <__hi0bits>
 8008ae8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008aec:	e7e2      	b.n	8008ab4 <__d2b+0x70>
 8008aee:	bf00      	nop
 8008af0:	0800b497 	.word	0x0800b497
 8008af4:	0800b4a8 	.word	0x0800b4a8

08008af8 <__ratio>:
 8008af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	4688      	mov	r8, r1
 8008afe:	4669      	mov	r1, sp
 8008b00:	4681      	mov	r9, r0
 8008b02:	f7ff ff55 	bl	80089b0 <__b2d>
 8008b06:	a901      	add	r1, sp, #4
 8008b08:	4640      	mov	r0, r8
 8008b0a:	ec55 4b10 	vmov	r4, r5, d0
 8008b0e:	f7ff ff4f 	bl	80089b0 <__b2d>
 8008b12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b1a:	eba3 0c02 	sub.w	ip, r3, r2
 8008b1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b28:	ec51 0b10 	vmov	r0, r1, d0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bfd6      	itet	le
 8008b30:	460a      	movle	r2, r1
 8008b32:	462a      	movgt	r2, r5
 8008b34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b38:	468b      	mov	fp, r1
 8008b3a:	462f      	mov	r7, r5
 8008b3c:	bfd4      	ite	le
 8008b3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b46:	4620      	mov	r0, r4
 8008b48:	ee10 2a10 	vmov	r2, s0
 8008b4c:	465b      	mov	r3, fp
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 fe7c 	bl	800084c <__aeabi_ddiv>
 8008b54:	ec41 0b10 	vmov	d0, r0, r1
 8008b58:	b003      	add	sp, #12
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b5e <__copybits>:
 8008b5e:	3901      	subs	r1, #1
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	1149      	asrs	r1, r1, #5
 8008b64:	6914      	ldr	r4, [r2, #16]
 8008b66:	3101      	adds	r1, #1
 8008b68:	f102 0314 	add.w	r3, r2, #20
 8008b6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b74:	1f05      	subs	r5, r0, #4
 8008b76:	42a3      	cmp	r3, r4
 8008b78:	d30c      	bcc.n	8008b94 <__copybits+0x36>
 8008b7a:	1aa3      	subs	r3, r4, r2
 8008b7c:	3b11      	subs	r3, #17
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	3211      	adds	r2, #17
 8008b84:	42a2      	cmp	r2, r4
 8008b86:	bf88      	it	hi
 8008b88:	2300      	movhi	r3, #0
 8008b8a:	4418      	add	r0, r3
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4288      	cmp	r0, r1
 8008b90:	d305      	bcc.n	8008b9e <__copybits+0x40>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b98:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b9c:	e7eb      	b.n	8008b76 <__copybits+0x18>
 8008b9e:	f840 3b04 	str.w	r3, [r0], #4
 8008ba2:	e7f4      	b.n	8008b8e <__copybits+0x30>

08008ba4 <__any_on>:
 8008ba4:	f100 0214 	add.w	r2, r0, #20
 8008ba8:	6900      	ldr	r0, [r0, #16]
 8008baa:	114b      	asrs	r3, r1, #5
 8008bac:	4298      	cmp	r0, r3
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	db11      	blt.n	8008bd6 <__any_on+0x32>
 8008bb2:	dd0a      	ble.n	8008bca <__any_on+0x26>
 8008bb4:	f011 011f 	ands.w	r1, r1, #31
 8008bb8:	d007      	beq.n	8008bca <__any_on+0x26>
 8008bba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bbe:	fa24 f001 	lsr.w	r0, r4, r1
 8008bc2:	fa00 f101 	lsl.w	r1, r0, r1
 8008bc6:	428c      	cmp	r4, r1
 8008bc8:	d10b      	bne.n	8008be2 <__any_on+0x3e>
 8008bca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d803      	bhi.n	8008bda <__any_on+0x36>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	e7f7      	b.n	8008bca <__any_on+0x26>
 8008bda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bde:	2900      	cmp	r1, #0
 8008be0:	d0f5      	beq.n	8008bce <__any_on+0x2a>
 8008be2:	2001      	movs	r0, #1
 8008be4:	e7f6      	b.n	8008bd4 <__any_on+0x30>

08008be6 <sulp>:
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	ec45 4b10 	vmov	d0, r4, r5
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	f7ff feb7 	bl	8008964 <__ulp>
 8008bf6:	ec51 0b10 	vmov	r0, r1, d0
 8008bfa:	b17e      	cbz	r6, 8008c1c <sulp+0x36>
 8008bfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd09      	ble.n	8008c1c <sulp+0x36>
 8008c08:	051b      	lsls	r3, r3, #20
 8008c0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c0e:	2400      	movs	r4, #0
 8008c10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c14:	4622      	mov	r2, r4
 8008c16:	462b      	mov	r3, r5
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c20 <_strtod_l>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ed2d 8b02 	vpush	{d8}
 8008c28:	b09b      	sub	sp, #108	; 0x6c
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c2e:	2200      	movs	r2, #0
 8008c30:	9216      	str	r2, [sp, #88]	; 0x58
 8008c32:	460d      	mov	r5, r1
 8008c34:	f04f 0800 	mov.w	r8, #0
 8008c38:	f04f 0900 	mov.w	r9, #0
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	9215      	str	r2, [sp, #84]	; 0x54
 8008c40:	7811      	ldrb	r1, [r2, #0]
 8008c42:	292b      	cmp	r1, #43	; 0x2b
 8008c44:	d04c      	beq.n	8008ce0 <_strtod_l+0xc0>
 8008c46:	d83a      	bhi.n	8008cbe <_strtod_l+0x9e>
 8008c48:	290d      	cmp	r1, #13
 8008c4a:	d834      	bhi.n	8008cb6 <_strtod_l+0x96>
 8008c4c:	2908      	cmp	r1, #8
 8008c4e:	d834      	bhi.n	8008cba <_strtod_l+0x9a>
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d03d      	beq.n	8008cd0 <_strtod_l+0xb0>
 8008c54:	2200      	movs	r2, #0
 8008c56:	920a      	str	r2, [sp, #40]	; 0x28
 8008c58:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008c5a:	7832      	ldrb	r2, [r6, #0]
 8008c5c:	2a30      	cmp	r2, #48	; 0x30
 8008c5e:	f040 80b4 	bne.w	8008dca <_strtod_l+0x1aa>
 8008c62:	7872      	ldrb	r2, [r6, #1]
 8008c64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c68:	2a58      	cmp	r2, #88	; 0x58
 8008c6a:	d170      	bne.n	8008d4e <_strtod_l+0x12e>
 8008c6c:	9302      	str	r3, [sp, #8]
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	ab16      	add	r3, sp, #88	; 0x58
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4a8e      	ldr	r2, [pc, #568]	; (8008eb0 <_strtod_l+0x290>)
 8008c78:	ab17      	add	r3, sp, #92	; 0x5c
 8008c7a:	a915      	add	r1, sp, #84	; 0x54
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f001 fcd3 	bl	800a628 <__gethex>
 8008c82:	f010 070f 	ands.w	r7, r0, #15
 8008c86:	4605      	mov	r5, r0
 8008c88:	d005      	beq.n	8008c96 <_strtod_l+0x76>
 8008c8a:	2f06      	cmp	r7, #6
 8008c8c:	d12a      	bne.n	8008ce4 <_strtod_l+0xc4>
 8008c8e:	3601      	adds	r6, #1
 8008c90:	2300      	movs	r3, #0
 8008c92:	9615      	str	r6, [sp, #84]	; 0x54
 8008c94:	930a      	str	r3, [sp, #40]	; 0x28
 8008c96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 857f 	bne.w	800979c <_strtod_l+0xb7c>
 8008c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca0:	b1db      	cbz	r3, 8008cda <_strtod_l+0xba>
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ca8:	ec43 2b10 	vmov	d0, r2, r3
 8008cac:	b01b      	add	sp, #108	; 0x6c
 8008cae:	ecbd 8b02 	vpop	{d8}
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	2920      	cmp	r1, #32
 8008cb8:	d1cc      	bne.n	8008c54 <_strtod_l+0x34>
 8008cba:	3201      	adds	r2, #1
 8008cbc:	e7bf      	b.n	8008c3e <_strtod_l+0x1e>
 8008cbe:	292d      	cmp	r1, #45	; 0x2d
 8008cc0:	d1c8      	bne.n	8008c54 <_strtod_l+0x34>
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	910a      	str	r1, [sp, #40]	; 0x28
 8008cc6:	1c51      	adds	r1, r2, #1
 8008cc8:	9115      	str	r1, [sp, #84]	; 0x54
 8008cca:	7852      	ldrb	r2, [r2, #1]
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	d1c3      	bne.n	8008c58 <_strtod_l+0x38>
 8008cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cd2:	9515      	str	r5, [sp, #84]	; 0x54
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 855f 	bne.w	8009798 <_strtod_l+0xb78>
 8008cda:	4642      	mov	r2, r8
 8008cdc:	464b      	mov	r3, r9
 8008cde:	e7e3      	b.n	8008ca8 <_strtod_l+0x88>
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	e7ef      	b.n	8008cc4 <_strtod_l+0xa4>
 8008ce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ce6:	b13a      	cbz	r2, 8008cf8 <_strtod_l+0xd8>
 8008ce8:	2135      	movs	r1, #53	; 0x35
 8008cea:	a818      	add	r0, sp, #96	; 0x60
 8008cec:	f7ff ff37 	bl	8008b5e <__copybits>
 8008cf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7ff fb0a 	bl	800830c <_Bfree>
 8008cf8:	3f01      	subs	r7, #1
 8008cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cfc:	2f04      	cmp	r7, #4
 8008cfe:	d806      	bhi.n	8008d0e <_strtod_l+0xee>
 8008d00:	e8df f007 	tbb	[pc, r7]
 8008d04:	201d0314 	.word	0x201d0314
 8008d08:	14          	.byte	0x14
 8008d09:	00          	.byte	0x00
 8008d0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008d0e:	05e9      	lsls	r1, r5, #23
 8008d10:	bf48      	it	mi
 8008d12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d1a:	0d1b      	lsrs	r3, r3, #20
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1b9      	bne.n	8008c96 <_strtod_l+0x76>
 8008d22:	f7fe fafd 	bl	8007320 <__errno>
 8008d26:	2322      	movs	r3, #34	; 0x22
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	e7b4      	b.n	8008c96 <_strtod_l+0x76>
 8008d2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008d30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d3c:	e7e7      	b.n	8008d0e <_strtod_l+0xee>
 8008d3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008eb8 <_strtod_l+0x298>
 8008d42:	e7e4      	b.n	8008d0e <_strtod_l+0xee>
 8008d44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d48:	f04f 38ff 	mov.w	r8, #4294967295
 8008d4c:	e7df      	b.n	8008d0e <_strtod_l+0xee>
 8008d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	9215      	str	r2, [sp, #84]	; 0x54
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b30      	cmp	r3, #48	; 0x30
 8008d58:	d0f9      	beq.n	8008d4e <_strtod_l+0x12e>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d09b      	beq.n	8008c96 <_strtod_l+0x76>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f04f 0a00 	mov.w	sl, #0
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d6e:	46d3      	mov	fp, sl
 8008d70:	220a      	movs	r2, #10
 8008d72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d74:	7806      	ldrb	r6, [r0, #0]
 8008d76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d7a:	b2d9      	uxtb	r1, r3
 8008d7c:	2909      	cmp	r1, #9
 8008d7e:	d926      	bls.n	8008dce <_strtod_l+0x1ae>
 8008d80:	494c      	ldr	r1, [pc, #304]	; (8008eb4 <_strtod_l+0x294>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	f001 fb79 	bl	800a47a <strncmp>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d030      	beq.n	8008dee <_strtod_l+0x1ce>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4632      	mov	r2, r6
 8008d90:	9005      	str	r0, [sp, #20]
 8008d92:	465e      	mov	r6, fp
 8008d94:	4603      	mov	r3, r0
 8008d96:	2a65      	cmp	r2, #101	; 0x65
 8008d98:	d001      	beq.n	8008d9e <_strtod_l+0x17e>
 8008d9a:	2a45      	cmp	r2, #69	; 0x45
 8008d9c:	d113      	bne.n	8008dc6 <_strtod_l+0x1a6>
 8008d9e:	b91e      	cbnz	r6, 8008da8 <_strtod_l+0x188>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	4302      	orrs	r2, r0
 8008da4:	d094      	beq.n	8008cd0 <_strtod_l+0xb0>
 8008da6:	2600      	movs	r6, #0
 8008da8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008daa:	1c6a      	adds	r2, r5, #1
 8008dac:	9215      	str	r2, [sp, #84]	; 0x54
 8008dae:	786a      	ldrb	r2, [r5, #1]
 8008db0:	2a2b      	cmp	r2, #43	; 0x2b
 8008db2:	d074      	beq.n	8008e9e <_strtod_l+0x27e>
 8008db4:	2a2d      	cmp	r2, #45	; 0x2d
 8008db6:	d078      	beq.n	8008eaa <_strtod_l+0x28a>
 8008db8:	f04f 0c00 	mov.w	ip, #0
 8008dbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dc0:	2909      	cmp	r1, #9
 8008dc2:	d97f      	bls.n	8008ec4 <_strtod_l+0x2a4>
 8008dc4:	9515      	str	r5, [sp, #84]	; 0x54
 8008dc6:	2700      	movs	r7, #0
 8008dc8:	e09e      	b.n	8008f08 <_strtod_l+0x2e8>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e7c8      	b.n	8008d60 <_strtod_l+0x140>
 8008dce:	f1bb 0f08 	cmp.w	fp, #8
 8008dd2:	bfd8      	it	le
 8008dd4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008dd6:	f100 0001 	add.w	r0, r0, #1
 8008dda:	bfda      	itte	le
 8008ddc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008de0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008de2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008de6:	f10b 0b01 	add.w	fp, fp, #1
 8008dea:	9015      	str	r0, [sp, #84]	; 0x54
 8008dec:	e7c1      	b.n	8008d72 <_strtod_l+0x152>
 8008dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	9215      	str	r2, [sp, #84]	; 0x54
 8008df4:	785a      	ldrb	r2, [r3, #1]
 8008df6:	f1bb 0f00 	cmp.w	fp, #0
 8008dfa:	d037      	beq.n	8008e6c <_strtod_l+0x24c>
 8008dfc:	9005      	str	r0, [sp, #20]
 8008dfe:	465e      	mov	r6, fp
 8008e00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d912      	bls.n	8008e2e <_strtod_l+0x20e>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e7c4      	b.n	8008d96 <_strtod_l+0x176>
 8008e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	9215      	str	r2, [sp, #84]	; 0x54
 8008e12:	785a      	ldrb	r2, [r3, #1]
 8008e14:	3001      	adds	r0, #1
 8008e16:	2a30      	cmp	r2, #48	; 0x30
 8008e18:	d0f8      	beq.n	8008e0c <_strtod_l+0x1ec>
 8008e1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	f200 84c1 	bhi.w	80097a6 <_strtod_l+0xb86>
 8008e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e26:	9005      	str	r0, [sp, #20]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	3a30      	subs	r2, #48	; 0x30
 8008e30:	f100 0301 	add.w	r3, r0, #1
 8008e34:	d014      	beq.n	8008e60 <_strtod_l+0x240>
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	4419      	add	r1, r3
 8008e3a:	9105      	str	r1, [sp, #20]
 8008e3c:	4633      	mov	r3, r6
 8008e3e:	eb00 0c06 	add.w	ip, r0, r6
 8008e42:	210a      	movs	r1, #10
 8008e44:	4563      	cmp	r3, ip
 8008e46:	d113      	bne.n	8008e70 <_strtod_l+0x250>
 8008e48:	1833      	adds	r3, r6, r0
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	f106 0601 	add.w	r6, r6, #1
 8008e50:	4406      	add	r6, r0
 8008e52:	dc1a      	bgt.n	8008e8a <_strtod_l+0x26a>
 8008e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e56:	230a      	movs	r3, #10
 8008e58:	fb03 2301 	mla	r3, r3, r1, r2
 8008e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e62:	1c51      	adds	r1, r2, #1
 8008e64:	9115      	str	r1, [sp, #84]	; 0x54
 8008e66:	7852      	ldrb	r2, [r2, #1]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	e7c9      	b.n	8008e00 <_strtod_l+0x1e0>
 8008e6c:	4658      	mov	r0, fp
 8008e6e:	e7d2      	b.n	8008e16 <_strtod_l+0x1f6>
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	f103 0301 	add.w	r3, r3, #1
 8008e76:	dc03      	bgt.n	8008e80 <_strtod_l+0x260>
 8008e78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e7a:	434f      	muls	r7, r1
 8008e7c:	9709      	str	r7, [sp, #36]	; 0x24
 8008e7e:	e7e1      	b.n	8008e44 <_strtod_l+0x224>
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	bfd8      	it	le
 8008e84:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e88:	e7dc      	b.n	8008e44 <_strtod_l+0x224>
 8008e8a:	2e10      	cmp	r6, #16
 8008e8c:	bfdc      	itt	le
 8008e8e:	230a      	movle	r3, #10
 8008e90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e94:	e7e3      	b.n	8008e5e <_strtod_l+0x23e>
 8008e96:	2300      	movs	r3, #0
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e780      	b.n	8008da0 <_strtod_l+0x180>
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	1caa      	adds	r2, r5, #2
 8008ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ea6:	78aa      	ldrb	r2, [r5, #2]
 8008ea8:	e788      	b.n	8008dbc <_strtod_l+0x19c>
 8008eaa:	f04f 0c01 	mov.w	ip, #1
 8008eae:	e7f8      	b.n	8008ea2 <_strtod_l+0x282>
 8008eb0:	0800b608 	.word	0x0800b608
 8008eb4:	0800b604 	.word	0x0800b604
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ebe:	1c51      	adds	r1, r2, #1
 8008ec0:	9115      	str	r1, [sp, #84]	; 0x54
 8008ec2:	7852      	ldrb	r2, [r2, #1]
 8008ec4:	2a30      	cmp	r2, #48	; 0x30
 8008ec6:	d0f9      	beq.n	8008ebc <_strtod_l+0x29c>
 8008ec8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ecc:	2908      	cmp	r1, #8
 8008ece:	f63f af7a 	bhi.w	8008dc6 <_strtod_l+0x1a6>
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	9208      	str	r2, [sp, #32]
 8008ed6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ed8:	920c      	str	r2, [sp, #48]	; 0x30
 8008eda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008edc:	1c57      	adds	r7, r2, #1
 8008ede:	9715      	str	r7, [sp, #84]	; 0x54
 8008ee0:	7852      	ldrb	r2, [r2, #1]
 8008ee2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ee6:	f1be 0f09 	cmp.w	lr, #9
 8008eea:	d938      	bls.n	8008f5e <_strtod_l+0x33e>
 8008eec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eee:	1a7f      	subs	r7, r7, r1
 8008ef0:	2f08      	cmp	r7, #8
 8008ef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ef6:	dc03      	bgt.n	8008f00 <_strtod_l+0x2e0>
 8008ef8:	9908      	ldr	r1, [sp, #32]
 8008efa:	428f      	cmp	r7, r1
 8008efc:	bfa8      	it	ge
 8008efe:	460f      	movge	r7, r1
 8008f00:	f1bc 0f00 	cmp.w	ip, #0
 8008f04:	d000      	beq.n	8008f08 <_strtod_l+0x2e8>
 8008f06:	427f      	negs	r7, r7
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	d14f      	bne.n	8008fac <_strtod_l+0x38c>
 8008f0c:	9904      	ldr	r1, [sp, #16]
 8008f0e:	4301      	orrs	r1, r0
 8008f10:	f47f aec1 	bne.w	8008c96 <_strtod_l+0x76>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f47f aedb 	bne.w	8008cd0 <_strtod_l+0xb0>
 8008f1a:	2a69      	cmp	r2, #105	; 0x69
 8008f1c:	d029      	beq.n	8008f72 <_strtod_l+0x352>
 8008f1e:	dc26      	bgt.n	8008f6e <_strtod_l+0x34e>
 8008f20:	2a49      	cmp	r2, #73	; 0x49
 8008f22:	d026      	beq.n	8008f72 <_strtod_l+0x352>
 8008f24:	2a4e      	cmp	r2, #78	; 0x4e
 8008f26:	f47f aed3 	bne.w	8008cd0 <_strtod_l+0xb0>
 8008f2a:	499b      	ldr	r1, [pc, #620]	; (8009198 <_strtod_l+0x578>)
 8008f2c:	a815      	add	r0, sp, #84	; 0x54
 8008f2e:	f001 fdbb 	bl	800aaa8 <__match>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f aecc 	beq.w	8008cd0 <_strtod_l+0xb0>
 8008f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b28      	cmp	r3, #40	; 0x28
 8008f3e:	d12f      	bne.n	8008fa0 <_strtod_l+0x380>
 8008f40:	4996      	ldr	r1, [pc, #600]	; (800919c <_strtod_l+0x57c>)
 8008f42:	aa18      	add	r2, sp, #96	; 0x60
 8008f44:	a815      	add	r0, sp, #84	; 0x54
 8008f46:	f001 fdc3 	bl	800aad0 <__hexnan>
 8008f4a:	2805      	cmp	r0, #5
 8008f4c:	d128      	bne.n	8008fa0 <_strtod_l+0x380>
 8008f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f5c:	e69b      	b.n	8008c96 <_strtod_l+0x76>
 8008f5e:	9f08      	ldr	r7, [sp, #32]
 8008f60:	210a      	movs	r1, #10
 8008f62:	fb01 2107 	mla	r1, r1, r7, r2
 8008f66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f6a:	9208      	str	r2, [sp, #32]
 8008f6c:	e7b5      	b.n	8008eda <_strtod_l+0x2ba>
 8008f6e:	2a6e      	cmp	r2, #110	; 0x6e
 8008f70:	e7d9      	b.n	8008f26 <_strtod_l+0x306>
 8008f72:	498b      	ldr	r1, [pc, #556]	; (80091a0 <_strtod_l+0x580>)
 8008f74:	a815      	add	r0, sp, #84	; 0x54
 8008f76:	f001 fd97 	bl	800aaa8 <__match>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f aea8 	beq.w	8008cd0 <_strtod_l+0xb0>
 8008f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f82:	4988      	ldr	r1, [pc, #544]	; (80091a4 <_strtod_l+0x584>)
 8008f84:	3b01      	subs	r3, #1
 8008f86:	a815      	add	r0, sp, #84	; 0x54
 8008f88:	9315      	str	r3, [sp, #84]	; 0x54
 8008f8a:	f001 fd8d 	bl	800aaa8 <__match>
 8008f8e:	b910      	cbnz	r0, 8008f96 <_strtod_l+0x376>
 8008f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f92:	3301      	adds	r3, #1
 8008f94:	9315      	str	r3, [sp, #84]	; 0x54
 8008f96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80091b4 <_strtod_l+0x594>
 8008f9a:	f04f 0800 	mov.w	r8, #0
 8008f9e:	e67a      	b.n	8008c96 <_strtod_l+0x76>
 8008fa0:	4881      	ldr	r0, [pc, #516]	; (80091a8 <_strtod_l+0x588>)
 8008fa2:	f001 fa9d 	bl	800a4e0 <nan>
 8008fa6:	ec59 8b10 	vmov	r8, r9, d0
 8008faa:	e674      	b.n	8008c96 <_strtod_l+0x76>
 8008fac:	9b05      	ldr	r3, [sp, #20]
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	1afb      	subs	r3, r7, r3
 8008fb2:	f1bb 0f00 	cmp.w	fp, #0
 8008fb6:	bf08      	it	eq
 8008fb8:	46b3      	moveq	fp, r6
 8008fba:	2e10      	cmp	r6, #16
 8008fbc:	9308      	str	r3, [sp, #32]
 8008fbe:	4635      	mov	r5, r6
 8008fc0:	bfa8      	it	ge
 8008fc2:	2510      	movge	r5, #16
 8008fc4:	f7f7 fa9e 	bl	8000504 <__aeabi_ui2d>
 8008fc8:	2e09      	cmp	r6, #9
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4689      	mov	r9, r1
 8008fce:	dd13      	ble.n	8008ff8 <_strtod_l+0x3d8>
 8008fd0:	4b76      	ldr	r3, [pc, #472]	; (80091ac <_strtod_l+0x58c>)
 8008fd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008fd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	4680      	mov	r8, r0
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4689      	mov	r9, r1
 8008fe4:	f7f7 fa8e 	bl	8000504 <__aeabi_ui2d>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 f94c 	bl	800028c <__adddf3>
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	2e0f      	cmp	r6, #15
 8008ffa:	dc38      	bgt.n	800906e <_strtod_l+0x44e>
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f43f ae49 	beq.w	8008c96 <_strtod_l+0x76>
 8009004:	dd24      	ble.n	8009050 <_strtod_l+0x430>
 8009006:	2b16      	cmp	r3, #22
 8009008:	dc0b      	bgt.n	8009022 <_strtod_l+0x402>
 800900a:	4968      	ldr	r1, [pc, #416]	; (80091ac <_strtod_l+0x58c>)
 800900c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	e639      	b.n	8008c96 <_strtod_l+0x76>
 8009022:	9a08      	ldr	r2, [sp, #32]
 8009024:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009028:	4293      	cmp	r3, r2
 800902a:	db20      	blt.n	800906e <_strtod_l+0x44e>
 800902c:	4c5f      	ldr	r4, [pc, #380]	; (80091ac <_strtod_l+0x58c>)
 800902e:	f1c6 060f 	rsb	r6, r6, #15
 8009032:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009036:	4642      	mov	r2, r8
 8009038:	464b      	mov	r3, r9
 800903a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903e:	f7f7 fadb 	bl	80005f8 <__aeabi_dmul>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	1b9e      	subs	r6, r3, r6
 8009046:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800904a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800904e:	e7e3      	b.n	8009018 <_strtod_l+0x3f8>
 8009050:	9b08      	ldr	r3, [sp, #32]
 8009052:	3316      	adds	r3, #22
 8009054:	db0b      	blt.n	800906e <_strtod_l+0x44e>
 8009056:	9b05      	ldr	r3, [sp, #20]
 8009058:	1bdf      	subs	r7, r3, r7
 800905a:	4b54      	ldr	r3, [pc, #336]	; (80091ac <_strtod_l+0x58c>)
 800905c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 fbf0 	bl	800084c <__aeabi_ddiv>
 800906c:	e7d6      	b.n	800901c <_strtod_l+0x3fc>
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	1b75      	subs	r5, r6, r5
 8009072:	441d      	add	r5, r3
 8009074:	2d00      	cmp	r5, #0
 8009076:	dd70      	ble.n	800915a <_strtod_l+0x53a>
 8009078:	f015 030f 	ands.w	r3, r5, #15
 800907c:	d00a      	beq.n	8009094 <_strtod_l+0x474>
 800907e:	494b      	ldr	r1, [pc, #300]	; (80091ac <_strtod_l+0x58c>)
 8009080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	f035 050f 	bics.w	r5, r5, #15
 8009098:	d04d      	beq.n	8009136 <_strtod_l+0x516>
 800909a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800909e:	dd22      	ble.n	80090e6 <_strtod_l+0x4c6>
 80090a0:	2500      	movs	r5, #0
 80090a2:	46ab      	mov	fp, r5
 80090a4:	9509      	str	r5, [sp, #36]	; 0x24
 80090a6:	9505      	str	r5, [sp, #20]
 80090a8:	2322      	movs	r3, #34	; 0x22
 80090aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80091b4 <_strtod_l+0x594>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	f04f 0800 	mov.w	r8, #0
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f43f aded 	beq.w	8008c96 <_strtod_l+0x76>
 80090bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff f924 	bl	800830c <_Bfree>
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff f920 	bl	800830c <_Bfree>
 80090cc:	4659      	mov	r1, fp
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7ff f91c 	bl	800830c <_Bfree>
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7ff f918 	bl	800830c <_Bfree>
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff f914 	bl	800830c <_Bfree>
 80090e4:	e5d7      	b.n	8008c96 <_strtod_l+0x76>
 80090e6:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <_strtod_l+0x590>)
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	2300      	movs	r3, #0
 80090ec:	112d      	asrs	r5, r5, #4
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	469a      	mov	sl, r3
 80090f4:	2d01      	cmp	r5, #1
 80090f6:	dc21      	bgt.n	800913c <_strtod_l+0x51c>
 80090f8:	b10b      	cbz	r3, 80090fe <_strtod_l+0x4de>
 80090fa:	4680      	mov	r8, r0
 80090fc:	4689      	mov	r9, r1
 80090fe:	492c      	ldr	r1, [pc, #176]	; (80091b0 <_strtod_l+0x590>)
 8009100:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009104:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009108:	4642      	mov	r2, r8
 800910a:	464b      	mov	r3, r9
 800910c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <_strtod_l+0x594>)
 8009116:	460a      	mov	r2, r1
 8009118:	400b      	ands	r3, r1
 800911a:	4927      	ldr	r1, [pc, #156]	; (80091b8 <_strtod_l+0x598>)
 800911c:	428b      	cmp	r3, r1
 800911e:	4680      	mov	r8, r0
 8009120:	d8be      	bhi.n	80090a0 <_strtod_l+0x480>
 8009122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009126:	428b      	cmp	r3, r1
 8009128:	bf86      	itte	hi
 800912a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80091bc <_strtod_l+0x59c>
 800912e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009132:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009136:	2300      	movs	r3, #0
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	e07b      	b.n	8009234 <_strtod_l+0x614>
 800913c:	07ea      	lsls	r2, r5, #31
 800913e:	d505      	bpl.n	800914c <_strtod_l+0x52c>
 8009140:	9b04      	ldr	r3, [sp, #16]
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 fa57 	bl	80005f8 <__aeabi_dmul>
 800914a:	2301      	movs	r3, #1
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	3208      	adds	r2, #8
 8009150:	f10a 0a01 	add.w	sl, sl, #1
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	e7cc      	b.n	80090f4 <_strtod_l+0x4d4>
 800915a:	d0ec      	beq.n	8009136 <_strtod_l+0x516>
 800915c:	426d      	negs	r5, r5
 800915e:	f015 020f 	ands.w	r2, r5, #15
 8009162:	d00a      	beq.n	800917a <_strtod_l+0x55a>
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <_strtod_l+0x58c>)
 8009166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 fb6b 	bl	800084c <__aeabi_ddiv>
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	112d      	asrs	r5, r5, #4
 800917c:	d0db      	beq.n	8009136 <_strtod_l+0x516>
 800917e:	2d1f      	cmp	r5, #31
 8009180:	dd1e      	ble.n	80091c0 <_strtod_l+0x5a0>
 8009182:	2500      	movs	r5, #0
 8009184:	46ab      	mov	fp, r5
 8009186:	9509      	str	r5, [sp, #36]	; 0x24
 8009188:	9505      	str	r5, [sp, #20]
 800918a:	2322      	movs	r3, #34	; 0x22
 800918c:	f04f 0800 	mov.w	r8, #0
 8009190:	f04f 0900 	mov.w	r9, #0
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	e78d      	b.n	80090b4 <_strtod_l+0x494>
 8009198:	0800b3f1 	.word	0x0800b3f1
 800919c:	0800b61c 	.word	0x0800b61c
 80091a0:	0800b3e9 	.word	0x0800b3e9
 80091a4:	0800b41e 	.word	0x0800b41e
 80091a8:	0800b7c8 	.word	0x0800b7c8
 80091ac:	0800b530 	.word	0x0800b530
 80091b0:	0800b508 	.word	0x0800b508
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	7ca00000 	.word	0x7ca00000
 80091bc:	7fefffff 	.word	0x7fefffff
 80091c0:	f015 0310 	ands.w	r3, r5, #16
 80091c4:	bf18      	it	ne
 80091c6:	236a      	movne	r3, #106	; 0x6a
 80091c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800956c <_strtod_l+0x94c>
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	2300      	movs	r3, #0
 80091d4:	07ea      	lsls	r2, r5, #31
 80091d6:	d504      	bpl.n	80091e2 <_strtod_l+0x5c2>
 80091d8:	e9da 2300 	ldrd	r2, r3, [sl]
 80091dc:	f7f7 fa0c 	bl	80005f8 <__aeabi_dmul>
 80091e0:	2301      	movs	r3, #1
 80091e2:	106d      	asrs	r5, r5, #1
 80091e4:	f10a 0a08 	add.w	sl, sl, #8
 80091e8:	d1f4      	bne.n	80091d4 <_strtod_l+0x5b4>
 80091ea:	b10b      	cbz	r3, 80091f0 <_strtod_l+0x5d0>
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	b1bb      	cbz	r3, 8009224 <_strtod_l+0x604>
 80091f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80091f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	4649      	mov	r1, r9
 8009200:	dd10      	ble.n	8009224 <_strtod_l+0x604>
 8009202:	2b1f      	cmp	r3, #31
 8009204:	f340 811e 	ble.w	8009444 <_strtod_l+0x824>
 8009208:	2b34      	cmp	r3, #52	; 0x34
 800920a:	bfde      	ittt	le
 800920c:	f04f 33ff 	movle.w	r3, #4294967295
 8009210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009214:	4093      	lslle	r3, r2
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	bfcc      	ite	gt
 800921c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009220:	ea03 0901 	andle.w	r9, r3, r1
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4640      	mov	r0, r8
 800922a:	4649      	mov	r1, r9
 800922c:	f7f7 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009230:	2800      	cmp	r0, #0
 8009232:	d1a6      	bne.n	8009182 <_strtod_l+0x562>
 8009234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800923a:	4633      	mov	r3, r6
 800923c:	465a      	mov	r2, fp
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff f8cc 	bl	80083dc <__s2b>
 8009244:	9009      	str	r0, [sp, #36]	; 0x24
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f af2a 	beq.w	80090a0 <_strtod_l+0x480>
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	9b05      	ldr	r3, [sp, #20]
 8009250:	2a00      	cmp	r2, #0
 8009252:	eba3 0307 	sub.w	r3, r3, r7
 8009256:	bfa8      	it	ge
 8009258:	2300      	movge	r3, #0
 800925a:	930c      	str	r3, [sp, #48]	; 0x30
 800925c:	2500      	movs	r5, #0
 800925e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009262:	9312      	str	r3, [sp, #72]	; 0x48
 8009264:	46ab      	mov	fp, r5
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	4620      	mov	r0, r4
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	f7ff f80e 	bl	800828c <_Balloc>
 8009270:	9005      	str	r0, [sp, #20]
 8009272:	2800      	cmp	r0, #0
 8009274:	f43f af18 	beq.w	80090a8 <_strtod_l+0x488>
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	3202      	adds	r2, #2
 800927e:	f103 010c 	add.w	r1, r3, #12
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	300c      	adds	r0, #12
 8009286:	f001 f91b 	bl	800a4c0 <memcpy>
 800928a:	ec49 8b10 	vmov	d0, r8, r9
 800928e:	aa18      	add	r2, sp, #96	; 0x60
 8009290:	a917      	add	r1, sp, #92	; 0x5c
 8009292:	4620      	mov	r0, r4
 8009294:	f7ff fbd6 	bl	8008a44 <__d2b>
 8009298:	ec49 8b18 	vmov	d8, r8, r9
 800929c:	9016      	str	r0, [sp, #88]	; 0x58
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f af02 	beq.w	80090a8 <_strtod_l+0x488>
 80092a4:	2101      	movs	r1, #1
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff f930 	bl	800850c <__i2b>
 80092ac:	4683      	mov	fp, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f43f aefa 	beq.w	80090a8 <_strtod_l+0x488>
 80092b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	bfab      	itete	ge
 80092bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80092be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80092c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80092c6:	bfac      	ite	ge
 80092c8:	eb06 0a03 	addge.w	sl, r6, r3
 80092cc:	1b9f      	sublt	r7, r3, r6
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	1af6      	subs	r6, r6, r3
 80092d2:	4416      	add	r6, r2
 80092d4:	4ba0      	ldr	r3, [pc, #640]	; (8009558 <_strtod_l+0x938>)
 80092d6:	3e01      	subs	r6, #1
 80092d8:	429e      	cmp	r6, r3
 80092da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092de:	f280 80c4 	bge.w	800946a <_strtod_l+0x84a>
 80092e2:	1b9b      	subs	r3, r3, r6
 80092e4:	2b1f      	cmp	r3, #31
 80092e6:	eba2 0203 	sub.w	r2, r2, r3
 80092ea:	f04f 0101 	mov.w	r1, #1
 80092ee:	f300 80b0 	bgt.w	8009452 <_strtod_l+0x832>
 80092f2:	fa01 f303 	lsl.w	r3, r1, r3
 80092f6:	930e      	str	r3, [sp, #56]	; 0x38
 80092f8:	2300      	movs	r3, #0
 80092fa:	930d      	str	r3, [sp, #52]	; 0x34
 80092fc:	eb0a 0602 	add.w	r6, sl, r2
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	45b2      	cmp	sl, r6
 8009304:	4417      	add	r7, r2
 8009306:	441f      	add	r7, r3
 8009308:	4653      	mov	r3, sl
 800930a:	bfa8      	it	ge
 800930c:	4633      	movge	r3, r6
 800930e:	42bb      	cmp	r3, r7
 8009310:	bfa8      	it	ge
 8009312:	463b      	movge	r3, r7
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfc2      	ittt	gt
 8009318:	1af6      	subgt	r6, r6, r3
 800931a:	1aff      	subgt	r7, r7, r3
 800931c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd17      	ble.n	8009356 <_strtod_l+0x736>
 8009326:	4659      	mov	r1, fp
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff f9ae 	bl	800868c <__pow5mult>
 8009330:	4683      	mov	fp, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	f43f aeb8 	beq.w	80090a8 <_strtod_l+0x488>
 8009338:	4601      	mov	r1, r0
 800933a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff f8fb 	bl	8008538 <__multiply>
 8009342:	900b      	str	r0, [sp, #44]	; 0x2c
 8009344:	2800      	cmp	r0, #0
 8009346:	f43f aeaf 	beq.w	80090a8 <_strtod_l+0x488>
 800934a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800934c:	4620      	mov	r0, r4
 800934e:	f7fe ffdd 	bl	800830c <_Bfree>
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	9316      	str	r3, [sp, #88]	; 0x58
 8009356:	2e00      	cmp	r6, #0
 8009358:	f300 808c 	bgt.w	8009474 <_strtod_l+0x854>
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd08      	ble.n	8009374 <_strtod_l+0x754>
 8009362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009364:	9905      	ldr	r1, [sp, #20]
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff f990 	bl	800868c <__pow5mult>
 800936c:	9005      	str	r0, [sp, #20]
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f ae9a 	beq.w	80090a8 <_strtod_l+0x488>
 8009374:	2f00      	cmp	r7, #0
 8009376:	dd08      	ble.n	800938a <_strtod_l+0x76a>
 8009378:	9905      	ldr	r1, [sp, #20]
 800937a:	463a      	mov	r2, r7
 800937c:	4620      	mov	r0, r4
 800937e:	f7ff f9df 	bl	8008740 <__lshift>
 8009382:	9005      	str	r0, [sp, #20]
 8009384:	2800      	cmp	r0, #0
 8009386:	f43f ae8f 	beq.w	80090a8 <_strtod_l+0x488>
 800938a:	f1ba 0f00 	cmp.w	sl, #0
 800938e:	dd08      	ble.n	80093a2 <_strtod_l+0x782>
 8009390:	4659      	mov	r1, fp
 8009392:	4652      	mov	r2, sl
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff f9d3 	bl	8008740 <__lshift>
 800939a:	4683      	mov	fp, r0
 800939c:	2800      	cmp	r0, #0
 800939e:	f43f ae83 	beq.w	80090a8 <_strtod_l+0x488>
 80093a2:	9a05      	ldr	r2, [sp, #20]
 80093a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7ff fa52 	bl	8008850 <__mdiff>
 80093ac:	4605      	mov	r5, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f43f ae7a 	beq.w	80090a8 <_strtod_l+0x488>
 80093b4:	68c3      	ldr	r3, [r0, #12]
 80093b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093b8:	2300      	movs	r3, #0
 80093ba:	60c3      	str	r3, [r0, #12]
 80093bc:	4659      	mov	r1, fp
 80093be:	f7ff fa2b 	bl	8008818 <__mcmp>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	da60      	bge.n	8009488 <_strtod_l+0x868>
 80093c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c8:	ea53 0308 	orrs.w	r3, r3, r8
 80093cc:	f040 8084 	bne.w	80094d8 <_strtod_l+0x8b8>
 80093d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d17f      	bne.n	80094d8 <_strtod_l+0x8b8>
 80093d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	051b      	lsls	r3, r3, #20
 80093e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093e4:	d978      	bls.n	80094d8 <_strtod_l+0x8b8>
 80093e6:	696b      	ldr	r3, [r5, #20]
 80093e8:	b913      	cbnz	r3, 80093f0 <_strtod_l+0x7d0>
 80093ea:	692b      	ldr	r3, [r5, #16]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	dd73      	ble.n	80094d8 <_strtod_l+0x8b8>
 80093f0:	4629      	mov	r1, r5
 80093f2:	2201      	movs	r2, #1
 80093f4:	4620      	mov	r0, r4
 80093f6:	f7ff f9a3 	bl	8008740 <__lshift>
 80093fa:	4659      	mov	r1, fp
 80093fc:	4605      	mov	r5, r0
 80093fe:	f7ff fa0b 	bl	8008818 <__mcmp>
 8009402:	2800      	cmp	r0, #0
 8009404:	dd68      	ble.n	80094d8 <_strtod_l+0x8b8>
 8009406:	9904      	ldr	r1, [sp, #16]
 8009408:	4a54      	ldr	r2, [pc, #336]	; (800955c <_strtod_l+0x93c>)
 800940a:	464b      	mov	r3, r9
 800940c:	2900      	cmp	r1, #0
 800940e:	f000 8084 	beq.w	800951a <_strtod_l+0x8fa>
 8009412:	ea02 0109 	and.w	r1, r2, r9
 8009416:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800941a:	dc7e      	bgt.n	800951a <_strtod_l+0x8fa>
 800941c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009420:	f77f aeb3 	ble.w	800918a <_strtod_l+0x56a>
 8009424:	4b4e      	ldr	r3, [pc, #312]	; (8009560 <_strtod_l+0x940>)
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	2200      	movs	r2, #0
 800942c:	f7f7 f8e4 	bl	80005f8 <__aeabi_dmul>
 8009430:	4b4a      	ldr	r3, [pc, #296]	; (800955c <_strtod_l+0x93c>)
 8009432:	400b      	ands	r3, r1
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	2b00      	cmp	r3, #0
 800943a:	f47f ae3f 	bne.w	80090bc <_strtod_l+0x49c>
 800943e:	2322      	movs	r3, #34	; 0x22
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	e63b      	b.n	80090bc <_strtod_l+0x49c>
 8009444:	f04f 32ff 	mov.w	r2, #4294967295
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	ea03 0808 	and.w	r8, r3, r8
 8009450:	e6e8      	b.n	8009224 <_strtod_l+0x604>
 8009452:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009456:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800945a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800945e:	36e2      	adds	r6, #226	; 0xe2
 8009460:	fa01 f306 	lsl.w	r3, r1, r6
 8009464:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009468:	e748      	b.n	80092fc <_strtod_l+0x6dc>
 800946a:	2100      	movs	r1, #0
 800946c:	2301      	movs	r3, #1
 800946e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009472:	e743      	b.n	80092fc <_strtod_l+0x6dc>
 8009474:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009476:	4632      	mov	r2, r6
 8009478:	4620      	mov	r0, r4
 800947a:	f7ff f961 	bl	8008740 <__lshift>
 800947e:	9016      	str	r0, [sp, #88]	; 0x58
 8009480:	2800      	cmp	r0, #0
 8009482:	f47f af6b 	bne.w	800935c <_strtod_l+0x73c>
 8009486:	e60f      	b.n	80090a8 <_strtod_l+0x488>
 8009488:	46ca      	mov	sl, r9
 800948a:	d171      	bne.n	8009570 <_strtod_l+0x950>
 800948c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800948e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009492:	b352      	cbz	r2, 80094ea <_strtod_l+0x8ca>
 8009494:	4a33      	ldr	r2, [pc, #204]	; (8009564 <_strtod_l+0x944>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d12a      	bne.n	80094f0 <_strtod_l+0x8d0>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	4641      	mov	r1, r8
 800949e:	b1fb      	cbz	r3, 80094e0 <_strtod_l+0x8c0>
 80094a0:	4b2e      	ldr	r3, [pc, #184]	; (800955c <_strtod_l+0x93c>)
 80094a2:	ea09 0303 	and.w	r3, r9, r3
 80094a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295
 80094ae:	d81a      	bhi.n	80094e6 <_strtod_l+0x8c6>
 80094b0:	0d1b      	lsrs	r3, r3, #20
 80094b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	4299      	cmp	r1, r3
 80094bc:	d118      	bne.n	80094f0 <_strtod_l+0x8d0>
 80094be:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <_strtod_l+0x948>)
 80094c0:	459a      	cmp	sl, r3
 80094c2:	d102      	bne.n	80094ca <_strtod_l+0x8aa>
 80094c4:	3101      	adds	r1, #1
 80094c6:	f43f adef 	beq.w	80090a8 <_strtod_l+0x488>
 80094ca:	4b24      	ldr	r3, [pc, #144]	; (800955c <_strtod_l+0x93c>)
 80094cc:	ea0a 0303 	and.w	r3, sl, r3
 80094d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	9b04      	ldr	r3, [sp, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1a2      	bne.n	8009424 <_strtod_l+0x804>
 80094de:	e5ed      	b.n	80090bc <_strtod_l+0x49c>
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295
 80094e4:	e7e9      	b.n	80094ba <_strtod_l+0x89a>
 80094e6:	4613      	mov	r3, r2
 80094e8:	e7e7      	b.n	80094ba <_strtod_l+0x89a>
 80094ea:	ea53 0308 	orrs.w	r3, r3, r8
 80094ee:	d08a      	beq.n	8009406 <_strtod_l+0x7e6>
 80094f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f2:	b1e3      	cbz	r3, 800952e <_strtod_l+0x90e>
 80094f4:	ea13 0f0a 	tst.w	r3, sl
 80094f8:	d0ee      	beq.n	80094d8 <_strtod_l+0x8b8>
 80094fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	b1c3      	cbz	r3, 8009536 <_strtod_l+0x916>
 8009504:	f7ff fb6f 	bl	8008be6 <sulp>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	ec51 0b18 	vmov	r0, r1, d8
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	e7de      	b.n	80094d8 <_strtod_l+0x8b8>
 800951a:	4013      	ands	r3, r2
 800951c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009520:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009524:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009528:	f04f 38ff 	mov.w	r8, #4294967295
 800952c:	e7d4      	b.n	80094d8 <_strtod_l+0x8b8>
 800952e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009530:	ea13 0f08 	tst.w	r3, r8
 8009534:	e7e0      	b.n	80094f8 <_strtod_l+0x8d8>
 8009536:	f7ff fb56 	bl	8008be6 <sulp>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	ec51 0b18 	vmov	r0, r1, d8
 8009542:	f7f6 fea1 	bl	8000288 <__aeabi_dsub>
 8009546:	2200      	movs	r2, #0
 8009548:	2300      	movs	r3, #0
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	f7f7 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009552:	2800      	cmp	r0, #0
 8009554:	d0c0      	beq.n	80094d8 <_strtod_l+0x8b8>
 8009556:	e618      	b.n	800918a <_strtod_l+0x56a>
 8009558:	fffffc02 	.word	0xfffffc02
 800955c:	7ff00000 	.word	0x7ff00000
 8009560:	39500000 	.word	0x39500000
 8009564:	000fffff 	.word	0x000fffff
 8009568:	7fefffff 	.word	0x7fefffff
 800956c:	0800b630 	.word	0x0800b630
 8009570:	4659      	mov	r1, fp
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff fac0 	bl	8008af8 <__ratio>
 8009578:	ec57 6b10 	vmov	r6, r7, d0
 800957c:	ee10 0a10 	vmov	r0, s0
 8009580:	2200      	movs	r2, #0
 8009582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 fab2 	bl	8000af0 <__aeabi_dcmple>
 800958c:	2800      	cmp	r0, #0
 800958e:	d071      	beq.n	8009674 <_strtod_l+0xa54>
 8009590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d17c      	bne.n	8009690 <_strtod_l+0xa70>
 8009596:	f1b8 0f00 	cmp.w	r8, #0
 800959a:	d15a      	bne.n	8009652 <_strtod_l+0xa32>
 800959c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d15d      	bne.n	8009660 <_strtod_l+0xa40>
 80095a4:	4b90      	ldr	r3, [pc, #576]	; (80097e8 <_strtod_l+0xbc8>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f7 fa96 	bl	8000adc <__aeabi_dcmplt>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d15c      	bne.n	800966e <_strtod_l+0xa4e>
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	4b8c      	ldr	r3, [pc, #560]	; (80097ec <_strtod_l+0xbcc>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	f7f7 f81c 	bl	80005f8 <__aeabi_dmul>
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80095c8:	9606      	str	r6, [sp, #24]
 80095ca:	9307      	str	r3, [sp, #28]
 80095cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095d4:	4b86      	ldr	r3, [pc, #536]	; (80097f0 <_strtod_l+0xbd0>)
 80095d6:	ea0a 0303 	and.w	r3, sl, r3
 80095da:	930d      	str	r3, [sp, #52]	; 0x34
 80095dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095de:	4b85      	ldr	r3, [pc, #532]	; (80097f4 <_strtod_l+0xbd4>)
 80095e0:	429a      	cmp	r2, r3
 80095e2:	f040 8090 	bne.w	8009706 <_strtod_l+0xae6>
 80095e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80095ea:	ec49 8b10 	vmov	d0, r8, r9
 80095ee:	f7ff f9b9 	bl	8008964 <__ulp>
 80095f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095f6:	ec51 0b10 	vmov	r0, r1, d0
 80095fa:	f7f6 fffd 	bl	80005f8 <__aeabi_dmul>
 80095fe:	4642      	mov	r2, r8
 8009600:	464b      	mov	r3, r9
 8009602:	f7f6 fe43 	bl	800028c <__adddf3>
 8009606:	460b      	mov	r3, r1
 8009608:	4979      	ldr	r1, [pc, #484]	; (80097f0 <_strtod_l+0xbd0>)
 800960a:	4a7b      	ldr	r2, [pc, #492]	; (80097f8 <_strtod_l+0xbd8>)
 800960c:	4019      	ands	r1, r3
 800960e:	4291      	cmp	r1, r2
 8009610:	4680      	mov	r8, r0
 8009612:	d944      	bls.n	800969e <_strtod_l+0xa7e>
 8009614:	ee18 2a90 	vmov	r2, s17
 8009618:	4b78      	ldr	r3, [pc, #480]	; (80097fc <_strtod_l+0xbdc>)
 800961a:	429a      	cmp	r2, r3
 800961c:	d104      	bne.n	8009628 <_strtod_l+0xa08>
 800961e:	ee18 3a10 	vmov	r3, s16
 8009622:	3301      	adds	r3, #1
 8009624:	f43f ad40 	beq.w	80090a8 <_strtod_l+0x488>
 8009628:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80097fc <_strtod_l+0xbdc>
 800962c:	f04f 38ff 	mov.w	r8, #4294967295
 8009630:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009632:	4620      	mov	r0, r4
 8009634:	f7fe fe6a 	bl	800830c <_Bfree>
 8009638:	9905      	ldr	r1, [sp, #20]
 800963a:	4620      	mov	r0, r4
 800963c:	f7fe fe66 	bl	800830c <_Bfree>
 8009640:	4659      	mov	r1, fp
 8009642:	4620      	mov	r0, r4
 8009644:	f7fe fe62 	bl	800830c <_Bfree>
 8009648:	4629      	mov	r1, r5
 800964a:	4620      	mov	r0, r4
 800964c:	f7fe fe5e 	bl	800830c <_Bfree>
 8009650:	e609      	b.n	8009266 <_strtod_l+0x646>
 8009652:	f1b8 0f01 	cmp.w	r8, #1
 8009656:	d103      	bne.n	8009660 <_strtod_l+0xa40>
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	f43f ad95 	beq.w	800918a <_strtod_l+0x56a>
 8009660:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80097b8 <_strtod_l+0xb98>
 8009664:	4f60      	ldr	r7, [pc, #384]	; (80097e8 <_strtod_l+0xbc8>)
 8009666:	ed8d 7b06 	vstr	d7, [sp, #24]
 800966a:	2600      	movs	r6, #0
 800966c:	e7ae      	b.n	80095cc <_strtod_l+0x9ac>
 800966e:	4f5f      	ldr	r7, [pc, #380]	; (80097ec <_strtod_l+0xbcc>)
 8009670:	2600      	movs	r6, #0
 8009672:	e7a7      	b.n	80095c4 <_strtod_l+0x9a4>
 8009674:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <_strtod_l+0xbcc>)
 8009676:	4630      	mov	r0, r6
 8009678:	4639      	mov	r1, r7
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 ffbc 	bl	80005f8 <__aeabi_dmul>
 8009680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d09c      	beq.n	80095c4 <_strtod_l+0x9a4>
 800968a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800968e:	e79d      	b.n	80095cc <_strtod_l+0x9ac>
 8009690:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80097c0 <_strtod_l+0xba0>
 8009694:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009698:	ec57 6b17 	vmov	r6, r7, d7
 800969c:	e796      	b.n	80095cc <_strtod_l+0x9ac>
 800969e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	46ca      	mov	sl, r9
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1c2      	bne.n	8009630 <_strtod_l+0xa10>
 80096aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	051b      	lsls	r3, r3, #20
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d1bb      	bne.n	8009630 <_strtod_l+0xa10>
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fafc 	bl	8000cb8 <__aeabi_d2lz>
 80096c0:	f7f6 ff6c 	bl	800059c <__aeabi_l2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f6 fddc 	bl	8000288 <__aeabi_dsub>
 80096d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096d6:	ea43 0308 	orr.w	r3, r3, r8
 80096da:	4313      	orrs	r3, r2
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	d054      	beq.n	800978c <_strtod_l+0xb6c>
 80096e2:	a339      	add	r3, pc, #228	; (adr r3, 80097c8 <_strtod_l+0xba8>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f7 f9f8 	bl	8000adc <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f47f ace5 	bne.w	80090bc <_strtod_l+0x49c>
 80096f2:	a337      	add	r3, pc, #220	; (adr r3, 80097d0 <_strtod_l+0xbb0>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8009700:	2800      	cmp	r0, #0
 8009702:	d095      	beq.n	8009630 <_strtod_l+0xa10>
 8009704:	e4da      	b.n	80090bc <_strtod_l+0x49c>
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	b333      	cbz	r3, 8009758 <_strtod_l+0xb38>
 800970a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009710:	d822      	bhi.n	8009758 <_strtod_l+0xb38>
 8009712:	a331      	add	r3, pc, #196	; (adr r3, 80097d8 <_strtod_l+0xbb8>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f7 f9e8 	bl	8000af0 <__aeabi_dcmple>
 8009720:	b1a0      	cbz	r0, 800974c <_strtod_l+0xb2c>
 8009722:	4639      	mov	r1, r7
 8009724:	4630      	mov	r0, r6
 8009726:	f7f7 fa3f 	bl	8000ba8 <__aeabi_d2uiz>
 800972a:	2801      	cmp	r0, #1
 800972c:	bf38      	it	cc
 800972e:	2001      	movcc	r0, #1
 8009730:	f7f6 fee8 	bl	8000504 <__aeabi_ui2d>
 8009734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009736:	4606      	mov	r6, r0
 8009738:	460f      	mov	r7, r1
 800973a:	bb23      	cbnz	r3, 8009786 <_strtod_l+0xb66>
 800973c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009740:	9010      	str	r0, [sp, #64]	; 0x40
 8009742:	9311      	str	r3, [sp, #68]	; 0x44
 8009744:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800974c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009750:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	930f      	str	r3, [sp, #60]	; 0x3c
 8009758:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800975c:	eeb0 0a48 	vmov.f32	s0, s16
 8009760:	eef0 0a68 	vmov.f32	s1, s17
 8009764:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009768:	f7ff f8fc 	bl	8008964 <__ulp>
 800976c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009770:	ec53 2b10 	vmov	r2, r3, d0
 8009774:	f7f6 ff40 	bl	80005f8 <__aeabi_dmul>
 8009778:	ec53 2b18 	vmov	r2, r3, d8
 800977c:	f7f6 fd86 	bl	800028c <__adddf3>
 8009780:	4680      	mov	r8, r0
 8009782:	4689      	mov	r9, r1
 8009784:	e78d      	b.n	80096a2 <_strtod_l+0xa82>
 8009786:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800978a:	e7db      	b.n	8009744 <_strtod_l+0xb24>
 800978c:	a314      	add	r3, pc, #80	; (adr r3, 80097e0 <_strtod_l+0xbc0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f7 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8009796:	e7b3      	b.n	8009700 <_strtod_l+0xae0>
 8009798:	2300      	movs	r3, #0
 800979a:	930a      	str	r3, [sp, #40]	; 0x28
 800979c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	f7ff ba7c 	b.w	8008c9e <_strtod_l+0x7e>
 80097a6:	2a65      	cmp	r2, #101	; 0x65
 80097a8:	f43f ab75 	beq.w	8008e96 <_strtod_l+0x276>
 80097ac:	2a45      	cmp	r2, #69	; 0x45
 80097ae:	f43f ab72 	beq.w	8008e96 <_strtod_l+0x276>
 80097b2:	2301      	movs	r3, #1
 80097b4:	f7ff bbaa 	b.w	8008f0c <_strtod_l+0x2ec>
 80097b8:	00000000 	.word	0x00000000
 80097bc:	bff00000 	.word	0xbff00000
 80097c0:	00000000 	.word	0x00000000
 80097c4:	3ff00000 	.word	0x3ff00000
 80097c8:	94a03595 	.word	0x94a03595
 80097cc:	3fdfffff 	.word	0x3fdfffff
 80097d0:	35afe535 	.word	0x35afe535
 80097d4:	3fe00000 	.word	0x3fe00000
 80097d8:	ffc00000 	.word	0xffc00000
 80097dc:	41dfffff 	.word	0x41dfffff
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fcfffff 	.word	0x3fcfffff
 80097e8:	3ff00000 	.word	0x3ff00000
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	7ff00000 	.word	0x7ff00000
 80097f4:	7fe00000 	.word	0x7fe00000
 80097f8:	7c9fffff 	.word	0x7c9fffff
 80097fc:	7fefffff 	.word	0x7fefffff

08009800 <_strtod_r>:
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <_strtod_r+0x8>)
 8009802:	f7ff ba0d 	b.w	8008c20 <_strtod_l>
 8009806:	bf00      	nop
 8009808:	20000068 	.word	0x20000068

0800980c <_strtol_l.constprop.0>:
 800980c:	2b01      	cmp	r3, #1
 800980e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009812:	d001      	beq.n	8009818 <_strtol_l.constprop.0+0xc>
 8009814:	2b24      	cmp	r3, #36	; 0x24
 8009816:	d906      	bls.n	8009826 <_strtol_l.constprop.0+0x1a>
 8009818:	f7fd fd82 	bl	8007320 <__errno>
 800981c:	2316      	movs	r3, #22
 800981e:	6003      	str	r3, [r0, #0]
 8009820:	2000      	movs	r0, #0
 8009822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009826:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800990c <_strtol_l.constprop.0+0x100>
 800982a:	460d      	mov	r5, r1
 800982c:	462e      	mov	r6, r5
 800982e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009832:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009836:	f017 0708 	ands.w	r7, r7, #8
 800983a:	d1f7      	bne.n	800982c <_strtol_l.constprop.0+0x20>
 800983c:	2c2d      	cmp	r4, #45	; 0x2d
 800983e:	d132      	bne.n	80098a6 <_strtol_l.constprop.0+0x9a>
 8009840:	782c      	ldrb	r4, [r5, #0]
 8009842:	2701      	movs	r7, #1
 8009844:	1cb5      	adds	r5, r6, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d05b      	beq.n	8009902 <_strtol_l.constprop.0+0xf6>
 800984a:	2b10      	cmp	r3, #16
 800984c:	d109      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 800984e:	2c30      	cmp	r4, #48	; 0x30
 8009850:	d107      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 8009852:	782c      	ldrb	r4, [r5, #0]
 8009854:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009858:	2c58      	cmp	r4, #88	; 0x58
 800985a:	d14d      	bne.n	80098f8 <_strtol_l.constprop.0+0xec>
 800985c:	786c      	ldrb	r4, [r5, #1]
 800985e:	2310      	movs	r3, #16
 8009860:	3502      	adds	r5, #2
 8009862:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009866:	f108 38ff 	add.w	r8, r8, #4294967295
 800986a:	f04f 0e00 	mov.w	lr, #0
 800986e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009872:	4676      	mov	r6, lr
 8009874:	fb03 8a19 	mls	sl, r3, r9, r8
 8009878:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800987c:	f1bc 0f09 	cmp.w	ip, #9
 8009880:	d816      	bhi.n	80098b0 <_strtol_l.constprop.0+0xa4>
 8009882:	4664      	mov	r4, ip
 8009884:	42a3      	cmp	r3, r4
 8009886:	dd24      	ble.n	80098d2 <_strtol_l.constprop.0+0xc6>
 8009888:	f1be 3fff 	cmp.w	lr, #4294967295
 800988c:	d008      	beq.n	80098a0 <_strtol_l.constprop.0+0x94>
 800988e:	45b1      	cmp	r9, r6
 8009890:	d31c      	bcc.n	80098cc <_strtol_l.constprop.0+0xc0>
 8009892:	d101      	bne.n	8009898 <_strtol_l.constprop.0+0x8c>
 8009894:	45a2      	cmp	sl, r4
 8009896:	db19      	blt.n	80098cc <_strtol_l.constprop.0+0xc0>
 8009898:	fb06 4603 	mla	r6, r6, r3, r4
 800989c:	f04f 0e01 	mov.w	lr, #1
 80098a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098a4:	e7e8      	b.n	8009878 <_strtol_l.constprop.0+0x6c>
 80098a6:	2c2b      	cmp	r4, #43	; 0x2b
 80098a8:	bf04      	itt	eq
 80098aa:	782c      	ldrbeq	r4, [r5, #0]
 80098ac:	1cb5      	addeq	r5, r6, #2
 80098ae:	e7ca      	b.n	8009846 <_strtol_l.constprop.0+0x3a>
 80098b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098b4:	f1bc 0f19 	cmp.w	ip, #25
 80098b8:	d801      	bhi.n	80098be <_strtol_l.constprop.0+0xb2>
 80098ba:	3c37      	subs	r4, #55	; 0x37
 80098bc:	e7e2      	b.n	8009884 <_strtol_l.constprop.0+0x78>
 80098be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098c2:	f1bc 0f19 	cmp.w	ip, #25
 80098c6:	d804      	bhi.n	80098d2 <_strtol_l.constprop.0+0xc6>
 80098c8:	3c57      	subs	r4, #87	; 0x57
 80098ca:	e7db      	b.n	8009884 <_strtol_l.constprop.0+0x78>
 80098cc:	f04f 3eff 	mov.w	lr, #4294967295
 80098d0:	e7e6      	b.n	80098a0 <_strtol_l.constprop.0+0x94>
 80098d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80098d6:	d105      	bne.n	80098e4 <_strtol_l.constprop.0+0xd8>
 80098d8:	2322      	movs	r3, #34	; 0x22
 80098da:	6003      	str	r3, [r0, #0]
 80098dc:	4646      	mov	r6, r8
 80098de:	b942      	cbnz	r2, 80098f2 <_strtol_l.constprop.0+0xe6>
 80098e0:	4630      	mov	r0, r6
 80098e2:	e79e      	b.n	8009822 <_strtol_l.constprop.0+0x16>
 80098e4:	b107      	cbz	r7, 80098e8 <_strtol_l.constprop.0+0xdc>
 80098e6:	4276      	negs	r6, r6
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d0f9      	beq.n	80098e0 <_strtol_l.constprop.0+0xd4>
 80098ec:	f1be 0f00 	cmp.w	lr, #0
 80098f0:	d000      	beq.n	80098f4 <_strtol_l.constprop.0+0xe8>
 80098f2:	1e69      	subs	r1, r5, #1
 80098f4:	6011      	str	r1, [r2, #0]
 80098f6:	e7f3      	b.n	80098e0 <_strtol_l.constprop.0+0xd4>
 80098f8:	2430      	movs	r4, #48	; 0x30
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1b1      	bne.n	8009862 <_strtol_l.constprop.0+0x56>
 80098fe:	2308      	movs	r3, #8
 8009900:	e7af      	b.n	8009862 <_strtol_l.constprop.0+0x56>
 8009902:	2c30      	cmp	r4, #48	; 0x30
 8009904:	d0a5      	beq.n	8009852 <_strtol_l.constprop.0+0x46>
 8009906:	230a      	movs	r3, #10
 8009908:	e7ab      	b.n	8009862 <_strtol_l.constprop.0+0x56>
 800990a:	bf00      	nop
 800990c:	0800b659 	.word	0x0800b659

08009910 <_strtol_r>:
 8009910:	f7ff bf7c 	b.w	800980c <_strtol_l.constprop.0>

08009914 <__ssputs_r>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	688e      	ldr	r6, [r1, #8]
 800991a:	461f      	mov	r7, r3
 800991c:	42be      	cmp	r6, r7
 800991e:	680b      	ldr	r3, [r1, #0]
 8009920:	4682      	mov	sl, r0
 8009922:	460c      	mov	r4, r1
 8009924:	4690      	mov	r8, r2
 8009926:	d82c      	bhi.n	8009982 <__ssputs_r+0x6e>
 8009928:	898a      	ldrh	r2, [r1, #12]
 800992a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800992e:	d026      	beq.n	800997e <__ssputs_r+0x6a>
 8009930:	6965      	ldr	r5, [r4, #20]
 8009932:	6909      	ldr	r1, [r1, #16]
 8009934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009938:	eba3 0901 	sub.w	r9, r3, r1
 800993c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009940:	1c7b      	adds	r3, r7, #1
 8009942:	444b      	add	r3, r9
 8009944:	106d      	asrs	r5, r5, #1
 8009946:	429d      	cmp	r5, r3
 8009948:	bf38      	it	cc
 800994a:	461d      	movcc	r5, r3
 800994c:	0553      	lsls	r3, r2, #21
 800994e:	d527      	bpl.n	80099a0 <__ssputs_r+0x8c>
 8009950:	4629      	mov	r1, r5
 8009952:	f7fe fc0f 	bl	8008174 <_malloc_r>
 8009956:	4606      	mov	r6, r0
 8009958:	b360      	cbz	r0, 80099b4 <__ssputs_r+0xa0>
 800995a:	6921      	ldr	r1, [r4, #16]
 800995c:	464a      	mov	r2, r9
 800995e:	f000 fdaf 	bl	800a4c0 <memcpy>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	6126      	str	r6, [r4, #16]
 8009970:	6165      	str	r5, [r4, #20]
 8009972:	444e      	add	r6, r9
 8009974:	eba5 0509 	sub.w	r5, r5, r9
 8009978:	6026      	str	r6, [r4, #0]
 800997a:	60a5      	str	r5, [r4, #8]
 800997c:	463e      	mov	r6, r7
 800997e:	42be      	cmp	r6, r7
 8009980:	d900      	bls.n	8009984 <__ssputs_r+0x70>
 8009982:	463e      	mov	r6, r7
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	4632      	mov	r2, r6
 8009988:	4641      	mov	r1, r8
 800998a:	f000 fd5c 	bl	800a446 <memmove>
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	1b9b      	subs	r3, r3, r6
 8009992:	60a3      	str	r3, [r4, #8]
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	4433      	add	r3, r6
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	2000      	movs	r0, #0
 800999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a0:	462a      	mov	r2, r5
 80099a2:	f001 f942 	bl	800ac2a <_realloc_r>
 80099a6:	4606      	mov	r6, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1e0      	bne.n	800996e <__ssputs_r+0x5a>
 80099ac:	6921      	ldr	r1, [r4, #16]
 80099ae:	4650      	mov	r0, sl
 80099b0:	f7fe fb6c 	bl	800808c <_free_r>
 80099b4:	230c      	movs	r3, #12
 80099b6:	f8ca 3000 	str.w	r3, [sl]
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	e7e9      	b.n	800999c <__ssputs_r+0x88>

080099c8 <_svfiprintf_r>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	4698      	mov	r8, r3
 80099ce:	898b      	ldrh	r3, [r1, #12]
 80099d0:	061b      	lsls	r3, r3, #24
 80099d2:	b09d      	sub	sp, #116	; 0x74
 80099d4:	4607      	mov	r7, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	4614      	mov	r4, r2
 80099da:	d50e      	bpl.n	80099fa <_svfiprintf_r+0x32>
 80099dc:	690b      	ldr	r3, [r1, #16]
 80099de:	b963      	cbnz	r3, 80099fa <_svfiprintf_r+0x32>
 80099e0:	2140      	movs	r1, #64	; 0x40
 80099e2:	f7fe fbc7 	bl	8008174 <_malloc_r>
 80099e6:	6028      	str	r0, [r5, #0]
 80099e8:	6128      	str	r0, [r5, #16]
 80099ea:	b920      	cbnz	r0, 80099f6 <_svfiprintf_r+0x2e>
 80099ec:	230c      	movs	r3, #12
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e0d0      	b.n	8009b98 <_svfiprintf_r+0x1d0>
 80099f6:	2340      	movs	r3, #64	; 0x40
 80099f8:	616b      	str	r3, [r5, #20]
 80099fa:	2300      	movs	r3, #0
 80099fc:	9309      	str	r3, [sp, #36]	; 0x24
 80099fe:	2320      	movs	r3, #32
 8009a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a08:	2330      	movs	r3, #48	; 0x30
 8009a0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bb0 <_svfiprintf_r+0x1e8>
 8009a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a12:	f04f 0901 	mov.w	r9, #1
 8009a16:	4623      	mov	r3, r4
 8009a18:	469a      	mov	sl, r3
 8009a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a1e:	b10a      	cbz	r2, 8009a24 <_svfiprintf_r+0x5c>
 8009a20:	2a25      	cmp	r2, #37	; 0x25
 8009a22:	d1f9      	bne.n	8009a18 <_svfiprintf_r+0x50>
 8009a24:	ebba 0b04 	subs.w	fp, sl, r4
 8009a28:	d00b      	beq.n	8009a42 <_svfiprintf_r+0x7a>
 8009a2a:	465b      	mov	r3, fp
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ff6f 	bl	8009914 <__ssputs_r>
 8009a36:	3001      	adds	r0, #1
 8009a38:	f000 80a9 	beq.w	8009b8e <_svfiprintf_r+0x1c6>
 8009a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a3e:	445a      	add	r2, fp
 8009a40:	9209      	str	r2, [sp, #36]	; 0x24
 8009a42:	f89a 3000 	ldrb.w	r3, [sl]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 80a1 	beq.w	8009b8e <_svfiprintf_r+0x1c6>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a56:	f10a 0a01 	add.w	sl, sl, #1
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9307      	str	r3, [sp, #28]
 8009a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a62:	931a      	str	r3, [sp, #104]	; 0x68
 8009a64:	4654      	mov	r4, sl
 8009a66:	2205      	movs	r2, #5
 8009a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6c:	4850      	ldr	r0, [pc, #320]	; (8009bb0 <_svfiprintf_r+0x1e8>)
 8009a6e:	f7f6 fbaf 	bl	80001d0 <memchr>
 8009a72:	9a04      	ldr	r2, [sp, #16]
 8009a74:	b9d8      	cbnz	r0, 8009aae <_svfiprintf_r+0xe6>
 8009a76:	06d0      	lsls	r0, r2, #27
 8009a78:	bf44      	itt	mi
 8009a7a:	2320      	movmi	r3, #32
 8009a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a80:	0711      	lsls	r1, r2, #28
 8009a82:	bf44      	itt	mi
 8009a84:	232b      	movmi	r3, #43	; 0x2b
 8009a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a90:	d015      	beq.n	8009abe <_svfiprintf_r+0xf6>
 8009a92:	9a07      	ldr	r2, [sp, #28]
 8009a94:	4654      	mov	r4, sl
 8009a96:	2000      	movs	r0, #0
 8009a98:	f04f 0c0a 	mov.w	ip, #10
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa2:	3b30      	subs	r3, #48	; 0x30
 8009aa4:	2b09      	cmp	r3, #9
 8009aa6:	d94d      	bls.n	8009b44 <_svfiprintf_r+0x17c>
 8009aa8:	b1b0      	cbz	r0, 8009ad8 <_svfiprintf_r+0x110>
 8009aaa:	9207      	str	r2, [sp, #28]
 8009aac:	e014      	b.n	8009ad8 <_svfiprintf_r+0x110>
 8009aae:	eba0 0308 	sub.w	r3, r0, r8
 8009ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	46a2      	mov	sl, r4
 8009abc:	e7d2      	b.n	8009a64 <_svfiprintf_r+0x9c>
 8009abe:	9b03      	ldr	r3, [sp, #12]
 8009ac0:	1d19      	adds	r1, r3, #4
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	9103      	str	r1, [sp, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bfbb      	ittet	lt
 8009aca:	425b      	neglt	r3, r3
 8009acc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad0:	9307      	strge	r3, [sp, #28]
 8009ad2:	9307      	strlt	r3, [sp, #28]
 8009ad4:	bfb8      	it	lt
 8009ad6:	9204      	strlt	r2, [sp, #16]
 8009ad8:	7823      	ldrb	r3, [r4, #0]
 8009ada:	2b2e      	cmp	r3, #46	; 0x2e
 8009adc:	d10c      	bne.n	8009af8 <_svfiprintf_r+0x130>
 8009ade:	7863      	ldrb	r3, [r4, #1]
 8009ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae2:	d134      	bne.n	8009b4e <_svfiprintf_r+0x186>
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	1d1a      	adds	r2, r3, #4
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	9203      	str	r2, [sp, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bfb8      	it	lt
 8009af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009af4:	3402      	adds	r4, #2
 8009af6:	9305      	str	r3, [sp, #20]
 8009af8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009bc0 <_svfiprintf_r+0x1f8>
 8009afc:	7821      	ldrb	r1, [r4, #0]
 8009afe:	2203      	movs	r2, #3
 8009b00:	4650      	mov	r0, sl
 8009b02:	f7f6 fb65 	bl	80001d0 <memchr>
 8009b06:	b138      	cbz	r0, 8009b18 <_svfiprintf_r+0x150>
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	eba0 000a 	sub.w	r0, r0, sl
 8009b0e:	2240      	movs	r2, #64	; 0x40
 8009b10:	4082      	lsls	r2, r0
 8009b12:	4313      	orrs	r3, r2
 8009b14:	3401      	adds	r4, #1
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1c:	4825      	ldr	r0, [pc, #148]	; (8009bb4 <_svfiprintf_r+0x1ec>)
 8009b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b22:	2206      	movs	r2, #6
 8009b24:	f7f6 fb54 	bl	80001d0 <memchr>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d038      	beq.n	8009b9e <_svfiprintf_r+0x1d6>
 8009b2c:	4b22      	ldr	r3, [pc, #136]	; (8009bb8 <_svfiprintf_r+0x1f0>)
 8009b2e:	bb1b      	cbnz	r3, 8009b78 <_svfiprintf_r+0x1b0>
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	3307      	adds	r3, #7
 8009b34:	f023 0307 	bic.w	r3, r3, #7
 8009b38:	3308      	adds	r3, #8
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3e:	4433      	add	r3, r6
 8009b40:	9309      	str	r3, [sp, #36]	; 0x24
 8009b42:	e768      	b.n	8009a16 <_svfiprintf_r+0x4e>
 8009b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b48:	460c      	mov	r4, r1
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e7a6      	b.n	8009a9c <_svfiprintf_r+0xd4>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	3401      	adds	r4, #1
 8009b52:	9305      	str	r3, [sp, #20]
 8009b54:	4619      	mov	r1, r3
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b60:	3a30      	subs	r2, #48	; 0x30
 8009b62:	2a09      	cmp	r2, #9
 8009b64:	d903      	bls.n	8009b6e <_svfiprintf_r+0x1a6>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0c6      	beq.n	8009af8 <_svfiprintf_r+0x130>
 8009b6a:	9105      	str	r1, [sp, #20]
 8009b6c:	e7c4      	b.n	8009af8 <_svfiprintf_r+0x130>
 8009b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b72:	4604      	mov	r4, r0
 8009b74:	2301      	movs	r3, #1
 8009b76:	e7f0      	b.n	8009b5a <_svfiprintf_r+0x192>
 8009b78:	ab03      	add	r3, sp, #12
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	462a      	mov	r2, r5
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <_svfiprintf_r+0x1f4>)
 8009b80:	a904      	add	r1, sp, #16
 8009b82:	4638      	mov	r0, r7
 8009b84:	f7fc fc4c 	bl	8006420 <_printf_float>
 8009b88:	1c42      	adds	r2, r0, #1
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	d1d6      	bne.n	8009b3c <_svfiprintf_r+0x174>
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	065b      	lsls	r3, r3, #25
 8009b92:	f53f af2d 	bmi.w	80099f0 <_svfiprintf_r+0x28>
 8009b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b98:	b01d      	add	sp, #116	; 0x74
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	ab03      	add	r3, sp, #12
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <_svfiprintf_r+0x1f4>)
 8009ba6:	a904      	add	r1, sp, #16
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7fc fedd 	bl	8006968 <_printf_i>
 8009bae:	e7eb      	b.n	8009b88 <_svfiprintf_r+0x1c0>
 8009bb0:	0800b759 	.word	0x0800b759
 8009bb4:	0800b763 	.word	0x0800b763
 8009bb8:	08006421 	.word	0x08006421
 8009bbc:	08009915 	.word	0x08009915
 8009bc0:	0800b75f 	.word	0x0800b75f

08009bc4 <_sungetc_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	1c4b      	adds	r3, r1, #1
 8009bc8:	4614      	mov	r4, r2
 8009bca:	d103      	bne.n	8009bd4 <_sungetc_r+0x10>
 8009bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	8993      	ldrh	r3, [r2, #12]
 8009bd6:	f023 0320 	bic.w	r3, r3, #32
 8009bda:	8193      	strh	r3, [r2, #12]
 8009bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bde:	6852      	ldr	r2, [r2, #4]
 8009be0:	b2cd      	uxtb	r5, r1
 8009be2:	b18b      	cbz	r3, 8009c08 <_sungetc_r+0x44>
 8009be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009be6:	4293      	cmp	r3, r2
 8009be8:	dd08      	ble.n	8009bfc <_sungetc_r+0x38>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	1e5a      	subs	r2, r3, #1
 8009bee:	6022      	str	r2, [r4, #0]
 8009bf0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009bf4:	6863      	ldr	r3, [r4, #4]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	e7e9      	b.n	8009bd0 <_sungetc_r+0xc>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	f000 fbe8 	bl	800a3d2 <__submore>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d0f1      	beq.n	8009bea <_sungetc_r+0x26>
 8009c06:	e7e1      	b.n	8009bcc <_sungetc_r+0x8>
 8009c08:	6921      	ldr	r1, [r4, #16]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	b151      	cbz	r1, 8009c24 <_sungetc_r+0x60>
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	d208      	bcs.n	8009c24 <_sungetc_r+0x60>
 8009c12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009c16:	42a9      	cmp	r1, r5
 8009c18:	d104      	bne.n	8009c24 <_sungetc_r+0x60>
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	6062      	str	r2, [r4, #4]
 8009c22:	e7d5      	b.n	8009bd0 <_sungetc_r+0xc>
 8009c24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c2e:	2303      	movs	r3, #3
 8009c30:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c32:	4623      	mov	r3, r4
 8009c34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e7dc      	b.n	8009bf8 <_sungetc_r+0x34>

08009c3e <__ssrefill_r>:
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c44:	b169      	cbz	r1, 8009c62 <__ssrefill_r+0x24>
 8009c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	d001      	beq.n	8009c52 <__ssrefill_r+0x14>
 8009c4e:	f7fe fa1d 	bl	800808c <_free_r>
 8009c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c54:	6063      	str	r3, [r4, #4]
 8009c56:	2000      	movs	r0, #0
 8009c58:	6360      	str	r0, [r4, #52]	; 0x34
 8009c5a:	b113      	cbz	r3, 8009c62 <__ssrefill_r+0x24>
 8009c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	6063      	str	r3, [r4, #4]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0320 	orr.w	r3, r3, #32
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	e7f3      	b.n	8009c60 <__ssrefill_r+0x22>

08009c78 <__ssvfiscanf_r>:
 8009c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c82:	2100      	movs	r1, #0
 8009c84:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c88:	49a6      	ldr	r1, [pc, #664]	; (8009f24 <__ssvfiscanf_r+0x2ac>)
 8009c8a:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c8c:	f10d 0804 	add.w	r8, sp, #4
 8009c90:	49a5      	ldr	r1, [pc, #660]	; (8009f28 <__ssvfiscanf_r+0x2b0>)
 8009c92:	4fa6      	ldr	r7, [pc, #664]	; (8009f2c <__ssvfiscanf_r+0x2b4>)
 8009c94:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009f30 <__ssvfiscanf_r+0x2b8>
 8009c98:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	7813      	ldrb	r3, [r2, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 815a 	beq.w	8009f5e <__ssvfiscanf_r+0x2e6>
 8009caa:	5cf9      	ldrb	r1, [r7, r3]
 8009cac:	f011 0108 	ands.w	r1, r1, #8
 8009cb0:	f102 0501 	add.w	r5, r2, #1
 8009cb4:	d019      	beq.n	8009cea <__ssvfiscanf_r+0x72>
 8009cb6:	6863      	ldr	r3, [r4, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd0f      	ble.n	8009cdc <__ssvfiscanf_r+0x64>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	781a      	ldrb	r2, [r3, #0]
 8009cc0:	5cba      	ldrb	r2, [r7, r2]
 8009cc2:	0712      	lsls	r2, r2, #28
 8009cc4:	d401      	bmi.n	8009cca <__ssvfiscanf_r+0x52>
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	e7eb      	b.n	8009ca2 <__ssvfiscanf_r+0x2a>
 8009cca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ccc:	3201      	adds	r2, #1
 8009cce:	9245      	str	r2, [sp, #276]	; 0x114
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	3a01      	subs	r2, #1
 8009cd6:	6062      	str	r2, [r4, #4]
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	e7ec      	b.n	8009cb6 <__ssvfiscanf_r+0x3e>
 8009cdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4798      	blx	r3
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0e9      	beq.n	8009cbc <__ssvfiscanf_r+0x44>
 8009ce8:	e7ed      	b.n	8009cc6 <__ssvfiscanf_r+0x4e>
 8009cea:	2b25      	cmp	r3, #37	; 0x25
 8009cec:	d012      	beq.n	8009d14 <__ssvfiscanf_r+0x9c>
 8009cee:	469a      	mov	sl, r3
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f340 8091 	ble.w	8009e1a <__ssvfiscanf_r+0x1a2>
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	7813      	ldrb	r3, [r2, #0]
 8009cfc:	4553      	cmp	r3, sl
 8009cfe:	f040 812e 	bne.w	8009f5e <__ssvfiscanf_r+0x2e6>
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	6022      	str	r2, [r4, #0]
 8009d10:	9345      	str	r3, [sp, #276]	; 0x114
 8009d12:	e7d8      	b.n	8009cc6 <__ssvfiscanf_r+0x4e>
 8009d14:	9141      	str	r1, [sp, #260]	; 0x104
 8009d16:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d18:	7853      	ldrb	r3, [r2, #1]
 8009d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1c:	bf02      	ittt	eq
 8009d1e:	2310      	moveq	r3, #16
 8009d20:	1c95      	addeq	r5, r2, #2
 8009d22:	9341      	streq	r3, [sp, #260]	; 0x104
 8009d24:	220a      	movs	r2, #10
 8009d26:	46aa      	mov	sl, r5
 8009d28:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009d2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d30:	2b09      	cmp	r3, #9
 8009d32:	d91c      	bls.n	8009d6e <__ssvfiscanf_r+0xf6>
 8009d34:	487e      	ldr	r0, [pc, #504]	; (8009f30 <__ssvfiscanf_r+0x2b8>)
 8009d36:	2203      	movs	r2, #3
 8009d38:	f7f6 fa4a 	bl	80001d0 <memchr>
 8009d3c:	b138      	cbz	r0, 8009d4e <__ssvfiscanf_r+0xd6>
 8009d3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d40:	eba0 0009 	sub.w	r0, r0, r9
 8009d44:	2301      	movs	r3, #1
 8009d46:	4083      	lsls	r3, r0
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	9341      	str	r3, [sp, #260]	; 0x104
 8009d4c:	4655      	mov	r5, sl
 8009d4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d52:	2b78      	cmp	r3, #120	; 0x78
 8009d54:	d806      	bhi.n	8009d64 <__ssvfiscanf_r+0xec>
 8009d56:	2b57      	cmp	r3, #87	; 0x57
 8009d58:	d810      	bhi.n	8009d7c <__ssvfiscanf_r+0x104>
 8009d5a:	2b25      	cmp	r3, #37	; 0x25
 8009d5c:	d0c7      	beq.n	8009cee <__ssvfiscanf_r+0x76>
 8009d5e:	d857      	bhi.n	8009e10 <__ssvfiscanf_r+0x198>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d065      	beq.n	8009e30 <__ssvfiscanf_r+0x1b8>
 8009d64:	2303      	movs	r3, #3
 8009d66:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d68:	230a      	movs	r3, #10
 8009d6a:	9342      	str	r3, [sp, #264]	; 0x108
 8009d6c:	e076      	b.n	8009e5c <__ssvfiscanf_r+0x1e4>
 8009d6e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d70:	fb02 1103 	mla	r1, r2, r3, r1
 8009d74:	3930      	subs	r1, #48	; 0x30
 8009d76:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d78:	4655      	mov	r5, sl
 8009d7a:	e7d4      	b.n	8009d26 <__ssvfiscanf_r+0xae>
 8009d7c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d80:	2a20      	cmp	r2, #32
 8009d82:	d8ef      	bhi.n	8009d64 <__ssvfiscanf_r+0xec>
 8009d84:	a101      	add	r1, pc, #4	; (adr r1, 8009d8c <__ssvfiscanf_r+0x114>)
 8009d86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009e3f 	.word	0x08009e3f
 8009d90:	08009d65 	.word	0x08009d65
 8009d94:	08009d65 	.word	0x08009d65
 8009d98:	08009e9d 	.word	0x08009e9d
 8009d9c:	08009d65 	.word	0x08009d65
 8009da0:	08009d65 	.word	0x08009d65
 8009da4:	08009d65 	.word	0x08009d65
 8009da8:	08009d65 	.word	0x08009d65
 8009dac:	08009d65 	.word	0x08009d65
 8009db0:	08009d65 	.word	0x08009d65
 8009db4:	08009d65 	.word	0x08009d65
 8009db8:	08009eb3 	.word	0x08009eb3
 8009dbc:	08009e99 	.word	0x08009e99
 8009dc0:	08009e17 	.word	0x08009e17
 8009dc4:	08009e17 	.word	0x08009e17
 8009dc8:	08009e17 	.word	0x08009e17
 8009dcc:	08009d65 	.word	0x08009d65
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009d65 	.word	0x08009d65
 8009dd8:	08009d65 	.word	0x08009d65
 8009ddc:	08009d65 	.word	0x08009d65
 8009de0:	08009d65 	.word	0x08009d65
 8009de4:	08009ec3 	.word	0x08009ec3
 8009de8:	08009e91 	.word	0x08009e91
 8009dec:	08009e37 	.word	0x08009e37
 8009df0:	08009d65 	.word	0x08009d65
 8009df4:	08009d65 	.word	0x08009d65
 8009df8:	08009ebf 	.word	0x08009ebf
 8009dfc:	08009d65 	.word	0x08009d65
 8009e00:	08009e99 	.word	0x08009e99
 8009e04:	08009d65 	.word	0x08009d65
 8009e08:	08009d65 	.word	0x08009d65
 8009e0c:	08009e3f 	.word	0x08009e3f
 8009e10:	3b45      	subs	r3, #69	; 0x45
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d8a6      	bhi.n	8009d64 <__ssvfiscanf_r+0xec>
 8009e16:	2305      	movs	r3, #5
 8009e18:	e01f      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009e1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4798      	blx	r3
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f43f af68 	beq.w	8009cf8 <__ssvfiscanf_r+0x80>
 8009e28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f040 808d 	bne.w	8009f4a <__ssvfiscanf_r+0x2d2>
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e08f      	b.n	8009f56 <__ssvfiscanf_r+0x2de>
 8009e36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e38:	f042 0220 	orr.w	r2, r2, #32
 8009e3c:	9241      	str	r2, [sp, #260]	; 0x104
 8009e3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e44:	9241      	str	r2, [sp, #260]	; 0x104
 8009e46:	2210      	movs	r2, #16
 8009e48:	2b6f      	cmp	r3, #111	; 0x6f
 8009e4a:	9242      	str	r2, [sp, #264]	; 0x108
 8009e4c:	bf34      	ite	cc
 8009e4e:	2303      	movcc	r3, #3
 8009e50:	2304      	movcs	r3, #4
 8009e52:	e002      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009e54:	2300      	movs	r3, #0
 8009e56:	9342      	str	r3, [sp, #264]	; 0x108
 8009e58:	2303      	movs	r3, #3
 8009e5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e5c:	6863      	ldr	r3, [r4, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd3d      	ble.n	8009ede <__ssvfiscanf_r+0x266>
 8009e62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e64:	0659      	lsls	r1, r3, #25
 8009e66:	d404      	bmi.n	8009e72 <__ssvfiscanf_r+0x1fa>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	5cba      	ldrb	r2, [r7, r2]
 8009e6e:	0712      	lsls	r2, r2, #28
 8009e70:	d43c      	bmi.n	8009eec <__ssvfiscanf_r+0x274>
 8009e72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	dc4b      	bgt.n	8009f10 <__ssvfiscanf_r+0x298>
 8009e78:	466b      	mov	r3, sp
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	a941      	add	r1, sp, #260	; 0x104
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f000 f872 	bl	8009f68 <_scanf_chars>
 8009e84:	2801      	cmp	r0, #1
 8009e86:	d06a      	beq.n	8009f5e <__ssvfiscanf_r+0x2e6>
 8009e88:	2802      	cmp	r0, #2
 8009e8a:	f47f af1c 	bne.w	8009cc6 <__ssvfiscanf_r+0x4e>
 8009e8e:	e7cb      	b.n	8009e28 <__ssvfiscanf_r+0x1b0>
 8009e90:	2308      	movs	r3, #8
 8009e92:	9342      	str	r3, [sp, #264]	; 0x108
 8009e94:	2304      	movs	r3, #4
 8009e96:	e7e0      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009e98:	220a      	movs	r2, #10
 8009e9a:	e7d5      	b.n	8009e48 <__ssvfiscanf_r+0x1d0>
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f000 fa5e 	bl	800a360 <__sccl>
 8009ea4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eaa:	9341      	str	r3, [sp, #260]	; 0x104
 8009eac:	4605      	mov	r5, r0
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e7d3      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009eb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb8:	9341      	str	r3, [sp, #260]	; 0x104
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e7cd      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e7cb      	b.n	8009e5a <__ssvfiscanf_r+0x1e2>
 8009ec2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009ec4:	06c3      	lsls	r3, r0, #27
 8009ec6:	f53f aefe 	bmi.w	8009cc6 <__ssvfiscanf_r+0x4e>
 8009eca:	9b00      	ldr	r3, [sp, #0]
 8009ecc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ece:	1d19      	adds	r1, r3, #4
 8009ed0:	9100      	str	r1, [sp, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	07c0      	lsls	r0, r0, #31
 8009ed6:	bf4c      	ite	mi
 8009ed8:	801a      	strhmi	r2, [r3, #0]
 8009eda:	601a      	strpl	r2, [r3, #0]
 8009edc:	e6f3      	b.n	8009cc6 <__ssvfiscanf_r+0x4e>
 8009ede:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4798      	blx	r3
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d0bb      	beq.n	8009e62 <__ssvfiscanf_r+0x1ea>
 8009eea:	e79d      	b.n	8009e28 <__ssvfiscanf_r+0x1b0>
 8009eec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009eee:	3201      	adds	r2, #1
 8009ef0:	9245      	str	r2, [sp, #276]	; 0x114
 8009ef2:	6862      	ldr	r2, [r4, #4]
 8009ef4:	3a01      	subs	r2, #1
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	6062      	str	r2, [r4, #4]
 8009efa:	dd02      	ble.n	8009f02 <__ssvfiscanf_r+0x28a>
 8009efc:	3301      	adds	r3, #1
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	e7b2      	b.n	8009e68 <__ssvfiscanf_r+0x1f0>
 8009f02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f04:	4621      	mov	r1, r4
 8009f06:	4630      	mov	r0, r6
 8009f08:	4798      	blx	r3
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d0ac      	beq.n	8009e68 <__ssvfiscanf_r+0x1f0>
 8009f0e:	e78b      	b.n	8009e28 <__ssvfiscanf_r+0x1b0>
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	dc0f      	bgt.n	8009f34 <__ssvfiscanf_r+0x2bc>
 8009f14:	466b      	mov	r3, sp
 8009f16:	4622      	mov	r2, r4
 8009f18:	a941      	add	r1, sp, #260	; 0x104
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f000 f87e 	bl	800a01c <_scanf_i>
 8009f20:	e7b0      	b.n	8009e84 <__ssvfiscanf_r+0x20c>
 8009f22:	bf00      	nop
 8009f24:	08009bc5 	.word	0x08009bc5
 8009f28:	08009c3f 	.word	0x08009c3f
 8009f2c:	0800b659 	.word	0x0800b659
 8009f30:	0800b75f 	.word	0x0800b75f
 8009f34:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <__ssvfiscanf_r+0x2ec>)
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f43f aec5 	beq.w	8009cc6 <__ssvfiscanf_r+0x4e>
 8009f3c:	466b      	mov	r3, sp
 8009f3e:	4622      	mov	r2, r4
 8009f40:	a941      	add	r1, sp, #260	; 0x104
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7fc fe32 	bl	8006bac <_scanf_float>
 8009f48:	e79c      	b.n	8009e84 <__ssvfiscanf_r+0x20c>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f50:	bf18      	it	ne
 8009f52:	f04f 30ff 	movne.w	r0, #4294967295
 8009f56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f60:	e7f9      	b.n	8009f56 <__ssvfiscanf_r+0x2de>
 8009f62:	bf00      	nop
 8009f64:	08006bad 	.word	0x08006bad

08009f68 <_scanf_chars>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	4615      	mov	r5, r2
 8009f6e:	688a      	ldr	r2, [r1, #8]
 8009f70:	4680      	mov	r8, r0
 8009f72:	460c      	mov	r4, r1
 8009f74:	b932      	cbnz	r2, 8009f84 <_scanf_chars+0x1c>
 8009f76:	698a      	ldr	r2, [r1, #24]
 8009f78:	2a00      	cmp	r2, #0
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2201      	moveq	r2, #1
 8009f7e:	f04f 32ff 	movne.w	r2, #4294967295
 8009f82:	608a      	str	r2, [r1, #8]
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a018 <_scanf_chars+0xb0>
 8009f8a:	06d1      	lsls	r1, r2, #27
 8009f8c:	bf5f      	itttt	pl
 8009f8e:	681a      	ldrpl	r2, [r3, #0]
 8009f90:	1d11      	addpl	r1, r2, #4
 8009f92:	6019      	strpl	r1, [r3, #0]
 8009f94:	6816      	ldrpl	r6, [r2, #0]
 8009f96:	2700      	movs	r7, #0
 8009f98:	69a0      	ldr	r0, [r4, #24]
 8009f9a:	b188      	cbz	r0, 8009fc0 <_scanf_chars+0x58>
 8009f9c:	2801      	cmp	r0, #1
 8009f9e:	d107      	bne.n	8009fb0 <_scanf_chars+0x48>
 8009fa0:	682a      	ldr	r2, [r5, #0]
 8009fa2:	7811      	ldrb	r1, [r2, #0]
 8009fa4:	6962      	ldr	r2, [r4, #20]
 8009fa6:	5c52      	ldrb	r2, [r2, r1]
 8009fa8:	b952      	cbnz	r2, 8009fc0 <_scanf_chars+0x58>
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	d031      	beq.n	800a012 <_scanf_chars+0xaa>
 8009fae:	e022      	b.n	8009ff6 <_scanf_chars+0x8e>
 8009fb0:	2802      	cmp	r0, #2
 8009fb2:	d120      	bne.n	8009ff6 <_scanf_chars+0x8e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009fbc:	071b      	lsls	r3, r3, #28
 8009fbe:	d41a      	bmi.n	8009ff6 <_scanf_chars+0x8e>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	06da      	lsls	r2, r3, #27
 8009fc4:	bf5e      	ittt	pl
 8009fc6:	682b      	ldrpl	r3, [r5, #0]
 8009fc8:	781b      	ldrbpl	r3, [r3, #0]
 8009fca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009fce:	682a      	ldr	r2, [r5, #0]
 8009fd0:	686b      	ldr	r3, [r5, #4]
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	68a2      	ldr	r2, [r4, #8]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	3a01      	subs	r2, #1
 8009fdc:	606b      	str	r3, [r5, #4]
 8009fde:	3701      	adds	r7, #1
 8009fe0:	60a2      	str	r2, [r4, #8]
 8009fe2:	b142      	cbz	r2, 8009ff6 <_scanf_chars+0x8e>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dcd7      	bgt.n	8009f98 <_scanf_chars+0x30>
 8009fe8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fec:	4629      	mov	r1, r5
 8009fee:	4640      	mov	r0, r8
 8009ff0:	4798      	blx	r3
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0d0      	beq.n	8009f98 <_scanf_chars+0x30>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f013 0310 	ands.w	r3, r3, #16
 8009ffc:	d105      	bne.n	800a00a <_scanf_chars+0xa2>
 8009ffe:	68e2      	ldr	r2, [r4, #12]
 800a000:	3201      	adds	r2, #1
 800a002:	60e2      	str	r2, [r4, #12]
 800a004:	69a2      	ldr	r2, [r4, #24]
 800a006:	b102      	cbz	r2, 800a00a <_scanf_chars+0xa2>
 800a008:	7033      	strb	r3, [r6, #0]
 800a00a:	6923      	ldr	r3, [r4, #16]
 800a00c:	443b      	add	r3, r7
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	2000      	movs	r0, #0
 800a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a016:	bf00      	nop
 800a018:	0800b659 	.word	0x0800b659

0800a01c <_scanf_i>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4698      	mov	r8, r3
 800a022:	4b74      	ldr	r3, [pc, #464]	; (800a1f4 <_scanf_i+0x1d8>)
 800a024:	460c      	mov	r4, r1
 800a026:	4682      	mov	sl, r0
 800a028:	4616      	mov	r6, r2
 800a02a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a02e:	b087      	sub	sp, #28
 800a030:	ab03      	add	r3, sp, #12
 800a032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a036:	4b70      	ldr	r3, [pc, #448]	; (800a1f8 <_scanf_i+0x1dc>)
 800a038:	69a1      	ldr	r1, [r4, #24]
 800a03a:	4a70      	ldr	r2, [pc, #448]	; (800a1fc <_scanf_i+0x1e0>)
 800a03c:	2903      	cmp	r1, #3
 800a03e:	bf18      	it	ne
 800a040:	461a      	movne	r2, r3
 800a042:	68a3      	ldr	r3, [r4, #8]
 800a044:	9201      	str	r2, [sp, #4]
 800a046:	1e5a      	subs	r2, r3, #1
 800a048:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a04c:	bf88      	it	hi
 800a04e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a052:	4627      	mov	r7, r4
 800a054:	bf82      	ittt	hi
 800a056:	eb03 0905 	addhi.w	r9, r3, r5
 800a05a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a05e:	60a3      	strhi	r3, [r4, #8]
 800a060:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a064:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a068:	bf98      	it	ls
 800a06a:	f04f 0900 	movls.w	r9, #0
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	463d      	mov	r5, r7
 800a072:	f04f 0b00 	mov.w	fp, #0
 800a076:	6831      	ldr	r1, [r6, #0]
 800a078:	ab03      	add	r3, sp, #12
 800a07a:	7809      	ldrb	r1, [r1, #0]
 800a07c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a080:	2202      	movs	r2, #2
 800a082:	f7f6 f8a5 	bl	80001d0 <memchr>
 800a086:	b328      	cbz	r0, 800a0d4 <_scanf_i+0xb8>
 800a088:	f1bb 0f01 	cmp.w	fp, #1
 800a08c:	d159      	bne.n	800a142 <_scanf_i+0x126>
 800a08e:	6862      	ldr	r2, [r4, #4]
 800a090:	b92a      	cbnz	r2, 800a09e <_scanf_i+0x82>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	2308      	movs	r3, #8
 800a096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09a:	6063      	str	r3, [r4, #4]
 800a09c:	6022      	str	r2, [r4, #0]
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	68a2      	ldr	r2, [r4, #8]
 800a0a8:	1e51      	subs	r1, r2, #1
 800a0aa:	60a1      	str	r1, [r4, #8]
 800a0ac:	b192      	cbz	r2, 800a0d4 <_scanf_i+0xb8>
 800a0ae:	6832      	ldr	r2, [r6, #0]
 800a0b0:	1c51      	adds	r1, r2, #1
 800a0b2:	6031      	str	r1, [r6, #0]
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	f805 2b01 	strb.w	r2, [r5], #1
 800a0ba:	6872      	ldr	r2, [r6, #4]
 800a0bc:	3a01      	subs	r2, #1
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	6072      	str	r2, [r6, #4]
 800a0c2:	dc07      	bgt.n	800a0d4 <_scanf_i+0xb8>
 800a0c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	4790      	blx	r2
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f040 8085 	bne.w	800a1de <_scanf_i+0x1c2>
 800a0d4:	f10b 0b01 	add.w	fp, fp, #1
 800a0d8:	f1bb 0f03 	cmp.w	fp, #3
 800a0dc:	d1cb      	bne.n	800a076 <_scanf_i+0x5a>
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	b90b      	cbnz	r3, 800a0e6 <_scanf_i+0xca>
 800a0e2:	230a      	movs	r3, #10
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	6863      	ldr	r3, [r4, #4]
 800a0e8:	4945      	ldr	r1, [pc, #276]	; (800a200 <_scanf_i+0x1e4>)
 800a0ea:	6960      	ldr	r0, [r4, #20]
 800a0ec:	1ac9      	subs	r1, r1, r3
 800a0ee:	f000 f937 	bl	800a360 <__sccl>
 800a0f2:	f04f 0b00 	mov.w	fp, #0
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	6822      	ldr	r2, [r4, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d03d      	beq.n	800a17a <_scanf_i+0x15e>
 800a0fe:	6831      	ldr	r1, [r6, #0]
 800a100:	6960      	ldr	r0, [r4, #20]
 800a102:	f891 c000 	ldrb.w	ip, [r1]
 800a106:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d035      	beq.n	800a17a <_scanf_i+0x15e>
 800a10e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a112:	d124      	bne.n	800a15e <_scanf_i+0x142>
 800a114:	0510      	lsls	r0, r2, #20
 800a116:	d522      	bpl.n	800a15e <_scanf_i+0x142>
 800a118:	f10b 0b01 	add.w	fp, fp, #1
 800a11c:	f1b9 0f00 	cmp.w	r9, #0
 800a120:	d003      	beq.n	800a12a <_scanf_i+0x10e>
 800a122:	3301      	adds	r3, #1
 800a124:	f109 39ff 	add.w	r9, r9, #4294967295
 800a128:	60a3      	str	r3, [r4, #8]
 800a12a:	6873      	ldr	r3, [r6, #4]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	6073      	str	r3, [r6, #4]
 800a132:	dd1b      	ble.n	800a16c <_scanf_i+0x150>
 800a134:	6833      	ldr	r3, [r6, #0]
 800a136:	3301      	adds	r3, #1
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	60a3      	str	r3, [r4, #8]
 800a140:	e7d9      	b.n	800a0f6 <_scanf_i+0xda>
 800a142:	f1bb 0f02 	cmp.w	fp, #2
 800a146:	d1ae      	bne.n	800a0a6 <_scanf_i+0x8a>
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a14e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a152:	d1bf      	bne.n	800a0d4 <_scanf_i+0xb8>
 800a154:	2310      	movs	r3, #16
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a15c:	e7a2      	b.n	800a0a4 <_scanf_i+0x88>
 800a15e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a162:	6022      	str	r2, [r4, #0]
 800a164:	780b      	ldrb	r3, [r1, #0]
 800a166:	f805 3b01 	strb.w	r3, [r5], #1
 800a16a:	e7de      	b.n	800a12a <_scanf_i+0x10e>
 800a16c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a170:	4631      	mov	r1, r6
 800a172:	4650      	mov	r0, sl
 800a174:	4798      	blx	r3
 800a176:	2800      	cmp	r0, #0
 800a178:	d0df      	beq.n	800a13a <_scanf_i+0x11e>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	05d9      	lsls	r1, r3, #23
 800a17e:	d50d      	bpl.n	800a19c <_scanf_i+0x180>
 800a180:	42bd      	cmp	r5, r7
 800a182:	d909      	bls.n	800a198 <_scanf_i+0x17c>
 800a184:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a18c:	4632      	mov	r2, r6
 800a18e:	4650      	mov	r0, sl
 800a190:	4798      	blx	r3
 800a192:	f105 39ff 	add.w	r9, r5, #4294967295
 800a196:	464d      	mov	r5, r9
 800a198:	42bd      	cmp	r5, r7
 800a19a:	d028      	beq.n	800a1ee <_scanf_i+0x1d2>
 800a19c:	6822      	ldr	r2, [r4, #0]
 800a19e:	f012 0210 	ands.w	r2, r2, #16
 800a1a2:	d113      	bne.n	800a1cc <_scanf_i+0x1b0>
 800a1a4:	702a      	strb	r2, [r5, #0]
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	9e01      	ldr	r6, [sp, #4]
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	47b0      	blx	r6
 800a1b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b4:	6821      	ldr	r1, [r4, #0]
 800a1b6:	1d1a      	adds	r2, r3, #4
 800a1b8:	f8c8 2000 	str.w	r2, [r8]
 800a1bc:	f011 0f20 	tst.w	r1, #32
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	d00f      	beq.n	800a1e4 <_scanf_i+0x1c8>
 800a1c4:	6018      	str	r0, [r3, #0]
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	60e3      	str	r3, [r4, #12]
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	1bed      	subs	r5, r5, r7
 800a1d0:	445d      	add	r5, fp
 800a1d2:	442b      	add	r3, r5
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	b007      	add	sp, #28
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	f04f 0b00 	mov.w	fp, #0
 800a1e2:	e7ca      	b.n	800a17a <_scanf_i+0x15e>
 800a1e4:	07ca      	lsls	r2, r1, #31
 800a1e6:	bf4c      	ite	mi
 800a1e8:	8018      	strhmi	r0, [r3, #0]
 800a1ea:	6018      	strpl	r0, [r3, #0]
 800a1ec:	e7eb      	b.n	800a1c6 <_scanf_i+0x1aa>
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	e7f2      	b.n	800a1d8 <_scanf_i+0x1bc>
 800a1f2:	bf00      	nop
 800a1f4:	0800b390 	.word	0x0800b390
 800a1f8:	0800ad6d 	.word	0x0800ad6d
 800a1fc:	08009911 	.word	0x08009911
 800a200:	0800b77a 	.word	0x0800b77a

0800a204 <__sflush_r>:
 800a204:	898a      	ldrh	r2, [r1, #12]
 800a206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20a:	4605      	mov	r5, r0
 800a20c:	0710      	lsls	r0, r2, #28
 800a20e:	460c      	mov	r4, r1
 800a210:	d458      	bmi.n	800a2c4 <__sflush_r+0xc0>
 800a212:	684b      	ldr	r3, [r1, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	dc05      	bgt.n	800a224 <__sflush_r+0x20>
 800a218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dc02      	bgt.n	800a224 <__sflush_r+0x20>
 800a21e:	2000      	movs	r0, #0
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a226:	2e00      	cmp	r6, #0
 800a228:	d0f9      	beq.n	800a21e <__sflush_r+0x1a>
 800a22a:	2300      	movs	r3, #0
 800a22c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a230:	682f      	ldr	r7, [r5, #0]
 800a232:	6a21      	ldr	r1, [r4, #32]
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	d032      	beq.n	800a29e <__sflush_r+0x9a>
 800a238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	075a      	lsls	r2, r3, #29
 800a23e:	d505      	bpl.n	800a24c <__sflush_r+0x48>
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	1ac0      	subs	r0, r0, r3
 800a244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a246:	b10b      	cbz	r3, 800a24c <__sflush_r+0x48>
 800a248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a24a:	1ac0      	subs	r0, r0, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	4602      	mov	r2, r0
 800a250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	4628      	mov	r0, r5
 800a256:	47b0      	blx	r6
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	d106      	bne.n	800a26c <__sflush_r+0x68>
 800a25e:	6829      	ldr	r1, [r5, #0]
 800a260:	291d      	cmp	r1, #29
 800a262:	d82b      	bhi.n	800a2bc <__sflush_r+0xb8>
 800a264:	4a29      	ldr	r2, [pc, #164]	; (800a30c <__sflush_r+0x108>)
 800a266:	410a      	asrs	r2, r1
 800a268:	07d6      	lsls	r6, r2, #31
 800a26a:	d427      	bmi.n	800a2bc <__sflush_r+0xb8>
 800a26c:	2200      	movs	r2, #0
 800a26e:	6062      	str	r2, [r4, #4]
 800a270:	04d9      	lsls	r1, r3, #19
 800a272:	6922      	ldr	r2, [r4, #16]
 800a274:	6022      	str	r2, [r4, #0]
 800a276:	d504      	bpl.n	800a282 <__sflush_r+0x7e>
 800a278:	1c42      	adds	r2, r0, #1
 800a27a:	d101      	bne.n	800a280 <__sflush_r+0x7c>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b903      	cbnz	r3, 800a282 <__sflush_r+0x7e>
 800a280:	6560      	str	r0, [r4, #84]	; 0x54
 800a282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a284:	602f      	str	r7, [r5, #0]
 800a286:	2900      	cmp	r1, #0
 800a288:	d0c9      	beq.n	800a21e <__sflush_r+0x1a>
 800a28a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a28e:	4299      	cmp	r1, r3
 800a290:	d002      	beq.n	800a298 <__sflush_r+0x94>
 800a292:	4628      	mov	r0, r5
 800a294:	f7fd fefa 	bl	800808c <_free_r>
 800a298:	2000      	movs	r0, #0
 800a29a:	6360      	str	r0, [r4, #52]	; 0x34
 800a29c:	e7c0      	b.n	800a220 <__sflush_r+0x1c>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b0      	blx	r6
 800a2a4:	1c41      	adds	r1, r0, #1
 800a2a6:	d1c8      	bne.n	800a23a <__sflush_r+0x36>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0c5      	beq.n	800a23a <__sflush_r+0x36>
 800a2ae:	2b1d      	cmp	r3, #29
 800a2b0:	d001      	beq.n	800a2b6 <__sflush_r+0xb2>
 800a2b2:	2b16      	cmp	r3, #22
 800a2b4:	d101      	bne.n	800a2ba <__sflush_r+0xb6>
 800a2b6:	602f      	str	r7, [r5, #0]
 800a2b8:	e7b1      	b.n	800a21e <__sflush_r+0x1a>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	e7ad      	b.n	800a220 <__sflush_r+0x1c>
 800a2c4:	690f      	ldr	r7, [r1, #16]
 800a2c6:	2f00      	cmp	r7, #0
 800a2c8:	d0a9      	beq.n	800a21e <__sflush_r+0x1a>
 800a2ca:	0793      	lsls	r3, r2, #30
 800a2cc:	680e      	ldr	r6, [r1, #0]
 800a2ce:	bf08      	it	eq
 800a2d0:	694b      	ldreq	r3, [r1, #20]
 800a2d2:	600f      	str	r7, [r1, #0]
 800a2d4:	bf18      	it	ne
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	eba6 0807 	sub.w	r8, r6, r7
 800a2dc:	608b      	str	r3, [r1, #8]
 800a2de:	f1b8 0f00 	cmp.w	r8, #0
 800a2e2:	dd9c      	ble.n	800a21e <__sflush_r+0x1a>
 800a2e4:	6a21      	ldr	r1, [r4, #32]
 800a2e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2e8:	4643      	mov	r3, r8
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b0      	blx	r6
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dc06      	bgt.n	800a302 <__sflush_r+0xfe>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	e78e      	b.n	800a220 <__sflush_r+0x1c>
 800a302:	4407      	add	r7, r0
 800a304:	eba8 0800 	sub.w	r8, r8, r0
 800a308:	e7e9      	b.n	800a2de <__sflush_r+0xda>
 800a30a:	bf00      	nop
 800a30c:	dfbffffe 	.word	0xdfbffffe

0800a310 <_fflush_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	690b      	ldr	r3, [r1, #16]
 800a314:	4605      	mov	r5, r0
 800a316:	460c      	mov	r4, r1
 800a318:	b913      	cbnz	r3, 800a320 <_fflush_r+0x10>
 800a31a:	2500      	movs	r5, #0
 800a31c:	4628      	mov	r0, r5
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	b118      	cbz	r0, 800a32a <_fflush_r+0x1a>
 800a322:	6a03      	ldr	r3, [r0, #32]
 800a324:	b90b      	cbnz	r3, 800a32a <_fflush_r+0x1a>
 800a326:	f7fc fecb 	bl	80070c0 <__sinit>
 800a32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f3      	beq.n	800a31a <_fflush_r+0xa>
 800a332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a334:	07d0      	lsls	r0, r2, #31
 800a336:	d404      	bmi.n	800a342 <_fflush_r+0x32>
 800a338:	0599      	lsls	r1, r3, #22
 800a33a:	d402      	bmi.n	800a342 <_fflush_r+0x32>
 800a33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a33e:	f7fd f819 	bl	8007374 <__retarget_lock_acquire_recursive>
 800a342:	4628      	mov	r0, r5
 800a344:	4621      	mov	r1, r4
 800a346:	f7ff ff5d 	bl	800a204 <__sflush_r>
 800a34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a34c:	07da      	lsls	r2, r3, #31
 800a34e:	4605      	mov	r5, r0
 800a350:	d4e4      	bmi.n	800a31c <_fflush_r+0xc>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	059b      	lsls	r3, r3, #22
 800a356:	d4e1      	bmi.n	800a31c <_fflush_r+0xc>
 800a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35a:	f7fd f80c 	bl	8007376 <__retarget_lock_release_recursive>
 800a35e:	e7dd      	b.n	800a31c <_fflush_r+0xc>

0800a360 <__sccl>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	780b      	ldrb	r3, [r1, #0]
 800a364:	4604      	mov	r4, r0
 800a366:	2b5e      	cmp	r3, #94	; 0x5e
 800a368:	bf0b      	itete	eq
 800a36a:	784b      	ldrbeq	r3, [r1, #1]
 800a36c:	1c4a      	addne	r2, r1, #1
 800a36e:	1c8a      	addeq	r2, r1, #2
 800a370:	2100      	movne	r1, #0
 800a372:	bf08      	it	eq
 800a374:	2101      	moveq	r1, #1
 800a376:	3801      	subs	r0, #1
 800a378:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a37c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a380:	42a8      	cmp	r0, r5
 800a382:	d1fb      	bne.n	800a37c <__sccl+0x1c>
 800a384:	b90b      	cbnz	r3, 800a38a <__sccl+0x2a>
 800a386:	1e50      	subs	r0, r2, #1
 800a388:	bd70      	pop	{r4, r5, r6, pc}
 800a38a:	f081 0101 	eor.w	r1, r1, #1
 800a38e:	54e1      	strb	r1, [r4, r3]
 800a390:	4610      	mov	r0, r2
 800a392:	4602      	mov	r2, r0
 800a394:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a398:	2d2d      	cmp	r5, #45	; 0x2d
 800a39a:	d005      	beq.n	800a3a8 <__sccl+0x48>
 800a39c:	2d5d      	cmp	r5, #93	; 0x5d
 800a39e:	d016      	beq.n	800a3ce <__sccl+0x6e>
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	d0f1      	beq.n	800a388 <__sccl+0x28>
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	e7f2      	b.n	800a38e <__sccl+0x2e>
 800a3a8:	7846      	ldrb	r6, [r0, #1]
 800a3aa:	2e5d      	cmp	r6, #93	; 0x5d
 800a3ac:	d0fa      	beq.n	800a3a4 <__sccl+0x44>
 800a3ae:	42b3      	cmp	r3, r6
 800a3b0:	dcf8      	bgt.n	800a3a4 <__sccl+0x44>
 800a3b2:	3002      	adds	r0, #2
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	3201      	adds	r2, #1
 800a3b8:	4296      	cmp	r6, r2
 800a3ba:	54a1      	strb	r1, [r4, r2]
 800a3bc:	dcfb      	bgt.n	800a3b6 <__sccl+0x56>
 800a3be:	1af2      	subs	r2, r6, r3
 800a3c0:	3a01      	subs	r2, #1
 800a3c2:	1c5d      	adds	r5, r3, #1
 800a3c4:	42b3      	cmp	r3, r6
 800a3c6:	bfa8      	it	ge
 800a3c8:	2200      	movge	r2, #0
 800a3ca:	18ab      	adds	r3, r5, r2
 800a3cc:	e7e1      	b.n	800a392 <__sccl+0x32>
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	e7da      	b.n	800a388 <__sccl+0x28>

0800a3d2 <__submore>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3de:	4299      	cmp	r1, r3
 800a3e0:	d11d      	bne.n	800a41e <__submore+0x4c>
 800a3e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3e6:	f7fd fec5 	bl	8008174 <_malloc_r>
 800a3ea:	b918      	cbnz	r0, 800a3f4 <__submore+0x22>
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3fa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a3fe:	6360      	str	r0, [r4, #52]	; 0x34
 800a400:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a404:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a408:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a40c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a410:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a414:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a418:	6020      	str	r0, [r4, #0]
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7e8      	b.n	800a3f0 <__submore+0x1e>
 800a41e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a420:	0077      	lsls	r7, r6, #1
 800a422:	463a      	mov	r2, r7
 800a424:	f000 fc01 	bl	800ac2a <_realloc_r>
 800a428:	4605      	mov	r5, r0
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0de      	beq.n	800a3ec <__submore+0x1a>
 800a42e:	eb00 0806 	add.w	r8, r0, r6
 800a432:	4601      	mov	r1, r0
 800a434:	4632      	mov	r2, r6
 800a436:	4640      	mov	r0, r8
 800a438:	f000 f842 	bl	800a4c0 <memcpy>
 800a43c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a440:	f8c4 8000 	str.w	r8, [r4]
 800a444:	e7e9      	b.n	800a41a <__submore+0x48>

0800a446 <memmove>:
 800a446:	4288      	cmp	r0, r1
 800a448:	b510      	push	{r4, lr}
 800a44a:	eb01 0402 	add.w	r4, r1, r2
 800a44e:	d902      	bls.n	800a456 <memmove+0x10>
 800a450:	4284      	cmp	r4, r0
 800a452:	4623      	mov	r3, r4
 800a454:	d807      	bhi.n	800a466 <memmove+0x20>
 800a456:	1e43      	subs	r3, r0, #1
 800a458:	42a1      	cmp	r1, r4
 800a45a:	d008      	beq.n	800a46e <memmove+0x28>
 800a45c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a460:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a464:	e7f8      	b.n	800a458 <memmove+0x12>
 800a466:	4402      	add	r2, r0
 800a468:	4601      	mov	r1, r0
 800a46a:	428a      	cmp	r2, r1
 800a46c:	d100      	bne.n	800a470 <memmove+0x2a>
 800a46e:	bd10      	pop	{r4, pc}
 800a470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a474:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a478:	e7f7      	b.n	800a46a <memmove+0x24>

0800a47a <strncmp>:
 800a47a:	b510      	push	{r4, lr}
 800a47c:	b16a      	cbz	r2, 800a49a <strncmp+0x20>
 800a47e:	3901      	subs	r1, #1
 800a480:	1884      	adds	r4, r0, r2
 800a482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a486:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d103      	bne.n	800a496 <strncmp+0x1c>
 800a48e:	42a0      	cmp	r0, r4
 800a490:	d001      	beq.n	800a496 <strncmp+0x1c>
 800a492:	2a00      	cmp	r2, #0
 800a494:	d1f5      	bne.n	800a482 <strncmp+0x8>
 800a496:	1ad0      	subs	r0, r2, r3
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	4610      	mov	r0, r2
 800a49c:	e7fc      	b.n	800a498 <strncmp+0x1e>
	...

0800a4a0 <_sbrk_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d06      	ldr	r5, [pc, #24]	; (800a4bc <_sbrk_r+0x1c>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	f7f7 fe70 	bl	8002190 <_sbrk>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_sbrk_r+0x1a>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_sbrk_r+0x1a>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	2000115c 	.word	0x2000115c

0800a4c0 <memcpy>:
 800a4c0:	440a      	add	r2, r1
 800a4c2:	4291      	cmp	r1, r2
 800a4c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c8:	d100      	bne.n	800a4cc <memcpy+0xc>
 800a4ca:	4770      	bx	lr
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4d6:	4291      	cmp	r1, r2
 800a4d8:	d1f9      	bne.n	800a4ce <memcpy+0xe>
 800a4da:	bd10      	pop	{r4, pc}
 800a4dc:	0000      	movs	r0, r0
	...

0800a4e0 <nan>:
 800a4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4e8 <nan+0x8>
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	7ff80000 	.word	0x7ff80000

0800a4f0 <__assert_func>:
 800a4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <__assert_func+0x2c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	68d8      	ldr	r0, [r3, #12]
 800a4fe:	b14c      	cbz	r4, 800a514 <__assert_func+0x24>
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <__assert_func+0x30>)
 800a502:	9100      	str	r1, [sp, #0]
 800a504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a508:	4906      	ldr	r1, [pc, #24]	; (800a524 <__assert_func+0x34>)
 800a50a:	462b      	mov	r3, r5
 800a50c:	f000 fc3e 	bl	800ad8c <fiprintf>
 800a510:	f000 fc4e 	bl	800adb0 <abort>
 800a514:	4b04      	ldr	r3, [pc, #16]	; (800a528 <__assert_func+0x38>)
 800a516:	461c      	mov	r4, r3
 800a518:	e7f3      	b.n	800a502 <__assert_func+0x12>
 800a51a:	bf00      	nop
 800a51c:	20000064 	.word	0x20000064
 800a520:	0800b78d 	.word	0x0800b78d
 800a524:	0800b79a 	.word	0x0800b79a
 800a528:	0800b7c8 	.word	0x0800b7c8

0800a52c <_calloc_r>:
 800a52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a52e:	fba1 2402 	umull	r2, r4, r1, r2
 800a532:	b94c      	cbnz	r4, 800a548 <_calloc_r+0x1c>
 800a534:	4611      	mov	r1, r2
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	f7fd fe1c 	bl	8008174 <_malloc_r>
 800a53c:	9a01      	ldr	r2, [sp, #4]
 800a53e:	4605      	mov	r5, r0
 800a540:	b930      	cbnz	r0, 800a550 <_calloc_r+0x24>
 800a542:	4628      	mov	r0, r5
 800a544:	b003      	add	sp, #12
 800a546:	bd30      	pop	{r4, r5, pc}
 800a548:	220c      	movs	r2, #12
 800a54a:	6002      	str	r2, [r0, #0]
 800a54c:	2500      	movs	r5, #0
 800a54e:	e7f8      	b.n	800a542 <_calloc_r+0x16>
 800a550:	4621      	mov	r1, r4
 800a552:	f7fc fe7c 	bl	800724e <memset>
 800a556:	e7f4      	b.n	800a542 <_calloc_r+0x16>

0800a558 <rshift>:
 800a558:	6903      	ldr	r3, [r0, #16]
 800a55a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a55e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a562:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a566:	f100 0414 	add.w	r4, r0, #20
 800a56a:	dd45      	ble.n	800a5f8 <rshift+0xa0>
 800a56c:	f011 011f 	ands.w	r1, r1, #31
 800a570:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a574:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a578:	d10c      	bne.n	800a594 <rshift+0x3c>
 800a57a:	f100 0710 	add.w	r7, r0, #16
 800a57e:	4629      	mov	r1, r5
 800a580:	42b1      	cmp	r1, r6
 800a582:	d334      	bcc.n	800a5ee <rshift+0x96>
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	1eea      	subs	r2, r5, #3
 800a58a:	4296      	cmp	r6, r2
 800a58c:	bf38      	it	cc
 800a58e:	2300      	movcc	r3, #0
 800a590:	4423      	add	r3, r4
 800a592:	e015      	b.n	800a5c0 <rshift+0x68>
 800a594:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a598:	f1c1 0820 	rsb	r8, r1, #32
 800a59c:	40cf      	lsrs	r7, r1
 800a59e:	f105 0e04 	add.w	lr, r5, #4
 800a5a2:	46a1      	mov	r9, r4
 800a5a4:	4576      	cmp	r6, lr
 800a5a6:	46f4      	mov	ip, lr
 800a5a8:	d815      	bhi.n	800a5d6 <rshift+0x7e>
 800a5aa:	1a9a      	subs	r2, r3, r2
 800a5ac:	0092      	lsls	r2, r2, #2
 800a5ae:	3a04      	subs	r2, #4
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	42ae      	cmp	r6, r5
 800a5b4:	bf38      	it	cc
 800a5b6:	2200      	movcc	r2, #0
 800a5b8:	18a3      	adds	r3, r4, r2
 800a5ba:	50a7      	str	r7, [r4, r2]
 800a5bc:	b107      	cbz	r7, 800a5c0 <rshift+0x68>
 800a5be:	3304      	adds	r3, #4
 800a5c0:	1b1a      	subs	r2, r3, r4
 800a5c2:	42a3      	cmp	r3, r4
 800a5c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5c8:	bf08      	it	eq
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	6102      	str	r2, [r0, #16]
 800a5ce:	bf08      	it	eq
 800a5d0:	6143      	streq	r3, [r0, #20]
 800a5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	f8dc c000 	ldr.w	ip, [ip]
 800a5da:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5de:	ea4c 0707 	orr.w	r7, ip, r7
 800a5e2:	f849 7b04 	str.w	r7, [r9], #4
 800a5e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ea:	40cf      	lsrs	r7, r1
 800a5ec:	e7da      	b.n	800a5a4 <rshift+0x4c>
 800a5ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5f6:	e7c3      	b.n	800a580 <rshift+0x28>
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	e7e1      	b.n	800a5c0 <rshift+0x68>

0800a5fc <__hexdig_fun>:
 800a5fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a600:	2b09      	cmp	r3, #9
 800a602:	d802      	bhi.n	800a60a <__hexdig_fun+0xe>
 800a604:	3820      	subs	r0, #32
 800a606:	b2c0      	uxtb	r0, r0
 800a608:	4770      	bx	lr
 800a60a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d801      	bhi.n	800a616 <__hexdig_fun+0x1a>
 800a612:	3847      	subs	r0, #71	; 0x47
 800a614:	e7f7      	b.n	800a606 <__hexdig_fun+0xa>
 800a616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d801      	bhi.n	800a622 <__hexdig_fun+0x26>
 800a61e:	3827      	subs	r0, #39	; 0x27
 800a620:	e7f1      	b.n	800a606 <__hexdig_fun+0xa>
 800a622:	2000      	movs	r0, #0
 800a624:	4770      	bx	lr
	...

0800a628 <__gethex>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4617      	mov	r7, r2
 800a62e:	680a      	ldr	r2, [r1, #0]
 800a630:	b085      	sub	sp, #20
 800a632:	f102 0b02 	add.w	fp, r2, #2
 800a636:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a63a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a63e:	4681      	mov	r9, r0
 800a640:	468a      	mov	sl, r1
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	32fe      	adds	r2, #254	; 0xfe
 800a646:	eb02 030b 	add.w	r3, r2, fp
 800a64a:	46d8      	mov	r8, fp
 800a64c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	2830      	cmp	r0, #48	; 0x30
 800a654:	d0f7      	beq.n	800a646 <__gethex+0x1e>
 800a656:	f7ff ffd1 	bl	800a5fc <__hexdig_fun>
 800a65a:	4604      	mov	r4, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d138      	bne.n	800a6d2 <__gethex+0xaa>
 800a660:	49a7      	ldr	r1, [pc, #668]	; (800a900 <__gethex+0x2d8>)
 800a662:	2201      	movs	r2, #1
 800a664:	4640      	mov	r0, r8
 800a666:	f7ff ff08 	bl	800a47a <strncmp>
 800a66a:	4606      	mov	r6, r0
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d169      	bne.n	800a744 <__gethex+0x11c>
 800a670:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a674:	465d      	mov	r5, fp
 800a676:	f7ff ffc1 	bl	800a5fc <__hexdig_fun>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d064      	beq.n	800a748 <__gethex+0x120>
 800a67e:	465a      	mov	r2, fp
 800a680:	7810      	ldrb	r0, [r2, #0]
 800a682:	2830      	cmp	r0, #48	; 0x30
 800a684:	4690      	mov	r8, r2
 800a686:	f102 0201 	add.w	r2, r2, #1
 800a68a:	d0f9      	beq.n	800a680 <__gethex+0x58>
 800a68c:	f7ff ffb6 	bl	800a5fc <__hexdig_fun>
 800a690:	2301      	movs	r3, #1
 800a692:	fab0 f480 	clz	r4, r0
 800a696:	0964      	lsrs	r4, r4, #5
 800a698:	465e      	mov	r6, fp
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	4642      	mov	r2, r8
 800a69e:	4615      	mov	r5, r2
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	7828      	ldrb	r0, [r5, #0]
 800a6a4:	f7ff ffaa 	bl	800a5fc <__hexdig_fun>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d1f8      	bne.n	800a69e <__gethex+0x76>
 800a6ac:	4994      	ldr	r1, [pc, #592]	; (800a900 <__gethex+0x2d8>)
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7ff fee2 	bl	800a47a <strncmp>
 800a6b6:	b978      	cbnz	r0, 800a6d8 <__gethex+0xb0>
 800a6b8:	b946      	cbnz	r6, 800a6cc <__gethex+0xa4>
 800a6ba:	1c6e      	adds	r6, r5, #1
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4615      	mov	r5, r2
 800a6c0:	3201      	adds	r2, #1
 800a6c2:	7828      	ldrb	r0, [r5, #0]
 800a6c4:	f7ff ff9a 	bl	800a5fc <__hexdig_fun>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1f8      	bne.n	800a6be <__gethex+0x96>
 800a6cc:	1b73      	subs	r3, r6, r5
 800a6ce:	009e      	lsls	r6, r3, #2
 800a6d0:	e004      	b.n	800a6dc <__gethex+0xb4>
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	4626      	mov	r6, r4
 800a6d6:	e7e1      	b.n	800a69c <__gethex+0x74>
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	d1f7      	bne.n	800a6cc <__gethex+0xa4>
 800a6dc:	782b      	ldrb	r3, [r5, #0]
 800a6de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6e2:	2b50      	cmp	r3, #80	; 0x50
 800a6e4:	d13d      	bne.n	800a762 <__gethex+0x13a>
 800a6e6:	786b      	ldrb	r3, [r5, #1]
 800a6e8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ea:	d02f      	beq.n	800a74c <__gethex+0x124>
 800a6ec:	2b2d      	cmp	r3, #45	; 0x2d
 800a6ee:	d031      	beq.n	800a754 <__gethex+0x12c>
 800a6f0:	1c69      	adds	r1, r5, #1
 800a6f2:	f04f 0b00 	mov.w	fp, #0
 800a6f6:	7808      	ldrb	r0, [r1, #0]
 800a6f8:	f7ff ff80 	bl	800a5fc <__hexdig_fun>
 800a6fc:	1e42      	subs	r2, r0, #1
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	2a18      	cmp	r2, #24
 800a702:	d82e      	bhi.n	800a762 <__gethex+0x13a>
 800a704:	f1a0 0210 	sub.w	r2, r0, #16
 800a708:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a70c:	f7ff ff76 	bl	800a5fc <__hexdig_fun>
 800a710:	f100 3cff 	add.w	ip, r0, #4294967295
 800a714:	fa5f fc8c 	uxtb.w	ip, ip
 800a718:	f1bc 0f18 	cmp.w	ip, #24
 800a71c:	d91d      	bls.n	800a75a <__gethex+0x132>
 800a71e:	f1bb 0f00 	cmp.w	fp, #0
 800a722:	d000      	beq.n	800a726 <__gethex+0xfe>
 800a724:	4252      	negs	r2, r2
 800a726:	4416      	add	r6, r2
 800a728:	f8ca 1000 	str.w	r1, [sl]
 800a72c:	b1dc      	cbz	r4, 800a766 <__gethex+0x13e>
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	bf14      	ite	ne
 800a734:	f04f 0800 	movne.w	r8, #0
 800a738:	f04f 0806 	moveq.w	r8, #6
 800a73c:	4640      	mov	r0, r8
 800a73e:	b005      	add	sp, #20
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	4645      	mov	r5, r8
 800a746:	4626      	mov	r6, r4
 800a748:	2401      	movs	r4, #1
 800a74a:	e7c7      	b.n	800a6dc <__gethex+0xb4>
 800a74c:	f04f 0b00 	mov.w	fp, #0
 800a750:	1ca9      	adds	r1, r5, #2
 800a752:	e7d0      	b.n	800a6f6 <__gethex+0xce>
 800a754:	f04f 0b01 	mov.w	fp, #1
 800a758:	e7fa      	b.n	800a750 <__gethex+0x128>
 800a75a:	230a      	movs	r3, #10
 800a75c:	fb03 0002 	mla	r0, r3, r2, r0
 800a760:	e7d0      	b.n	800a704 <__gethex+0xdc>
 800a762:	4629      	mov	r1, r5
 800a764:	e7e0      	b.n	800a728 <__gethex+0x100>
 800a766:	eba5 0308 	sub.w	r3, r5, r8
 800a76a:	3b01      	subs	r3, #1
 800a76c:	4621      	mov	r1, r4
 800a76e:	2b07      	cmp	r3, #7
 800a770:	dc0a      	bgt.n	800a788 <__gethex+0x160>
 800a772:	4648      	mov	r0, r9
 800a774:	f7fd fd8a 	bl	800828c <_Balloc>
 800a778:	4604      	mov	r4, r0
 800a77a:	b940      	cbnz	r0, 800a78e <__gethex+0x166>
 800a77c:	4b61      	ldr	r3, [pc, #388]	; (800a904 <__gethex+0x2dc>)
 800a77e:	4602      	mov	r2, r0
 800a780:	21e4      	movs	r1, #228	; 0xe4
 800a782:	4861      	ldr	r0, [pc, #388]	; (800a908 <__gethex+0x2e0>)
 800a784:	f7ff feb4 	bl	800a4f0 <__assert_func>
 800a788:	3101      	adds	r1, #1
 800a78a:	105b      	asrs	r3, r3, #1
 800a78c:	e7ef      	b.n	800a76e <__gethex+0x146>
 800a78e:	f100 0a14 	add.w	sl, r0, #20
 800a792:	2300      	movs	r3, #0
 800a794:	495a      	ldr	r1, [pc, #360]	; (800a900 <__gethex+0x2d8>)
 800a796:	f8cd a004 	str.w	sl, [sp, #4]
 800a79a:	469b      	mov	fp, r3
 800a79c:	45a8      	cmp	r8, r5
 800a79e:	d342      	bcc.n	800a826 <__gethex+0x1fe>
 800a7a0:	9801      	ldr	r0, [sp, #4]
 800a7a2:	f840 bb04 	str.w	fp, [r0], #4
 800a7a6:	eba0 000a 	sub.w	r0, r0, sl
 800a7aa:	1080      	asrs	r0, r0, #2
 800a7ac:	6120      	str	r0, [r4, #16]
 800a7ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f7fd fe5c 	bl	8008470 <__hi0bits>
 800a7b8:	683d      	ldr	r5, [r7, #0]
 800a7ba:	eba8 0000 	sub.w	r0, r8, r0
 800a7be:	42a8      	cmp	r0, r5
 800a7c0:	dd59      	ble.n	800a876 <__gethex+0x24e>
 800a7c2:	eba0 0805 	sub.w	r8, r0, r5
 800a7c6:	4641      	mov	r1, r8
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7fe f9eb 	bl	8008ba4 <__any_on>
 800a7ce:	4683      	mov	fp, r0
 800a7d0:	b1b8      	cbz	r0, 800a802 <__gethex+0x1da>
 800a7d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7d6:	1159      	asrs	r1, r3, #5
 800a7d8:	f003 021f 	and.w	r2, r3, #31
 800a7dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7e0:	f04f 0b01 	mov.w	fp, #1
 800a7e4:	fa0b f202 	lsl.w	r2, fp, r2
 800a7e8:	420a      	tst	r2, r1
 800a7ea:	d00a      	beq.n	800a802 <__gethex+0x1da>
 800a7ec:	455b      	cmp	r3, fp
 800a7ee:	dd06      	ble.n	800a7fe <__gethex+0x1d6>
 800a7f0:	f1a8 0102 	sub.w	r1, r8, #2
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f7fe f9d5 	bl	8008ba4 <__any_on>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d138      	bne.n	800a870 <__gethex+0x248>
 800a7fe:	f04f 0b02 	mov.w	fp, #2
 800a802:	4641      	mov	r1, r8
 800a804:	4620      	mov	r0, r4
 800a806:	f7ff fea7 	bl	800a558 <rshift>
 800a80a:	4446      	add	r6, r8
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	42b3      	cmp	r3, r6
 800a810:	da41      	bge.n	800a896 <__gethex+0x26e>
 800a812:	4621      	mov	r1, r4
 800a814:	4648      	mov	r0, r9
 800a816:	f7fd fd79 	bl	800830c <_Bfree>
 800a81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a81c:	2300      	movs	r3, #0
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a824:	e78a      	b.n	800a73c <__gethex+0x114>
 800a826:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a82a:	2a2e      	cmp	r2, #46	; 0x2e
 800a82c:	d014      	beq.n	800a858 <__gethex+0x230>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d106      	bne.n	800a840 <__gethex+0x218>
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	f843 bb04 	str.w	fp, [r3], #4
 800a838:	f04f 0b00 	mov.w	fp, #0
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	465b      	mov	r3, fp
 800a840:	7828      	ldrb	r0, [r5, #0]
 800a842:	9303      	str	r3, [sp, #12]
 800a844:	f7ff feda 	bl	800a5fc <__hexdig_fun>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	f000 000f 	and.w	r0, r0, #15
 800a84e:	4098      	lsls	r0, r3
 800a850:	ea4b 0b00 	orr.w	fp, fp, r0
 800a854:	3304      	adds	r3, #4
 800a856:	e7a1      	b.n	800a79c <__gethex+0x174>
 800a858:	45a8      	cmp	r8, r5
 800a85a:	d8e8      	bhi.n	800a82e <__gethex+0x206>
 800a85c:	2201      	movs	r2, #1
 800a85e:	4628      	mov	r0, r5
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	f7ff fe0a 	bl	800a47a <strncmp>
 800a866:	4926      	ldr	r1, [pc, #152]	; (800a900 <__gethex+0x2d8>)
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1df      	bne.n	800a82e <__gethex+0x206>
 800a86e:	e795      	b.n	800a79c <__gethex+0x174>
 800a870:	f04f 0b03 	mov.w	fp, #3
 800a874:	e7c5      	b.n	800a802 <__gethex+0x1da>
 800a876:	da0b      	bge.n	800a890 <__gethex+0x268>
 800a878:	eba5 0800 	sub.w	r8, r5, r0
 800a87c:	4621      	mov	r1, r4
 800a87e:	4642      	mov	r2, r8
 800a880:	4648      	mov	r0, r9
 800a882:	f7fd ff5d 	bl	8008740 <__lshift>
 800a886:	eba6 0608 	sub.w	r6, r6, r8
 800a88a:	4604      	mov	r4, r0
 800a88c:	f100 0a14 	add.w	sl, r0, #20
 800a890:	f04f 0b00 	mov.w	fp, #0
 800a894:	e7ba      	b.n	800a80c <__gethex+0x1e4>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	42b3      	cmp	r3, r6
 800a89a:	dd73      	ble.n	800a984 <__gethex+0x35c>
 800a89c:	1b9e      	subs	r6, r3, r6
 800a89e:	42b5      	cmp	r5, r6
 800a8a0:	dc34      	bgt.n	800a90c <__gethex+0x2e4>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d023      	beq.n	800a8f0 <__gethex+0x2c8>
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d025      	beq.n	800a8f8 <__gethex+0x2d0>
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d115      	bne.n	800a8dc <__gethex+0x2b4>
 800a8b0:	42b5      	cmp	r5, r6
 800a8b2:	d113      	bne.n	800a8dc <__gethex+0x2b4>
 800a8b4:	2d01      	cmp	r5, #1
 800a8b6:	d10b      	bne.n	800a8d0 <__gethex+0x2a8>
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	f8ca 3000 	str.w	r3, [sl]
 800a8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a8cc:	601c      	str	r4, [r3, #0]
 800a8ce:	e735      	b.n	800a73c <__gethex+0x114>
 800a8d0:	1e69      	subs	r1, r5, #1
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f7fe f966 	bl	8008ba4 <__any_on>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d1ed      	bne.n	800a8b8 <__gethex+0x290>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4648      	mov	r0, r9
 800a8e0:	f7fd fd14 	bl	800830c <_Bfree>
 800a8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a8ee:	e725      	b.n	800a73c <__gethex+0x114>
 800a8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f2      	bne.n	800a8dc <__gethex+0x2b4>
 800a8f6:	e7df      	b.n	800a8b8 <__gethex+0x290>
 800a8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1dc      	bne.n	800a8b8 <__gethex+0x290>
 800a8fe:	e7ed      	b.n	800a8dc <__gethex+0x2b4>
 800a900:	0800b604 	.word	0x0800b604
 800a904:	0800b497 	.word	0x0800b497
 800a908:	0800b7c9 	.word	0x0800b7c9
 800a90c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a910:	f1bb 0f00 	cmp.w	fp, #0
 800a914:	d133      	bne.n	800a97e <__gethex+0x356>
 800a916:	f1b8 0f00 	cmp.w	r8, #0
 800a91a:	d004      	beq.n	800a926 <__gethex+0x2fe>
 800a91c:	4641      	mov	r1, r8
 800a91e:	4620      	mov	r0, r4
 800a920:	f7fe f940 	bl	8008ba4 <__any_on>
 800a924:	4683      	mov	fp, r0
 800a926:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a92a:	2301      	movs	r3, #1
 800a92c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a930:	f008 081f 	and.w	r8, r8, #31
 800a934:	fa03 f308 	lsl.w	r3, r3, r8
 800a938:	4213      	tst	r3, r2
 800a93a:	4631      	mov	r1, r6
 800a93c:	4620      	mov	r0, r4
 800a93e:	bf18      	it	ne
 800a940:	f04b 0b02 	orrne.w	fp, fp, #2
 800a944:	1bad      	subs	r5, r5, r6
 800a946:	f7ff fe07 	bl	800a558 <rshift>
 800a94a:	687e      	ldr	r6, [r7, #4]
 800a94c:	f04f 0802 	mov.w	r8, #2
 800a950:	f1bb 0f00 	cmp.w	fp, #0
 800a954:	d04a      	beq.n	800a9ec <__gethex+0x3c4>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d016      	beq.n	800a98a <__gethex+0x362>
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d018      	beq.n	800a992 <__gethex+0x36a>
 800a960:	2b01      	cmp	r3, #1
 800a962:	d109      	bne.n	800a978 <__gethex+0x350>
 800a964:	f01b 0f02 	tst.w	fp, #2
 800a968:	d006      	beq.n	800a978 <__gethex+0x350>
 800a96a:	f8da 3000 	ldr.w	r3, [sl]
 800a96e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a972:	f01b 0f01 	tst.w	fp, #1
 800a976:	d10f      	bne.n	800a998 <__gethex+0x370>
 800a978:	f048 0810 	orr.w	r8, r8, #16
 800a97c:	e036      	b.n	800a9ec <__gethex+0x3c4>
 800a97e:	f04f 0b01 	mov.w	fp, #1
 800a982:	e7d0      	b.n	800a926 <__gethex+0x2fe>
 800a984:	f04f 0801 	mov.w	r8, #1
 800a988:	e7e2      	b.n	800a950 <__gethex+0x328>
 800a98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a98c:	f1c3 0301 	rsb	r3, r3, #1
 800a990:	930f      	str	r3, [sp, #60]	; 0x3c
 800a992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0ef      	beq.n	800a978 <__gethex+0x350>
 800a998:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a99c:	f104 0214 	add.w	r2, r4, #20
 800a9a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a9a4:	9301      	str	r3, [sp, #4]
 800a9a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4694      	mov	ip, r2
 800a9ae:	f852 1b04 	ldr.w	r1, [r2], #4
 800a9b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a9b6:	d01e      	beq.n	800a9f6 <__gethex+0x3ce>
 800a9b8:	3101      	adds	r1, #1
 800a9ba:	f8cc 1000 	str.w	r1, [ip]
 800a9be:	f1b8 0f02 	cmp.w	r8, #2
 800a9c2:	f104 0214 	add.w	r2, r4, #20
 800a9c6:	d13d      	bne.n	800aa44 <__gethex+0x41c>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	42ab      	cmp	r3, r5
 800a9ce:	d10b      	bne.n	800a9e8 <__gethex+0x3c0>
 800a9d0:	1169      	asrs	r1, r5, #5
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f005 051f 	and.w	r5, r5, #31
 800a9d8:	fa03 f505 	lsl.w	r5, r3, r5
 800a9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9e0:	421d      	tst	r5, r3
 800a9e2:	bf18      	it	ne
 800a9e4:	f04f 0801 	movne.w	r8, #1
 800a9e8:	f048 0820 	orr.w	r8, r8, #32
 800a9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ee:	601c      	str	r4, [r3, #0]
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	601e      	str	r6, [r3, #0]
 800a9f4:	e6a2      	b.n	800a73c <__gethex+0x114>
 800a9f6:	4290      	cmp	r0, r2
 800a9f8:	f842 3c04 	str.w	r3, [r2, #-4]
 800a9fc:	d8d6      	bhi.n	800a9ac <__gethex+0x384>
 800a9fe:	68a2      	ldr	r2, [r4, #8]
 800aa00:	4593      	cmp	fp, r2
 800aa02:	db17      	blt.n	800aa34 <__gethex+0x40c>
 800aa04:	6861      	ldr	r1, [r4, #4]
 800aa06:	4648      	mov	r0, r9
 800aa08:	3101      	adds	r1, #1
 800aa0a:	f7fd fc3f 	bl	800828c <_Balloc>
 800aa0e:	4682      	mov	sl, r0
 800aa10:	b918      	cbnz	r0, 800aa1a <__gethex+0x3f2>
 800aa12:	4b1b      	ldr	r3, [pc, #108]	; (800aa80 <__gethex+0x458>)
 800aa14:	4602      	mov	r2, r0
 800aa16:	2184      	movs	r1, #132	; 0x84
 800aa18:	e6b3      	b.n	800a782 <__gethex+0x15a>
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	3202      	adds	r2, #2
 800aa1e:	f104 010c 	add.w	r1, r4, #12
 800aa22:	0092      	lsls	r2, r2, #2
 800aa24:	300c      	adds	r0, #12
 800aa26:	f7ff fd4b 	bl	800a4c0 <memcpy>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4648      	mov	r0, r9
 800aa2e:	f7fd fc6d 	bl	800830c <_Bfree>
 800aa32:	4654      	mov	r4, sl
 800aa34:	6922      	ldr	r2, [r4, #16]
 800aa36:	1c51      	adds	r1, r2, #1
 800aa38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aa3c:	6121      	str	r1, [r4, #16]
 800aa3e:	2101      	movs	r1, #1
 800aa40:	6151      	str	r1, [r2, #20]
 800aa42:	e7bc      	b.n	800a9be <__gethex+0x396>
 800aa44:	6921      	ldr	r1, [r4, #16]
 800aa46:	4559      	cmp	r1, fp
 800aa48:	dd0b      	ble.n	800aa62 <__gethex+0x43a>
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f7ff fd83 	bl	800a558 <rshift>
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	3601      	adds	r6, #1
 800aa56:	42b3      	cmp	r3, r6
 800aa58:	f6ff aedb 	blt.w	800a812 <__gethex+0x1ea>
 800aa5c:	f04f 0801 	mov.w	r8, #1
 800aa60:	e7c2      	b.n	800a9e8 <__gethex+0x3c0>
 800aa62:	f015 051f 	ands.w	r5, r5, #31
 800aa66:	d0f9      	beq.n	800aa5c <__gethex+0x434>
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	441a      	add	r2, r3
 800aa6c:	f1c5 0520 	rsb	r5, r5, #32
 800aa70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa74:	f7fd fcfc 	bl	8008470 <__hi0bits>
 800aa78:	42a8      	cmp	r0, r5
 800aa7a:	dbe6      	blt.n	800aa4a <__gethex+0x422>
 800aa7c:	e7ee      	b.n	800aa5c <__gethex+0x434>
 800aa7e:	bf00      	nop
 800aa80:	0800b497 	.word	0x0800b497

0800aa84 <L_shift>:
 800aa84:	f1c2 0208 	rsb	r2, r2, #8
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	f1c2 0620 	rsb	r6, r2, #32
 800aa90:	6843      	ldr	r3, [r0, #4]
 800aa92:	6804      	ldr	r4, [r0, #0]
 800aa94:	fa03 f506 	lsl.w	r5, r3, r6
 800aa98:	432c      	orrs	r4, r5
 800aa9a:	40d3      	lsrs	r3, r2
 800aa9c:	6004      	str	r4, [r0, #0]
 800aa9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaa2:	4288      	cmp	r0, r1
 800aaa4:	d3f4      	bcc.n	800aa90 <L_shift+0xc>
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}

0800aaa8 <__match>:
 800aaa8:	b530      	push	{r4, r5, lr}
 800aaaa:	6803      	ldr	r3, [r0, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab2:	b914      	cbnz	r4, 800aaba <__match+0x12>
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	2001      	movs	r0, #1
 800aab8:	bd30      	pop	{r4, r5, pc}
 800aaba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aac2:	2d19      	cmp	r5, #25
 800aac4:	bf98      	it	ls
 800aac6:	3220      	addls	r2, #32
 800aac8:	42a2      	cmp	r2, r4
 800aaca:	d0f0      	beq.n	800aaae <__match+0x6>
 800aacc:	2000      	movs	r0, #0
 800aace:	e7f3      	b.n	800aab8 <__match+0x10>

0800aad0 <__hexnan>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	680b      	ldr	r3, [r1, #0]
 800aad6:	6801      	ldr	r1, [r0, #0]
 800aad8:	115e      	asrs	r6, r3, #5
 800aada:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aade:	f013 031f 	ands.w	r3, r3, #31
 800aae2:	b087      	sub	sp, #28
 800aae4:	bf18      	it	ne
 800aae6:	3604      	addne	r6, #4
 800aae8:	2500      	movs	r5, #0
 800aaea:	1f37      	subs	r7, r6, #4
 800aaec:	4682      	mov	sl, r0
 800aaee:	4690      	mov	r8, r2
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aaf6:	46b9      	mov	r9, r7
 800aaf8:	463c      	mov	r4, r7
 800aafa:	9502      	str	r5, [sp, #8]
 800aafc:	46ab      	mov	fp, r5
 800aafe:	784a      	ldrb	r2, [r1, #1]
 800ab00:	1c4b      	adds	r3, r1, #1
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	b342      	cbz	r2, 800ab58 <__hexnan+0x88>
 800ab06:	4610      	mov	r0, r2
 800ab08:	9105      	str	r1, [sp, #20]
 800ab0a:	9204      	str	r2, [sp, #16]
 800ab0c:	f7ff fd76 	bl	800a5fc <__hexdig_fun>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d14f      	bne.n	800abb4 <__hexnan+0xe4>
 800ab14:	9a04      	ldr	r2, [sp, #16]
 800ab16:	9905      	ldr	r1, [sp, #20]
 800ab18:	2a20      	cmp	r2, #32
 800ab1a:	d818      	bhi.n	800ab4e <__hexnan+0x7e>
 800ab1c:	9b02      	ldr	r3, [sp, #8]
 800ab1e:	459b      	cmp	fp, r3
 800ab20:	dd13      	ble.n	800ab4a <__hexnan+0x7a>
 800ab22:	454c      	cmp	r4, r9
 800ab24:	d206      	bcs.n	800ab34 <__hexnan+0x64>
 800ab26:	2d07      	cmp	r5, #7
 800ab28:	dc04      	bgt.n	800ab34 <__hexnan+0x64>
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7ff ffa8 	bl	800aa84 <L_shift>
 800ab34:	4544      	cmp	r4, r8
 800ab36:	d950      	bls.n	800abda <__hexnan+0x10a>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab42:	f8cd b008 	str.w	fp, [sp, #8]
 800ab46:	464c      	mov	r4, r9
 800ab48:	461d      	mov	r5, r3
 800ab4a:	9903      	ldr	r1, [sp, #12]
 800ab4c:	e7d7      	b.n	800aafe <__hexnan+0x2e>
 800ab4e:	2a29      	cmp	r2, #41	; 0x29
 800ab50:	d155      	bne.n	800abfe <__hexnan+0x12e>
 800ab52:	3102      	adds	r1, #2
 800ab54:	f8ca 1000 	str.w	r1, [sl]
 800ab58:	f1bb 0f00 	cmp.w	fp, #0
 800ab5c:	d04f      	beq.n	800abfe <__hexnan+0x12e>
 800ab5e:	454c      	cmp	r4, r9
 800ab60:	d206      	bcs.n	800ab70 <__hexnan+0xa0>
 800ab62:	2d07      	cmp	r5, #7
 800ab64:	dc04      	bgt.n	800ab70 <__hexnan+0xa0>
 800ab66:	462a      	mov	r2, r5
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff ff8a 	bl	800aa84 <L_shift>
 800ab70:	4544      	cmp	r4, r8
 800ab72:	d934      	bls.n	800abde <__hexnan+0x10e>
 800ab74:	f1a8 0204 	sub.w	r2, r8, #4
 800ab78:	4623      	mov	r3, r4
 800ab7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab82:	429f      	cmp	r7, r3
 800ab84:	d2f9      	bcs.n	800ab7a <__hexnan+0xaa>
 800ab86:	1b3b      	subs	r3, r7, r4
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	3e03      	subs	r6, #3
 800ab90:	3401      	adds	r4, #1
 800ab92:	42a6      	cmp	r6, r4
 800ab94:	bf38      	it	cc
 800ab96:	2304      	movcc	r3, #4
 800ab98:	4443      	add	r3, r8
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f843 2b04 	str.w	r2, [r3], #4
 800aba0:	429f      	cmp	r7, r3
 800aba2:	d2fb      	bcs.n	800ab9c <__hexnan+0xcc>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	b91b      	cbnz	r3, 800abb0 <__hexnan+0xe0>
 800aba8:	4547      	cmp	r7, r8
 800abaa:	d126      	bne.n	800abfa <__hexnan+0x12a>
 800abac:	2301      	movs	r3, #1
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	2005      	movs	r0, #5
 800abb2:	e025      	b.n	800ac00 <__hexnan+0x130>
 800abb4:	3501      	adds	r5, #1
 800abb6:	2d08      	cmp	r5, #8
 800abb8:	f10b 0b01 	add.w	fp, fp, #1
 800abbc:	dd06      	ble.n	800abcc <__hexnan+0xfc>
 800abbe:	4544      	cmp	r4, r8
 800abc0:	d9c3      	bls.n	800ab4a <__hexnan+0x7a>
 800abc2:	2300      	movs	r3, #0
 800abc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800abc8:	2501      	movs	r5, #1
 800abca:	3c04      	subs	r4, #4
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	f000 000f 	and.w	r0, r0, #15
 800abd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	e7b7      	b.n	800ab4a <__hexnan+0x7a>
 800abda:	2508      	movs	r5, #8
 800abdc:	e7b5      	b.n	800ab4a <__hexnan+0x7a>
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0df      	beq.n	800aba4 <__hexnan+0xd4>
 800abe4:	f1c3 0320 	rsb	r3, r3, #32
 800abe8:	f04f 32ff 	mov.w	r2, #4294967295
 800abec:	40da      	lsrs	r2, r3
 800abee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abf2:	4013      	ands	r3, r2
 800abf4:	f846 3c04 	str.w	r3, [r6, #-4]
 800abf8:	e7d4      	b.n	800aba4 <__hexnan+0xd4>
 800abfa:	3f04      	subs	r7, #4
 800abfc:	e7d2      	b.n	800aba4 <__hexnan+0xd4>
 800abfe:	2004      	movs	r0, #4
 800ac00:	b007      	add	sp, #28
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac06 <__ascii_mbtowc>:
 800ac06:	b082      	sub	sp, #8
 800ac08:	b901      	cbnz	r1, 800ac0c <__ascii_mbtowc+0x6>
 800ac0a:	a901      	add	r1, sp, #4
 800ac0c:	b142      	cbz	r2, 800ac20 <__ascii_mbtowc+0x1a>
 800ac0e:	b14b      	cbz	r3, 800ac24 <__ascii_mbtowc+0x1e>
 800ac10:	7813      	ldrb	r3, [r2, #0]
 800ac12:	600b      	str	r3, [r1, #0]
 800ac14:	7812      	ldrb	r2, [r2, #0]
 800ac16:	1e10      	subs	r0, r2, #0
 800ac18:	bf18      	it	ne
 800ac1a:	2001      	movne	r0, #1
 800ac1c:	b002      	add	sp, #8
 800ac1e:	4770      	bx	lr
 800ac20:	4610      	mov	r0, r2
 800ac22:	e7fb      	b.n	800ac1c <__ascii_mbtowc+0x16>
 800ac24:	f06f 0001 	mvn.w	r0, #1
 800ac28:	e7f8      	b.n	800ac1c <__ascii_mbtowc+0x16>

0800ac2a <_realloc_r>:
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	4680      	mov	r8, r0
 800ac30:	4614      	mov	r4, r2
 800ac32:	460e      	mov	r6, r1
 800ac34:	b921      	cbnz	r1, 800ac40 <_realloc_r+0x16>
 800ac36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	f7fd ba9a 	b.w	8008174 <_malloc_r>
 800ac40:	b92a      	cbnz	r2, 800ac4e <_realloc_r+0x24>
 800ac42:	f7fd fa23 	bl	800808c <_free_r>
 800ac46:	4625      	mov	r5, r4
 800ac48:	4628      	mov	r0, r5
 800ac4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac4e:	f000 f8b6 	bl	800adbe <_malloc_usable_size_r>
 800ac52:	4284      	cmp	r4, r0
 800ac54:	4607      	mov	r7, r0
 800ac56:	d802      	bhi.n	800ac5e <_realloc_r+0x34>
 800ac58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac5c:	d812      	bhi.n	800ac84 <_realloc_r+0x5a>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4640      	mov	r0, r8
 800ac62:	f7fd fa87 	bl	8008174 <_malloc_r>
 800ac66:	4605      	mov	r5, r0
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d0ed      	beq.n	800ac48 <_realloc_r+0x1e>
 800ac6c:	42bc      	cmp	r4, r7
 800ac6e:	4622      	mov	r2, r4
 800ac70:	4631      	mov	r1, r6
 800ac72:	bf28      	it	cs
 800ac74:	463a      	movcs	r2, r7
 800ac76:	f7ff fc23 	bl	800a4c0 <memcpy>
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	f7fd fa05 	bl	800808c <_free_r>
 800ac82:	e7e1      	b.n	800ac48 <_realloc_r+0x1e>
 800ac84:	4635      	mov	r5, r6
 800ac86:	e7df      	b.n	800ac48 <_realloc_r+0x1e>

0800ac88 <_strtoul_l.constprop.0>:
 800ac88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	4f36      	ldr	r7, [pc, #216]	; (800ad68 <_strtoul_l.constprop.0+0xe0>)
 800ac8e:	4686      	mov	lr, r0
 800ac90:	460d      	mov	r5, r1
 800ac92:	4628      	mov	r0, r5
 800ac94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac98:	5d3e      	ldrb	r6, [r7, r4]
 800ac9a:	f016 0608 	ands.w	r6, r6, #8
 800ac9e:	d1f8      	bne.n	800ac92 <_strtoul_l.constprop.0+0xa>
 800aca0:	2c2d      	cmp	r4, #45	; 0x2d
 800aca2:	d130      	bne.n	800ad06 <_strtoul_l.constprop.0+0x7e>
 800aca4:	782c      	ldrb	r4, [r5, #0]
 800aca6:	2601      	movs	r6, #1
 800aca8:	1c85      	adds	r5, r0, #2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d057      	beq.n	800ad5e <_strtoul_l.constprop.0+0xd6>
 800acae:	2b10      	cmp	r3, #16
 800acb0:	d109      	bne.n	800acc6 <_strtoul_l.constprop.0+0x3e>
 800acb2:	2c30      	cmp	r4, #48	; 0x30
 800acb4:	d107      	bne.n	800acc6 <_strtoul_l.constprop.0+0x3e>
 800acb6:	7828      	ldrb	r0, [r5, #0]
 800acb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800acbc:	2858      	cmp	r0, #88	; 0x58
 800acbe:	d149      	bne.n	800ad54 <_strtoul_l.constprop.0+0xcc>
 800acc0:	786c      	ldrb	r4, [r5, #1]
 800acc2:	2310      	movs	r3, #16
 800acc4:	3502      	adds	r5, #2
 800acc6:	f04f 38ff 	mov.w	r8, #4294967295
 800acca:	2700      	movs	r7, #0
 800accc:	fbb8 f8f3 	udiv	r8, r8, r3
 800acd0:	fb03 f908 	mul.w	r9, r3, r8
 800acd4:	ea6f 0909 	mvn.w	r9, r9
 800acd8:	4638      	mov	r0, r7
 800acda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acde:	f1bc 0f09 	cmp.w	ip, #9
 800ace2:	d815      	bhi.n	800ad10 <_strtoul_l.constprop.0+0x88>
 800ace4:	4664      	mov	r4, ip
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	dd23      	ble.n	800ad32 <_strtoul_l.constprop.0+0xaa>
 800acea:	f1b7 3fff 	cmp.w	r7, #4294967295
 800acee:	d007      	beq.n	800ad00 <_strtoul_l.constprop.0+0x78>
 800acf0:	4580      	cmp	r8, r0
 800acf2:	d31b      	bcc.n	800ad2c <_strtoul_l.constprop.0+0xa4>
 800acf4:	d101      	bne.n	800acfa <_strtoul_l.constprop.0+0x72>
 800acf6:	45a1      	cmp	r9, r4
 800acf8:	db18      	blt.n	800ad2c <_strtoul_l.constprop.0+0xa4>
 800acfa:	fb00 4003 	mla	r0, r0, r3, r4
 800acfe:	2701      	movs	r7, #1
 800ad00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad04:	e7e9      	b.n	800acda <_strtoul_l.constprop.0+0x52>
 800ad06:	2c2b      	cmp	r4, #43	; 0x2b
 800ad08:	bf04      	itt	eq
 800ad0a:	782c      	ldrbeq	r4, [r5, #0]
 800ad0c:	1c85      	addeq	r5, r0, #2
 800ad0e:	e7cc      	b.n	800acaa <_strtoul_l.constprop.0+0x22>
 800ad10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad14:	f1bc 0f19 	cmp.w	ip, #25
 800ad18:	d801      	bhi.n	800ad1e <_strtoul_l.constprop.0+0x96>
 800ad1a:	3c37      	subs	r4, #55	; 0x37
 800ad1c:	e7e3      	b.n	800ace6 <_strtoul_l.constprop.0+0x5e>
 800ad1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad22:	f1bc 0f19 	cmp.w	ip, #25
 800ad26:	d804      	bhi.n	800ad32 <_strtoul_l.constprop.0+0xaa>
 800ad28:	3c57      	subs	r4, #87	; 0x57
 800ad2a:	e7dc      	b.n	800ace6 <_strtoul_l.constprop.0+0x5e>
 800ad2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad30:	e7e6      	b.n	800ad00 <_strtoul_l.constprop.0+0x78>
 800ad32:	1c7b      	adds	r3, r7, #1
 800ad34:	d106      	bne.n	800ad44 <_strtoul_l.constprop.0+0xbc>
 800ad36:	2322      	movs	r3, #34	; 0x22
 800ad38:	f8ce 3000 	str.w	r3, [lr]
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	b932      	cbnz	r2, 800ad4e <_strtoul_l.constprop.0+0xc6>
 800ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad44:	b106      	cbz	r6, 800ad48 <_strtoul_l.constprop.0+0xc0>
 800ad46:	4240      	negs	r0, r0
 800ad48:	2a00      	cmp	r2, #0
 800ad4a:	d0f9      	beq.n	800ad40 <_strtoul_l.constprop.0+0xb8>
 800ad4c:	b107      	cbz	r7, 800ad50 <_strtoul_l.constprop.0+0xc8>
 800ad4e:	1e69      	subs	r1, r5, #1
 800ad50:	6011      	str	r1, [r2, #0]
 800ad52:	e7f5      	b.n	800ad40 <_strtoul_l.constprop.0+0xb8>
 800ad54:	2430      	movs	r4, #48	; 0x30
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1b5      	bne.n	800acc6 <_strtoul_l.constprop.0+0x3e>
 800ad5a:	2308      	movs	r3, #8
 800ad5c:	e7b3      	b.n	800acc6 <_strtoul_l.constprop.0+0x3e>
 800ad5e:	2c30      	cmp	r4, #48	; 0x30
 800ad60:	d0a9      	beq.n	800acb6 <_strtoul_l.constprop.0+0x2e>
 800ad62:	230a      	movs	r3, #10
 800ad64:	e7af      	b.n	800acc6 <_strtoul_l.constprop.0+0x3e>
 800ad66:	bf00      	nop
 800ad68:	0800b659 	.word	0x0800b659

0800ad6c <_strtoul_r>:
 800ad6c:	f7ff bf8c 	b.w	800ac88 <_strtoul_l.constprop.0>

0800ad70 <__ascii_wctomb>:
 800ad70:	b149      	cbz	r1, 800ad86 <__ascii_wctomb+0x16>
 800ad72:	2aff      	cmp	r2, #255	; 0xff
 800ad74:	bf85      	ittet	hi
 800ad76:	238a      	movhi	r3, #138	; 0x8a
 800ad78:	6003      	strhi	r3, [r0, #0]
 800ad7a:	700a      	strbls	r2, [r1, #0]
 800ad7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad80:	bf98      	it	ls
 800ad82:	2001      	movls	r0, #1
 800ad84:	4770      	bx	lr
 800ad86:	4608      	mov	r0, r1
 800ad88:	4770      	bx	lr
	...

0800ad8c <fiprintf>:
 800ad8c:	b40e      	push	{r1, r2, r3}
 800ad8e:	b503      	push	{r0, r1, lr}
 800ad90:	4601      	mov	r1, r0
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	4805      	ldr	r0, [pc, #20]	; (800adac <fiprintf+0x20>)
 800ad96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f000 f83f 	bl	800ae20 <_vfiprintf_r>
 800ada2:	b002      	add	sp, #8
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b003      	add	sp, #12
 800adaa:	4770      	bx	lr
 800adac:	20000064 	.word	0x20000064

0800adb0 <abort>:
 800adb0:	b508      	push	{r3, lr}
 800adb2:	2006      	movs	r0, #6
 800adb4:	f000 fa0c 	bl	800b1d0 <raise>
 800adb8:	2001      	movs	r0, #1
 800adba:	f7f7 f971 	bl	80020a0 <_exit>

0800adbe <_malloc_usable_size_r>:
 800adbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc2:	1f18      	subs	r0, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bfbc      	itt	lt
 800adc8:	580b      	ldrlt	r3, [r1, r0]
 800adca:	18c0      	addlt	r0, r0, r3
 800adcc:	4770      	bx	lr

0800adce <__sfputc_r>:
 800adce:	6893      	ldr	r3, [r2, #8]
 800add0:	3b01      	subs	r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	b410      	push	{r4}
 800add6:	6093      	str	r3, [r2, #8]
 800add8:	da08      	bge.n	800adec <__sfputc_r+0x1e>
 800adda:	6994      	ldr	r4, [r2, #24]
 800addc:	42a3      	cmp	r3, r4
 800adde:	db01      	blt.n	800ade4 <__sfputc_r+0x16>
 800ade0:	290a      	cmp	r1, #10
 800ade2:	d103      	bne.n	800adec <__sfputc_r+0x1e>
 800ade4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade8:	f000 b934 	b.w	800b054 <__swbuf_r>
 800adec:	6813      	ldr	r3, [r2, #0]
 800adee:	1c58      	adds	r0, r3, #1
 800adf0:	6010      	str	r0, [r2, #0]
 800adf2:	7019      	strb	r1, [r3, #0]
 800adf4:	4608      	mov	r0, r1
 800adf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <__sfputs_r>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	4614      	mov	r4, r2
 800ae04:	18d5      	adds	r5, r2, r3
 800ae06:	42ac      	cmp	r4, r5
 800ae08:	d101      	bne.n	800ae0e <__sfputs_r+0x12>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	e007      	b.n	800ae1e <__sfputs_r+0x22>
 800ae0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae12:	463a      	mov	r2, r7
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff ffda 	bl	800adce <__sfputc_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	d1f3      	bne.n	800ae06 <__sfputs_r+0xa>
 800ae1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae20 <_vfiprintf_r>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	460d      	mov	r5, r1
 800ae26:	b09d      	sub	sp, #116	; 0x74
 800ae28:	4614      	mov	r4, r2
 800ae2a:	4698      	mov	r8, r3
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	b118      	cbz	r0, 800ae38 <_vfiprintf_r+0x18>
 800ae30:	6a03      	ldr	r3, [r0, #32]
 800ae32:	b90b      	cbnz	r3, 800ae38 <_vfiprintf_r+0x18>
 800ae34:	f7fc f944 	bl	80070c0 <__sinit>
 800ae38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d405      	bmi.n	800ae4a <_vfiprintf_r+0x2a>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d402      	bmi.n	800ae4a <_vfiprintf_r+0x2a>
 800ae44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae46:	f7fc fa95 	bl	8007374 <__retarget_lock_acquire_recursive>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	071b      	lsls	r3, r3, #28
 800ae4e:	d501      	bpl.n	800ae54 <_vfiprintf_r+0x34>
 800ae50:	692b      	ldr	r3, [r5, #16]
 800ae52:	b99b      	cbnz	r3, 800ae7c <_vfiprintf_r+0x5c>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 f93a 	bl	800b0d0 <__swsetup_r>
 800ae5c:	b170      	cbz	r0, 800ae7c <_vfiprintf_r+0x5c>
 800ae5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae60:	07dc      	lsls	r4, r3, #31
 800ae62:	d504      	bpl.n	800ae6e <_vfiprintf_r+0x4e>
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	b01d      	add	sp, #116	; 0x74
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	0598      	lsls	r0, r3, #22
 800ae72:	d4f7      	bmi.n	800ae64 <_vfiprintf_r+0x44>
 800ae74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae76:	f7fc fa7e 	bl	8007376 <__retarget_lock_release_recursive>
 800ae7a:	e7f3      	b.n	800ae64 <_vfiprintf_r+0x44>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae80:	2320      	movs	r3, #32
 800ae82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8a:	2330      	movs	r3, #48	; 0x30
 800ae8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b040 <_vfiprintf_r+0x220>
 800ae90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae94:	f04f 0901 	mov.w	r9, #1
 800ae98:	4623      	mov	r3, r4
 800ae9a:	469a      	mov	sl, r3
 800ae9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea0:	b10a      	cbz	r2, 800aea6 <_vfiprintf_r+0x86>
 800aea2:	2a25      	cmp	r2, #37	; 0x25
 800aea4:	d1f9      	bne.n	800ae9a <_vfiprintf_r+0x7a>
 800aea6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeaa:	d00b      	beq.n	800aec4 <_vfiprintf_r+0xa4>
 800aeac:	465b      	mov	r3, fp
 800aeae:	4622      	mov	r2, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ffa2 	bl	800adfc <__sfputs_r>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f000 80a9 	beq.w	800b010 <_vfiprintf_r+0x1f0>
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	445a      	add	r2, fp
 800aec2:	9209      	str	r2, [sp, #36]	; 0x24
 800aec4:	f89a 3000 	ldrb.w	r3, [sl]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80a1 	beq.w	800b010 <_vfiprintf_r+0x1f0>
 800aece:	2300      	movs	r3, #0
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295
 800aed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed8:	f10a 0a01 	add.w	sl, sl, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	9307      	str	r3, [sp, #28]
 800aee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee4:	931a      	str	r3, [sp, #104]	; 0x68
 800aee6:	4654      	mov	r4, sl
 800aee8:	2205      	movs	r2, #5
 800aeea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeee:	4854      	ldr	r0, [pc, #336]	; (800b040 <_vfiprintf_r+0x220>)
 800aef0:	f7f5 f96e 	bl	80001d0 <memchr>
 800aef4:	9a04      	ldr	r2, [sp, #16]
 800aef6:	b9d8      	cbnz	r0, 800af30 <_vfiprintf_r+0x110>
 800aef8:	06d1      	lsls	r1, r2, #27
 800aefa:	bf44      	itt	mi
 800aefc:	2320      	movmi	r3, #32
 800aefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af02:	0713      	lsls	r3, r2, #28
 800af04:	bf44      	itt	mi
 800af06:	232b      	movmi	r3, #43	; 0x2b
 800af08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0c:	f89a 3000 	ldrb.w	r3, [sl]
 800af10:	2b2a      	cmp	r3, #42	; 0x2a
 800af12:	d015      	beq.n	800af40 <_vfiprintf_r+0x120>
 800af14:	9a07      	ldr	r2, [sp, #28]
 800af16:	4654      	mov	r4, sl
 800af18:	2000      	movs	r0, #0
 800af1a:	f04f 0c0a 	mov.w	ip, #10
 800af1e:	4621      	mov	r1, r4
 800af20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af24:	3b30      	subs	r3, #48	; 0x30
 800af26:	2b09      	cmp	r3, #9
 800af28:	d94d      	bls.n	800afc6 <_vfiprintf_r+0x1a6>
 800af2a:	b1b0      	cbz	r0, 800af5a <_vfiprintf_r+0x13a>
 800af2c:	9207      	str	r2, [sp, #28]
 800af2e:	e014      	b.n	800af5a <_vfiprintf_r+0x13a>
 800af30:	eba0 0308 	sub.w	r3, r0, r8
 800af34:	fa09 f303 	lsl.w	r3, r9, r3
 800af38:	4313      	orrs	r3, r2
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	46a2      	mov	sl, r4
 800af3e:	e7d2      	b.n	800aee6 <_vfiprintf_r+0xc6>
 800af40:	9b03      	ldr	r3, [sp, #12]
 800af42:	1d19      	adds	r1, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9103      	str	r1, [sp, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfbb      	ittet	lt
 800af4c:	425b      	neglt	r3, r3
 800af4e:	f042 0202 	orrlt.w	r2, r2, #2
 800af52:	9307      	strge	r3, [sp, #28]
 800af54:	9307      	strlt	r3, [sp, #28]
 800af56:	bfb8      	it	lt
 800af58:	9204      	strlt	r2, [sp, #16]
 800af5a:	7823      	ldrb	r3, [r4, #0]
 800af5c:	2b2e      	cmp	r3, #46	; 0x2e
 800af5e:	d10c      	bne.n	800af7a <_vfiprintf_r+0x15a>
 800af60:	7863      	ldrb	r3, [r4, #1]
 800af62:	2b2a      	cmp	r3, #42	; 0x2a
 800af64:	d134      	bne.n	800afd0 <_vfiprintf_r+0x1b0>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d1a      	adds	r2, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9203      	str	r2, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfb8      	it	lt
 800af72:	f04f 33ff 	movlt.w	r3, #4294967295
 800af76:	3402      	adds	r4, #2
 800af78:	9305      	str	r3, [sp, #20]
 800af7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b050 <_vfiprintf_r+0x230>
 800af7e:	7821      	ldrb	r1, [r4, #0]
 800af80:	2203      	movs	r2, #3
 800af82:	4650      	mov	r0, sl
 800af84:	f7f5 f924 	bl	80001d0 <memchr>
 800af88:	b138      	cbz	r0, 800af9a <_vfiprintf_r+0x17a>
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	eba0 000a 	sub.w	r0, r0, sl
 800af90:	2240      	movs	r2, #64	; 0x40
 800af92:	4082      	lsls	r2, r0
 800af94:	4313      	orrs	r3, r2
 800af96:	3401      	adds	r4, #1
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9e:	4829      	ldr	r0, [pc, #164]	; (800b044 <_vfiprintf_r+0x224>)
 800afa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa4:	2206      	movs	r2, #6
 800afa6:	f7f5 f913 	bl	80001d0 <memchr>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d03f      	beq.n	800b02e <_vfiprintf_r+0x20e>
 800afae:	4b26      	ldr	r3, [pc, #152]	; (800b048 <_vfiprintf_r+0x228>)
 800afb0:	bb1b      	cbnz	r3, 800affa <_vfiprintf_r+0x1da>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	3307      	adds	r3, #7
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	3308      	adds	r3, #8
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	443b      	add	r3, r7
 800afc2:	9309      	str	r3, [sp, #36]	; 0x24
 800afc4:	e768      	b.n	800ae98 <_vfiprintf_r+0x78>
 800afc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afca:	460c      	mov	r4, r1
 800afcc:	2001      	movs	r0, #1
 800afce:	e7a6      	b.n	800af1e <_vfiprintf_r+0xfe>
 800afd0:	2300      	movs	r3, #0
 800afd2:	3401      	adds	r4, #1
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	4619      	mov	r1, r3
 800afd8:	f04f 0c0a 	mov.w	ip, #10
 800afdc:	4620      	mov	r0, r4
 800afde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe2:	3a30      	subs	r2, #48	; 0x30
 800afe4:	2a09      	cmp	r2, #9
 800afe6:	d903      	bls.n	800aff0 <_vfiprintf_r+0x1d0>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0c6      	beq.n	800af7a <_vfiprintf_r+0x15a>
 800afec:	9105      	str	r1, [sp, #20]
 800afee:	e7c4      	b.n	800af7a <_vfiprintf_r+0x15a>
 800aff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff4:	4604      	mov	r4, r0
 800aff6:	2301      	movs	r3, #1
 800aff8:	e7f0      	b.n	800afdc <_vfiprintf_r+0x1bc>
 800affa:	ab03      	add	r3, sp, #12
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	462a      	mov	r2, r5
 800b000:	4b12      	ldr	r3, [pc, #72]	; (800b04c <_vfiprintf_r+0x22c>)
 800b002:	a904      	add	r1, sp, #16
 800b004:	4630      	mov	r0, r6
 800b006:	f7fb fa0b 	bl	8006420 <_printf_float>
 800b00a:	4607      	mov	r7, r0
 800b00c:	1c78      	adds	r0, r7, #1
 800b00e:	d1d6      	bne.n	800afbe <_vfiprintf_r+0x19e>
 800b010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b012:	07d9      	lsls	r1, r3, #31
 800b014:	d405      	bmi.n	800b022 <_vfiprintf_r+0x202>
 800b016:	89ab      	ldrh	r3, [r5, #12]
 800b018:	059a      	lsls	r2, r3, #22
 800b01a:	d402      	bmi.n	800b022 <_vfiprintf_r+0x202>
 800b01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b01e:	f7fc f9aa 	bl	8007376 <__retarget_lock_release_recursive>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	065b      	lsls	r3, r3, #25
 800b026:	f53f af1d 	bmi.w	800ae64 <_vfiprintf_r+0x44>
 800b02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02c:	e71c      	b.n	800ae68 <_vfiprintf_r+0x48>
 800b02e:	ab03      	add	r3, sp, #12
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	462a      	mov	r2, r5
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <_vfiprintf_r+0x22c>)
 800b036:	a904      	add	r1, sp, #16
 800b038:	4630      	mov	r0, r6
 800b03a:	f7fb fc95 	bl	8006968 <_printf_i>
 800b03e:	e7e4      	b.n	800b00a <_vfiprintf_r+0x1ea>
 800b040:	0800b759 	.word	0x0800b759
 800b044:	0800b763 	.word	0x0800b763
 800b048:	08006421 	.word	0x08006421
 800b04c:	0800adfd 	.word	0x0800adfd
 800b050:	0800b75f 	.word	0x0800b75f

0800b054 <__swbuf_r>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	460e      	mov	r6, r1
 800b058:	4614      	mov	r4, r2
 800b05a:	4605      	mov	r5, r0
 800b05c:	b118      	cbz	r0, 800b066 <__swbuf_r+0x12>
 800b05e:	6a03      	ldr	r3, [r0, #32]
 800b060:	b90b      	cbnz	r3, 800b066 <__swbuf_r+0x12>
 800b062:	f7fc f82d 	bl	80070c0 <__sinit>
 800b066:	69a3      	ldr	r3, [r4, #24]
 800b068:	60a3      	str	r3, [r4, #8]
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	071a      	lsls	r2, r3, #28
 800b06e:	d525      	bpl.n	800b0bc <__swbuf_r+0x68>
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	b31b      	cbz	r3, 800b0bc <__swbuf_r+0x68>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	1a98      	subs	r0, r3, r2
 800b07a:	6963      	ldr	r3, [r4, #20]
 800b07c:	b2f6      	uxtb	r6, r6
 800b07e:	4283      	cmp	r3, r0
 800b080:	4637      	mov	r7, r6
 800b082:	dc04      	bgt.n	800b08e <__swbuf_r+0x3a>
 800b084:	4621      	mov	r1, r4
 800b086:	4628      	mov	r0, r5
 800b088:	f7ff f942 	bl	800a310 <_fflush_r>
 800b08c:	b9e0      	cbnz	r0, 800b0c8 <__swbuf_r+0x74>
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	701e      	strb	r6, [r3, #0]
 800b09c:	6962      	ldr	r2, [r4, #20]
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d004      	beq.n	800b0ae <__swbuf_r+0x5a>
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	07db      	lsls	r3, r3, #31
 800b0a8:	d506      	bpl.n	800b0b8 <__swbuf_r+0x64>
 800b0aa:	2e0a      	cmp	r6, #10
 800b0ac:	d104      	bne.n	800b0b8 <__swbuf_r+0x64>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff f92d 	bl	800a310 <_fflush_r>
 800b0b6:	b938      	cbnz	r0, 800b0c8 <__swbuf_r+0x74>
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 f806 	bl	800b0d0 <__swsetup_r>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d0d5      	beq.n	800b074 <__swbuf_r+0x20>
 800b0c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b0cc:	e7f4      	b.n	800b0b8 <__swbuf_r+0x64>
	...

0800b0d0 <__swsetup_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <__swsetup_r+0xac>)
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	460c      	mov	r4, r1
 800b0da:	b118      	cbz	r0, 800b0e4 <__swsetup_r+0x14>
 800b0dc:	6a03      	ldr	r3, [r0, #32]
 800b0de:	b90b      	cbnz	r3, 800b0e4 <__swsetup_r+0x14>
 800b0e0:	f7fb ffee 	bl	80070c0 <__sinit>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0ea:	0718      	lsls	r0, r3, #28
 800b0ec:	d422      	bmi.n	800b134 <__swsetup_r+0x64>
 800b0ee:	06d9      	lsls	r1, r3, #27
 800b0f0:	d407      	bmi.n	800b102 <__swsetup_r+0x32>
 800b0f2:	2309      	movs	r3, #9
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e034      	b.n	800b16c <__swsetup_r+0x9c>
 800b102:	0758      	lsls	r0, r3, #29
 800b104:	d512      	bpl.n	800b12c <__swsetup_r+0x5c>
 800b106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b108:	b141      	cbz	r1, 800b11c <__swsetup_r+0x4c>
 800b10a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b10e:	4299      	cmp	r1, r3
 800b110:	d002      	beq.n	800b118 <__swsetup_r+0x48>
 800b112:	4628      	mov	r0, r5
 800b114:	f7fc ffba 	bl	800808c <_free_r>
 800b118:	2300      	movs	r3, #0
 800b11a:	6363      	str	r3, [r4, #52]	; 0x34
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	2300      	movs	r3, #0
 800b126:	6063      	str	r3, [r4, #4]
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	f043 0308 	orr.w	r3, r3, #8
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	b94b      	cbnz	r3, 800b14c <__swsetup_r+0x7c>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b13e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b142:	d003      	beq.n	800b14c <__swsetup_r+0x7c>
 800b144:	4621      	mov	r1, r4
 800b146:	4628      	mov	r0, r5
 800b148:	f000 f884 	bl	800b254 <__smakebuf_r>
 800b14c:	89a0      	ldrh	r0, [r4, #12]
 800b14e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b152:	f010 0301 	ands.w	r3, r0, #1
 800b156:	d00a      	beq.n	800b16e <__swsetup_r+0x9e>
 800b158:	2300      	movs	r3, #0
 800b15a:	60a3      	str	r3, [r4, #8]
 800b15c:	6963      	ldr	r3, [r4, #20]
 800b15e:	425b      	negs	r3, r3
 800b160:	61a3      	str	r3, [r4, #24]
 800b162:	6923      	ldr	r3, [r4, #16]
 800b164:	b943      	cbnz	r3, 800b178 <__swsetup_r+0xa8>
 800b166:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b16a:	d1c4      	bne.n	800b0f6 <__swsetup_r+0x26>
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	0781      	lsls	r1, r0, #30
 800b170:	bf58      	it	pl
 800b172:	6963      	ldrpl	r3, [r4, #20]
 800b174:	60a3      	str	r3, [r4, #8]
 800b176:	e7f4      	b.n	800b162 <__swsetup_r+0x92>
 800b178:	2000      	movs	r0, #0
 800b17a:	e7f7      	b.n	800b16c <__swsetup_r+0x9c>
 800b17c:	20000064 	.word	0x20000064

0800b180 <_raise_r>:
 800b180:	291f      	cmp	r1, #31
 800b182:	b538      	push	{r3, r4, r5, lr}
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	d904      	bls.n	800b194 <_raise_r+0x14>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b196:	b112      	cbz	r2, 800b19e <_raise_r+0x1e>
 800b198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b19c:	b94b      	cbnz	r3, 800b1b2 <_raise_r+0x32>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f830 	bl	800b204 <_getpid_r>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ae:	f000 b817 	b.w	800b1e0 <_kill_r>
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d00a      	beq.n	800b1cc <_raise_r+0x4c>
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	d103      	bne.n	800b1c2 <_raise_r+0x42>
 800b1ba:	2316      	movs	r3, #22
 800b1bc:	6003      	str	r3, [r0, #0]
 800b1be:	2001      	movs	r0, #1
 800b1c0:	e7e7      	b.n	800b192 <_raise_r+0x12>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	4798      	blx	r3
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7e0      	b.n	800b192 <_raise_r+0x12>

0800b1d0 <raise>:
 800b1d0:	4b02      	ldr	r3, [pc, #8]	; (800b1dc <raise+0xc>)
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	f7ff bfd3 	b.w	800b180 <_raise_r>
 800b1da:	bf00      	nop
 800b1dc:	20000064 	.word	0x20000064

0800b1e0 <_kill_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_kill_r+0x20>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 ff47 	bl	8002080 <_kill>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_kill_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_kill_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	2000115c 	.word	0x2000115c

0800b204 <_getpid_r>:
 800b204:	f7f6 bf34 	b.w	8002070 <_getpid>

0800b208 <__swhatbuf_r>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	460c      	mov	r4, r1
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2900      	cmp	r1, #0
 800b212:	b096      	sub	sp, #88	; 0x58
 800b214:	4615      	mov	r5, r2
 800b216:	461e      	mov	r6, r3
 800b218:	da0d      	bge.n	800b236 <__swhatbuf_r+0x2e>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b220:	f04f 0100 	mov.w	r1, #0
 800b224:	bf0c      	ite	eq
 800b226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b22a:	2340      	movne	r3, #64	; 0x40
 800b22c:	2000      	movs	r0, #0
 800b22e:	6031      	str	r1, [r6, #0]
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	b016      	add	sp, #88	; 0x58
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	466a      	mov	r2, sp
 800b238:	f000 f848 	bl	800b2cc <_fstat_r>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	dbec      	blt.n	800b21a <__swhatbuf_r+0x12>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b24a:	4259      	negs	r1, r3
 800b24c:	4159      	adcs	r1, r3
 800b24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b252:	e7eb      	b.n	800b22c <__swhatbuf_r+0x24>

0800b254 <__smakebuf_r>:
 800b254:	898b      	ldrh	r3, [r1, #12]
 800b256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b258:	079d      	lsls	r5, r3, #30
 800b25a:	4606      	mov	r6, r0
 800b25c:	460c      	mov	r4, r1
 800b25e:	d507      	bpl.n	800b270 <__smakebuf_r+0x1c>
 800b260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2301      	movs	r3, #1
 800b26a:	6163      	str	r3, [r4, #20]
 800b26c:	b002      	add	sp, #8
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	ab01      	add	r3, sp, #4
 800b272:	466a      	mov	r2, sp
 800b274:	f7ff ffc8 	bl	800b208 <__swhatbuf_r>
 800b278:	9900      	ldr	r1, [sp, #0]
 800b27a:	4605      	mov	r5, r0
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7fc ff79 	bl	8008174 <_malloc_r>
 800b282:	b948      	cbnz	r0, 800b298 <__smakebuf_r+0x44>
 800b284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b288:	059a      	lsls	r2, r3, #22
 800b28a:	d4ef      	bmi.n	800b26c <__smakebuf_r+0x18>
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	f043 0302 	orr.w	r3, r3, #2
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	e7e3      	b.n	800b260 <__smakebuf_r+0xc>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	6020      	str	r0, [r4, #0]
 800b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	9b00      	ldr	r3, [sp, #0]
 800b2a4:	6163      	str	r3, [r4, #20]
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	6120      	str	r0, [r4, #16]
 800b2aa:	b15b      	cbz	r3, 800b2c4 <__smakebuf_r+0x70>
 800b2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f000 f81d 	bl	800b2f0 <_isatty_r>
 800b2b6:	b128      	cbz	r0, 800b2c4 <__smakebuf_r+0x70>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f023 0303 	bic.w	r3, r3, #3
 800b2be:	f043 0301 	orr.w	r3, r3, #1
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	431d      	orrs	r5, r3
 800b2c8:	81a5      	strh	r5, [r4, #12]
 800b2ca:	e7cf      	b.n	800b26c <__smakebuf_r+0x18>

0800b2cc <_fstat_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_fstat_r+0x20>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	f7f6 ff30 	bl	800213e <_fstat>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d102      	bne.n	800b2e8 <_fstat_r+0x1c>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	b103      	cbz	r3, 800b2e8 <_fstat_r+0x1c>
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000115c 	.word	0x2000115c

0800b2f0 <_isatty_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d06      	ldr	r5, [pc, #24]	; (800b30c <_isatty_r+0x1c>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	f7f6 ff2f 	bl	800215e <_isatty>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_isatty_r+0x1a>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_isatty_r+0x1a>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	2000115c 	.word	0x2000115c

0800b310 <_init>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr

0800b31c <_fini>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr
